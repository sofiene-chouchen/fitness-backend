{"version":3,"sources":["../src/formatters/values_formatter.ts","../src/formatters/relative_time_formatter.ts","../src/vine_i18n_messages_provider.ts","../src/i18n.ts","../src/i18n_manager.ts"],"sourcesContent":["/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport formatters from '@poppinss/intl-formatter'\nimport { DateTime, type DurationObjectUnits } from 'luxon'\n\nimport { format } from './relative_time_formatter.js'\nimport type { TimeFormatOptions, NumberFormatOptions, CurrencyFormatOptions } from '../types.js'\n\n/**\n * Mapping of \"Intl.RelativeTimeFormatUnit\" to luxon \"DurationObjectUnits\"\n */\nconst DIFF_UNITS: Record<Intl.RelativeTimeFormatUnit, keyof DurationObjectUnits> = {\n  year: 'years',\n  years: 'years',\n  quarter: 'quarters',\n  quarters: 'quarters',\n  month: 'months',\n  months: 'months',\n  week: 'weeks',\n  weeks: 'weeks',\n  day: 'days',\n  days: 'days',\n  hour: 'hours',\n  hours: 'hours',\n  minute: 'minutes',\n  minutes: 'minutes',\n  second: 'seconds',\n  seconds: 'seconds',\n}\n\n/**\n * Core formatter to format different values using the I18n API\n */\nexport class Formatter {\n  #locale: string\n\n  /**\n   * The local for the formatter\n   */\n  get locale() {\n    return this.#locale\n  }\n\n  constructor(locale: string) {\n    this.#locale = locale\n  }\n\n  switchLocale(locale: string) {\n    this.#locale = locale\n  }\n\n  /**\n   * Returns the diff between the current time and the user provided date\n   *\n   * - If the value is a string, we consider it as an ISODateTime string\n   * - If value is a number, then we consider it as a diff in the user provided unit.\n   */\n  #getTimeDiff(\n    value: string | number | Date | DateTime,\n    unit: Intl.RelativeTimeFormatUnit | 'auto'\n  ): number {\n    const diffUnit = unit === 'auto' ? 'milliseconds' : DIFF_UNITS[unit]\n\n    /**\n     * Returns the diff from the ISODateTime string. The diff is calculated\n     * in milliseconds when the user provided unit is auto.\n     */\n    if (typeof value === 'string') {\n      return DateTime.fromISO(value).diff(DateTime.local(), diffUnit)[diffUnit]\n    }\n\n    /**\n     * Returns the diff from the luxon datetime instance. The diff is calculated\n     * in milliseconds when the user provided unit is auto.\n     */\n    if (DateTime.isDateTime(value)) {\n      return value.diff(DateTime.local(), diffUnit)[diffUnit]\n    }\n\n    /**\n     * Returns the diff from the luxon date instance. The diff is calculated\n     * in milliseconds when the user provided unit is auto.\n     */\n    if (value instanceof Date) {\n      return DateTime.fromJSDate(value).diff(DateTime.local(), diffUnit)[diffUnit]\n    }\n\n    /**\n     * Consider user provided value itself as a diff\n     */\n    return value\n  }\n\n  /**\n   * Format a numeric value for a given style\n   */\n  formatNumber(value: string | number | bigint, options?: NumberFormatOptions) {\n    value = typeof value === 'string' ? Number(value) : value\n    return formatters.number(this.locale, options).format(value)\n  }\n\n  /**\n   * Format a numeric value to a currency\n   */\n  formatCurrency(value: string | number | bigint, options: CurrencyFormatOptions): string {\n    const currencyOptions = { style: 'currency' as const, ...options }\n    return this.formatNumber(value, currencyOptions)\n  }\n\n  /**\n   * Format value as a date. The method accepts the following data\n   * types.\n   *\n   * - Date instance\n   * - Luxon DateTime instance\n   * - Number representing a unix timestamp\n   * - String representing an ISO date/time value\n   */\n  formatDate(value: string | number | Date | DateTime, options?: Intl.DateTimeFormatOptions) {\n    let normalizedDate: Date | number\n\n    if (typeof value === 'string') {\n      normalizedDate = DateTime.fromISO(value).toJSDate()\n    } else if (DateTime.isDateTime(value)) {\n      normalizedDate = value.toJSDate()\n    } else {\n      normalizedDate = value\n    }\n\n    return formatters.date(this.locale, options).format(normalizedDate)\n  }\n\n  /**\n   * Format value as time. The method accepts the following data\n   * types.\n   *\n   * - Date instance\n   * - Luxon DateTime instance\n   * - Number representing a unix timestamp\n   * - String representing an ISO date/time value\n   */\n  formatTime(value: string | number | Date | DateTime, options?: TimeFormatOptions) {\n    if (!options) {\n      options = { timeStyle: 'medium' }\n    } else if (!options.hour && !options.minute && !options.second) {\n      options = { timeStyle: 'medium', ...options }\n    }\n\n    return this.formatDate(value, options)\n  }\n\n  /**\n   * Format value as relative diff between the current time\n   * and the given value.\n   *\n   * The following data types are allowed\n   *\n   * - Date instance\n   * - Luxon DateTime instance\n   * - Number representing the diff value in provided units. If the \"unit\" is\n   *   auto, the number will be considered as a diff in milliseconds\n   * - String representing an ISO date/time value\n   */\n  formatRelativeTime(\n    value: string | number | Date | DateTime,\n    unit: Intl.RelativeTimeFormatUnit | 'auto',\n    options?: Intl.RelativeTimeFormatOptions\n  ): string {\n    const diff = this.#getTimeDiff(value, unit)\n    const formatter = formatters.relative(this.locale, { ...(options || {}) })\n\n    return unit === 'auto'\n      ? format(formatter, diff)\n      : formatter.format(typeof value === 'number' ? diff : Math.floor(diff), unit)\n  }\n\n  /**\n   * Format the value to its plural counter part\n   */\n  formatPlural(value: string | number, options?: Intl.PluralRulesOptions): string {\n    return formatters.plural(this.locale, options).select(Number(value))\n  }\n\n  /**\n   * Format an array of strings to a sentence.\n   */\n  formatList(list: Iterable<string>, options?: Intl.ListFormatOptions) {\n    return formatters.list(this.locale, options).format(list)\n  }\n\n  /**\n   * Format region, currency, language codes to their display names\n   */\n  formatDisplayNames(code: string, options: Intl.DisplayNamesOptions) {\n    return formatters.displayNames(this.locale, options).of(code)\n  }\n}\n","/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Units and the upper bound milliseconds they hold\n */\nconst UNITS = {\n  years: 24 * 60 * 60 * 1000 * 365,\n  months: (24 * 60 * 60 * 1000 * 365) / 12,\n  days: 24 * 60 * 60 * 1000,\n  hours: 60 * 60 * 1000,\n  minutes: 60 * 1000,\n  seconds: 1000,\n}\n\n/**\n * Formats relative time to seconds. The \"test\" method can return true\n * to claim the diff for formatting.\n */\nconst SECONDS_FORMATTER = {\n  test: (diff: number) => diff < UNITS.minutes,\n  format: (formatter: Intl.RelativeTimeFormat, diff: number) => {\n    return formatter.format(Math.floor(diff / UNITS.seconds), 'seconds')\n  },\n}\n\n/**\n * Formats relative time to minutes. The \"test\" method can return true\n * to claim the diff for formatting.\n */\nconst MINUTES_FORMATTER = {\n  test: (diff: number) => diff < UNITS.hours,\n  format: (formatter: Intl.RelativeTimeFormat, diff: number) => {\n    return formatter.format(Math.floor(diff / UNITS.minutes), 'minutes')\n  },\n}\n\n/**\n * Formats relative time to hours. The \"test\" method can return true\n * to claim the diff for formatting.\n */\nconst HOURS_FORMATTER = {\n  test: (diff: number) => diff < UNITS.days,\n  format: (formatter: Intl.RelativeTimeFormat, diff: number) => {\n    return formatter.format(Math.floor(diff / UNITS.hours), 'hours')\n  },\n}\n\n/**\n * Formats relative time to days. The \"test\" method can return true\n * to claim the diff for formatting.\n */\nconst DAYS_FORMATTER = {\n  test: (diff: number) => diff < UNITS.months,\n  format: (formatter: Intl.RelativeTimeFormat, diff: number) => {\n    return formatter.format(Math.floor(diff / UNITS.days), 'days')\n  },\n}\n\n/**\n * Formats relative time to months. The \"test\" method can return true\n * to claim the diff for formatting.\n */\nconst MONTHS_FORMATTER = {\n  test: (diff: number) => diff < UNITS.years,\n  format: (formatter: Intl.RelativeTimeFormat, diff: number) => {\n    return formatter.format(Math.floor(diff / UNITS.months), 'months')\n  },\n}\n\n/**\n * Formats relative time to years. The \"test\" method can return true\n * to claim the diff for formatting.\n */\nconst YEARS_FORMATTER = {\n  test: (_: number) => true,\n  format: (formatter: Intl.RelativeTimeFormat, diff: number) => {\n    return formatter.format(Math.floor(diff / UNITS.years), 'years')\n  },\n}\n\n/**\n * An stack of formatter. Do not change their order, as we invoke\n * them from smallest to the largest unit\n */\nconst UNITS_FORMATTER = [\n  SECONDS_FORMATTER,\n  MINUTES_FORMATTER,\n  HOURS_FORMATTER,\n  DAYS_FORMATTER,\n  MONTHS_FORMATTER,\n  YEARS_FORMATTER,\n]\n\n/**\n * Formats a relative time to a string with \"auto\" unit\n */\nexport function format(formatter: Intl.RelativeTimeFormat, diff: number): string {\n  const absDiff = Math.abs(diff)\n  return UNITS_FORMATTER.find(({ test }) => test(absDiff))!.format(formatter, diff)\n}\n","/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport string from '@poppinss/utils/string'\nimport type { I18n } from './i18n.js'\nimport type { FieldContext, MessagesProviderContact } from '@vinejs/vine/types'\n\n/**\n * VineJS messages provider to read validation messages\n * from translations\n */\nexport class I18nMessagesProvider implements MessagesProviderContact {\n  /**\n   * The validation messages prefix to use when reading translations.\n   */\n  #messagesPrefix: string\n\n  /**\n   * The validation fields prefix to use when reading translations.\n   */\n  #fieldsPrefix: string\n\n  /**\n   * Reference to i18n for formatting messages\n   */\n  #i18n: I18n\n\n  constructor(prefix: string, i18n: I18n) {\n    this.#fieldsPrefix = `${prefix}.fields`\n    this.#messagesPrefix = `${prefix}.messages`\n    this.#i18n = i18n\n  }\n\n  getMessage(\n    defaultMessage: string,\n    rule: string,\n    field: FieldContext,\n    meta?: Record<string, any>\n  ) {\n    /**\n     * Translating field name\n     */\n    let fieldName = field.name\n    const translatedFieldName = this.#i18n.resolveIdentifier(`${this.#fieldsPrefix}.${field.name}`)\n    if (translatedFieldName) {\n      fieldName = this.#i18n.formatRawMessage(translatedFieldName.message)\n    }\n\n    /**\n     * 1st priority is given to the field messages\n     */\n    const fieldMessage = this.#i18n.resolveIdentifier(\n      `${this.#messagesPrefix}.${field.wildCardPath}.${rule}`\n    )\n    if (fieldMessage) {\n      return this.#i18n.formatRawMessage(fieldMessage.message, {\n        field: fieldName,\n        ...meta,\n      })\n    }\n\n    /**\n     * 2nd priority is for rule messages\n     */\n    const ruleMessage = this.#i18n.resolveIdentifier(`${this.#messagesPrefix}.${rule}`)\n    if (ruleMessage) {\n      return this.#i18n.formatRawMessage(ruleMessage.message, {\n        field: fieldName,\n        ...meta,\n      })\n    }\n\n    /**\n     * Fallback to default message\n     */\n    return string.interpolate(defaultMessage, {\n      field: fieldName,\n      ...meta,\n    })\n  }\n}\n","/*\n * @adonisjs/i18n\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Emitter } from '@adonisjs/core/events'\n\nimport debug from './debug.js'\nimport type { I18nManager } from './i18n_manager.js'\nimport { Formatter } from './formatters/values_formatter.js'\nimport type { MissingTranslationEventPayload } from './types.js'\nimport { I18nMessagesProvider } from './vine_i18n_messages_provider.js'\n\n/**\n * I18n exposes the APIs to format values and translate messages\n * for a given locale.\n *\n * Under the hood it uses the I18nManager to load translations data\n */\nexport class I18n extends Formatter {\n  #i18nManager: I18nManager\n  #emitter: Emitter<{ 'i18n:missing:translation': MissingTranslationEventPayload } & any>\n\n  /**\n   * Translations for the selected locale\n   */\n  localeTranslations: Record<string, string>\n\n  /**\n   * Translations for the fallback locale. The fallback translations\n   * are used when the selected locale translations are missing\n   */\n  fallbackTranslations: Record<string, string>\n\n  /**\n   * The fallback locale for the current instance.\n   */\n  fallbackLocale: string\n\n  /**\n   * Creates a messages provider for VineJS\n   */\n  createMessagesProvider(prefix: string = 'validator.shared') {\n    return new I18nMessagesProvider(prefix, this)\n  }\n\n  constructor(\n    locale: string,\n    emitter: Emitter<{ 'i18n:missing:translation': MissingTranslationEventPayload } & any>,\n    i18nManager: I18nManager\n  ) {\n    super(locale)\n\n    this.#emitter = emitter\n    this.#i18nManager = i18nManager\n    this.fallbackLocale = this.#i18nManager.getFallbackLocaleFor(locale)\n    this.localeTranslations = this.#i18nManager.getTranslationsFor(this.locale)\n    this.fallbackTranslations = this.#i18nManager.getTranslationsFor(this.fallbackLocale)\n\n    debug('creating i18n for locale \"%s\" with fallback locale \"%s\"', locale, this.fallbackLocale)\n  }\n\n  /**\n   * Emits the missing translation message\n   */\n  #notifyForMissingTranslation(identifier: string, hasFallback: boolean) {\n    this.#emitter.emit('i18n:missing:translation', {\n      locale: this.locale,\n      identifier,\n      hasFallback,\n    })\n  }\n\n  /**\n   * Returns the message for a given identifier\n   */\n  resolveIdentifier(identifier: string): { message: string; isFallback: boolean } | null {\n    let message = this.localeTranslations[identifier]\n\n    /**\n     * Return the translation (if exists)\n     */\n    if (message) {\n      return { message, isFallback: false }\n    }\n\n    /**\n     * Look for translation inside the fallback messages\n     */\n    message = this.fallbackTranslations[identifier]\n    if (message) {\n      return { message, isFallback: true }\n    }\n\n    return null\n  }\n\n  /**\n   * Returns a boolean identifying if the message for a given\n   * identifier exists or not\n   */\n  hasMessage(identifier: string): boolean {\n    return this.localeTranslations[identifier] !== undefined\n  }\n\n  /**\n   * Returns a boolean identifying if a fallback message for a given\n   * identifier exists or not\n   */\n  hasFallbackMessage(identifier: string): boolean {\n    return this.fallbackTranslations[identifier] !== undefined\n  }\n\n  /**\n   * Switch locale for the current instance\n   */\n  switchLocale(locale: string) {\n    debug('switching locale from \"%s\" to \"%s\"', this.locale, locale)\n\n    super.switchLocale(locale)\n    this.fallbackLocale = this.#i18nManager.getFallbackLocaleFor(this.locale)\n    this.localeTranslations = this.#i18nManager.getTranslationsFor(this.locale)\n    this.fallbackTranslations = this.#i18nManager.getTranslationsFor(this.fallbackLocale)\n  }\n\n  /**\n   * Formats a message using the messages formatter\n   */\n  formatMessage(identifier: string, data?: Record<string, any>, fallbackMessage?: string): string {\n    const message = this.resolveIdentifier(identifier)\n\n    if (!message) {\n      this.#notifyForMissingTranslation(identifier, false)\n    } else if (message.isFallback) {\n      this.#notifyForMissingTranslation(identifier, true)\n    }\n\n    if (message) {\n      return this.formatRawMessage(message.message, data)\n    }\n\n    /**\n     * Return the inline fallback message (when defined)\n     */\n    if (fallbackMessage !== undefined) {\n      return fallbackMessage\n    }\n\n    /**\n     * Return the global fallback message (when defined)\n     */\n    const globalFallbackMessage = this.#i18nManager.getFallbackMessage(identifier, this.locale)\n    if (globalFallbackMessage !== undefined) {\n      return globalFallbackMessage\n    }\n\n    /**\n     * Otherwise return error message string\n     */\n    return `translation missing: ${this.locale}, ${identifier}`\n  }\n\n  /**\n   * Shorthand method for formatUsage\n   * @alias formatUsage\n   */\n  t(identifier: string, data?: Record<string, any>, fallbackMessage?: string): string {\n    return this.formatMessage(identifier, data, fallbackMessage)\n  }\n\n  /**\n   * Formats a message using the messages formatter\n   */\n  formatRawMessage(message: string, data?: Record<string, any>): string {\n    return this.#i18nManager.getFormatter().format(message, this.locale, data)\n  }\n}\n","/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Negotiator from 'negotiator'\nimport type { Emitter } from '@adonisjs/core/events'\nimport type {\n  I18nManagerConfig,\n  TranslationsFormatterContract,\n  MissingTranslationEventPayload,\n} from './types.js'\n\nimport debug from './debug.js'\nimport { I18n } from './i18n.js'\n\nexport class I18nManager {\n  /**\n   * i18n config\n   */\n  config: I18nManagerConfig\n\n  /**\n   * Reference to the emitter for emitting events\n   */\n  #emitter: Emitter<{ 'i18n:missing:translation': MissingTranslationEventPayload } & any>\n\n  /**\n   * Reference to the formatter in use\n   */\n  #formatter?: TranslationsFormatterContract\n\n  /**\n   * An array of supported locales inferred from the fallback locales\n   * object + the translations directories.\n   *\n   * The array is only used when the config doesn't have an explicit\n   * value.\n   */\n  #inferredLocales: string[] = []\n\n  /**\n   * Cached in-memory translations. The collection is a merged\n   * copy of a\n   */\n  #translations: { [lang: string]: Record<string, string> } = {}\n\n  /**\n   * Find if translations has been cached or not\n   */\n  #hasCachedTranslations: boolean = false\n\n  /**\n   * Reference to the default locale defined inside the config file\n   */\n  get defaultLocale(): string {\n    return this.config.defaultLocale\n  }\n\n  /**\n   * Check if the translations has been cached or not.\n   * Use \"reloadTranslations\" method re-fetch translations\n   */\n  get hasCachedTranslations(): boolean {\n    return this.#hasCachedTranslations\n  }\n\n  constructor(\n    emitter: Emitter<{ 'i18n:missing:translation': MissingTranslationEventPayload } & any>,\n    config: I18nManagerConfig\n  ) {\n    this.config = config\n    this.#emitter = emitter\n  }\n\n  /**\n   * Returns an array of locales supported by the application.\n   *\n   * The method returns locales by inspecting the translations,\n   * when no explicit supportLocales are defined inside the\n   * config file.\n   */\n  supportedLocales() {\n    return this.config.supportedLocales || this.#inferredLocales\n  }\n\n  /**\n   * Returns an object of cached translations. The object is shared\n   * by reference and hence mutations will mutate the original\n   * copy\n   */\n  getTranslations() {\n    return this.#translations\n  }\n\n  /**\n   * Returns an object of translations for a given locale\n   */\n  getTranslationsFor(locale: string) {\n    return this.#translations[locale] || {}\n  }\n\n  /**\n   * Returns an instance of the translations formatter for the\n   * active formatter\n   */\n  getFormatter() {\n    /**\n     * Lazily computing the formatter since we allow register custom\n     * formatters after an instance of manager has been created\n     */\n    if (!this.#formatter) {\n      const formatterFactory = this.config.formatter\n      this.#formatter = formatterFactory(this.config)\n    }\n\n    return this.#formatter\n  }\n\n  /**\n   * Load translations using all the configured loaders.\n   *\n   * The loaded translations are cached forever and you must use\n   * \"reloadTranslations\" method to reload them.\n   */\n  async loadTranslations() {\n    if (!this.hasCachedTranslations) {\n      await this.reloadTranslations()\n    }\n  }\n\n  /**\n   * Reload translations from the registered loaders\n   */\n  async reloadTranslations() {\n    debug('loading translations')\n\n    const translationsStack = await Promise.all(\n      this.config.loaders.map((loaderFactory) => {\n        return loaderFactory(this.config).load()\n      })\n    )\n\n    /**\n     * Set flag to true\n     */\n    this.#hasCachedTranslations = true\n\n    /**\n     * Empty the existing translations object\n     */\n    this.#translations = {}\n\n    /**\n     * Compute inferred locales\n     *\n     * The inferred locales is the combination of\n     *\n     * - Default locale\n     * - Fallback locales keys\n     * - Locales detected from translations\n     */\n    this.#inferredLocales = [this.defaultLocale].concat(\n      this.config.fallbackLocales ? Object.keys(this.config.fallbackLocales) : []\n    )\n\n    /**\n     * Shallow merge translations from all the loaders\n     */\n    translationsStack.forEach((translations) => {\n      Object.keys(translations).forEach((lang) => {\n        /**\n         * Collect inferred locales when not defined explicitly\n         */\n        if (!this.#inferredLocales.includes(lang)) {\n          this.#inferredLocales.push(lang)\n        }\n\n        /**\n         * Initialize language with an empty object\n         */\n        this.#translations[lang] = this.#translations[lang] || {}\n        Object.assign(this.#translations[lang], translations[lang])\n      })\n    })\n  }\n\n  /**\n   * Returns the most appropriate supported locale based upon the user\n   * languages\n   */\n  getSupportedLocaleFor(userLanguage: string | string[]): string | null {\n    /**\n     * The \"accept\" package internally reads the \"headers['accept-language']\"\n     * and therefore we do not need a full blown request object.\n     *\n     * The behavior is verified using tests\n     */\n    return (\n      new Negotiator({\n        headers: {\n          'accept-language': Array.isArray(userLanguage) ? userLanguage.join(',') : userLanguage,\n        },\n      }).language(this.supportedLocales()) || null\n    )\n  }\n\n  /**\n   * Returns the fallback locale for a given locale. Returns the default\n   * locale when no fallback is defined\n   */\n  getFallbackLocaleFor(locale: string): string {\n    /**\n     * Use explicitly defined fallback locale\n     */\n    if (this.config.fallbackLocales && this.config.fallbackLocales[locale]) {\n      return this.config.fallbackLocales[locale]\n    }\n\n    /**\n     * Find closest matching locale in the supported list\n     */\n    const closestMatchingLanguages = new Negotiator({\n      headers: {\n        'accept-language': locale,\n      },\n    }).languages(this.supportedLocales())\n\n    /**\n     * Loop over the list and return the first best match except\n     * the input locale\n     */\n    for (let matchingLocale of closestMatchingLanguages) {\n      if (matchingLocale !== locale) {\n        return matchingLocale\n      }\n    }\n\n    /**\n     * Return default locale when there is no best match\n     */\n    return this.defaultLocale\n  }\n\n  /**\n   * Returns an instance of I18n for a given locale\n   */\n  locale(locale: string) {\n    return new I18n(locale, this.#emitter, this)\n  }\n\n  /**\n   * Returns the fallback message for an identifier and locale\n   * when the \"config.fallback\" property is defined.\n   *\n   * Otherwise returns undefined\n   */\n  getFallbackMessage(identifier: string, locale: string): string | undefined {\n    return this.config.fallback?.(identifier, locale)\n  }\n}\n"],"mappings":"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","names":[]}