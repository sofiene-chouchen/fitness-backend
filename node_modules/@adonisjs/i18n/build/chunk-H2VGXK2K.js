// src/messages_formatters/icu.ts
import formatters from "@poppinss/intl-formatter";
import { IntlMessageFormat } from "intl-messageformat";
var MessageValuesFormatters = {
  getNumberFormat: formatters.number,
  getDateTimeFormat: formatters.date,
  getPluralRules: formatters.plural
};
var IcuFormatter = class _IcuFormatter {
  /**
   * Custom named formats defined for supported types.
   */
  static customFormats = {};
  /**
   * Formatter syntax name
   */
  name = "icu";
  static addFormatFor(type, key, options) {
    switch (type) {
      case "number":
        this.customFormats.number = this.customFormats.number || {};
        this.customFormats.number[key] = options;
        break;
      case "date":
        this.customFormats.date = this.customFormats.date || {};
        this.customFormats.date[key] = options;
        break;
      case "time":
        this.customFormats.time = this.customFormats.time || {};
        this.customFormats.time[key] = options;
        break;
    }
  }
  /**
   * Formats an ICU message string
   */
  format(message, locale, data) {
    return new IntlMessageFormat(message, locale, _IcuFormatter.customFormats, {
      /**
       * Disabling type-checking here since https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat accepts "exceptZero" as the
       * "signSymbol" but TypeScript bundled definition doesn't have it
       */
      formatters: MessageValuesFormatters,
      ignoreTag: true
    }).format(data || {});
  }
};

export {
  IcuFormatter
};
//# sourceMappingURL=chunk-H2VGXK2K.js.map