{"version":3,"sources":["../src/messages_formatters/icu.ts"],"sourcesContent":["/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport formatters from '@poppinss/intl-formatter'\nimport { Formats, IntlMessageFormat } from 'intl-messageformat'\nimport type {\n  TimeFormatOptions,\n  NumberFormatOptions,\n  TranslationsFormatterContract,\n} from '../types.js'\n\n/**\n * Formatters for ICU message. We need the memoized\n * version for performance\n */\nconst MessageValuesFormatters = {\n  getNumberFormat: formatters.number,\n  getDateTimeFormat: formatters.date,\n  getPluralRules: formatters.plural,\n}\n\n/**\n * ICU formatter formats a translation as per the ICU messages\n * syntax.\n */\nexport class IcuFormatter implements TranslationsFormatterContract {\n  /**\n   * Custom named formats defined for supported types.\n   */\n  static customFormats: Partial<Formats> = {}\n\n  /**\n   * Formatter syntax name\n   */\n  readonly name: string = 'icu'\n\n  /**\n   * Define a custom format for message\n   */\n  static addFormatFor(type: 'number', key: string, options: NumberFormatOptions): void\n  static addFormatFor(type: 'date', key: string, options: Intl.DateTimeFormatOptions): void\n  static addFormatFor(type: 'time', key: string, options: TimeFormatOptions): void\n  static addFormatFor(\n    type: 'number' | 'date' | 'time',\n    key: string,\n    options: NumberFormatOptions | Intl.DateTimeFormatOptions | TimeFormatOptions\n  ): void {\n    switch (type) {\n      case 'number':\n        this.customFormats.number = this.customFormats.number || {}\n        this.customFormats.number[key] = options\n        break\n      case 'date':\n        this.customFormats.date = this.customFormats.date || {}\n        this.customFormats.date[key] = options\n        break\n      case 'time':\n        this.customFormats.time = this.customFormats.time || {}\n        this.customFormats.time[key] = options\n        break\n    }\n  }\n\n  /**\n   * Formats an ICU message string\n   */\n  format(message: string, locale: string, data?: Record<string, any>): string {\n    return new IntlMessageFormat(message, locale, IcuFormatter.customFormats, {\n      /**\n       * Disabling type-checking here since https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat accepts \"exceptZero\" as the\n       * \"signSymbol\" but TypeScript bundled definition doesn't have it\n       */\n      formatters: MessageValuesFormatters as any,\n      ignoreTag: true,\n    }).format(data || {})\n  }\n}\n"],"mappings":";AASA,OAAO,gBAAgB;AACvB,SAAkB,yBAAyB;AAW3C,IAAM,0BAA0B;AAAA,EAC9B,iBAAiB,WAAW;AAAA,EAC5B,mBAAmB,WAAW;AAAA,EAC9B,gBAAgB,WAAW;AAC7B;AAMO,IAAM,eAAN,MAAM,cAAsD;AAAA;AAAA;AAAA;AAAA,EAIjE,OAAO,gBAAkC,CAAC;AAAA;AAAA;AAAA;AAAA,EAKjC,OAAe;AAAA,EAQxB,OAAO,aACL,MACA,KACA,SACM;AACN,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,aAAK,cAAc,SAAS,KAAK,cAAc,UAAU,CAAC;AAC1D,aAAK,cAAc,OAAO,GAAG,IAAI;AACjC;AAAA,MACF,KAAK;AACH,aAAK,cAAc,OAAO,KAAK,cAAc,QAAQ,CAAC;AACtD,aAAK,cAAc,KAAK,GAAG,IAAI;AAC/B;AAAA,MACF,KAAK;AACH,aAAK,cAAc,OAAO,KAAK,cAAc,QAAQ,CAAC;AACtD,aAAK,cAAc,KAAK,GAAG,IAAI;AAC/B;AAAA,IACJ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,SAAiB,QAAgB,MAAoC;AAC1E,WAAO,IAAI,kBAAkB,SAAS,QAAQ,cAAa,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKxE,YAAY;AAAA,MACZ,WAAW;AAAA,IACb,CAAC,EAAE,OAAO,QAAQ,CAAC,CAAC;AAAA,EACtB;AACF;","names":[]}