{"version":3,"sources":["../src/loaders/fs.ts"],"sourcesContent":["/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport yaml from 'yaml'\nimport { fileURLToPath } from 'node:url'\nimport { join, extname } from 'node:path'\nimport { readFile } from 'node:fs/promises'\nimport { flatten, fsReadAll } from '@poppinss/utils'\n\nimport debug from '../debug.js'\nimport type { FsLoaderOptions, Translations, TranslationsLoaderContract } from '../types.js'\n\n/**\n * Uses the filesystem to load messages from the JSON\n * files\n */\nexport class FsLoader implements TranslationsLoaderContract {\n  /**\n   * Base path for translation files\n   */\n  #storageBasePath: string\n\n  constructor(config: FsLoaderOptions) {\n    this.#storageBasePath =\n      config.location instanceof URL ? fileURLToPath(config.location) : config.location\n  }\n\n  /**\n   * File types supported by the FsLoader\n   */\n  #supportedFileTypes = ['.json', '.yaml', '.yml']\n\n  /**\n   * Processes the messages for a given file and writes them to the\n   * messages bag.\n   *\n   * @note: The messagesBag property is mutated internally\n   */\n  #processFileTranslations(\n    filePath: string,\n    messages: Record<string, string>,\n    messagesBag: Record<string, any>\n  ) {\n    const [lang, ...nestedPath] = filePath\n      .replace(new RegExp(`${extname(filePath)}$`), '')\n      .split(/\\/|\\\\/g)\n\n    /**\n     * Initialize/use the language node\n     */\n    messagesBag[lang] = messagesBag[lang] || {}\n\n    /**\n     * If the file path is not nested, then consider the file\n     * messages to belong directly to the language\n     */\n    if (!nestedPath.length) {\n      messagesBag[lang] = messages\n      return\n    }\n\n    /**\n     * Otherwise create a sub node for messages.\n     */\n    messagesBag[lang][nestedPath.join('.')] = messages\n  }\n\n  /**\n   * Wraps JSON.parse to raise exception with the file path when\n   * unable to parse JSON\n   */\n  #parseJSON(filePath: string, contents: string): Record<string, any> {\n    try {\n      return JSON.parse(contents)\n    } catch (error) {\n      const stack = error.stack!.split('\\n')\n\n      /**\n       * Patching the stack to include the JSON file path\n       */\n      stack.splice(1, 0, `    at anonymous (${filePath})`)\n\n      error.stack = stack.join('\\n')\n      throw error\n    }\n  }\n\n  /**\n   * Processes the message inside a JSON file\n   */\n  async #processJSONFile(filePath: string, messagesBag: Record<string, any>) {\n    debug('loading translations from \"%s\"', filePath)\n\n    const contents = await readFile(join(this.#storageBasePath, filePath), 'utf-8')\n    const messages = this.#parseJSON(filePath, contents)\n    this.#processFileTranslations(filePath, messages, messagesBag)\n  }\n\n  /**\n   * Wraps JSON.parse to raise exception with the file path when\n   * unable to parse JSON\n   */\n  #parseYaml(filePath: string, contents: string): Record<string, any> {\n    try {\n      return yaml.parse(contents)\n    } catch (error) {\n      const offset = error.source?.range?.start\n      const stack = error.stack!.split('\\n')\n\n      if (offset) {\n        stack[0] = `${stack[0]} (at offset ${offset})`\n      }\n\n      /**\n       * Patching the stack to include the JSON file path\n       */\n      stack.splice(1, 0, `    at anonymous (${filePath})`)\n\n      error.stack = stack.join('\\n')\n      throw error\n    }\n  }\n\n  /**\n   * Processes the message inside a YAML file\n   */\n  async #processYamlFile(filePath: string, messagesBag: Record<string, any>) {\n    debug('loading translations from \"%s\"', filePath)\n\n    const contents = await readFile(join(this.#storageBasePath, filePath), 'utf-8')\n    const messages = this.#parseYaml(filePath, contents)\n    this.#processFileTranslations(filePath, messages, messagesBag)\n  }\n\n  /**\n   * Returns an array of file paths for translation files.\n   */\n  #getTranslationFiles() {\n    return fsReadAll(this.#storageBasePath, {\n      filter: (file) => !!this.#supportedFileTypes.find((ext) => file.endsWith(ext)),\n      ignoreMissingRoot: true,\n    })\n  }\n\n  /**\n   * Loads messages from the lang directory\n   */\n  async load() {\n    const messagesBag: Translations = {}\n    const translationFiles = await this.#getTranslationFiles()\n\n    await Promise.all(\n      translationFiles.map((file) => {\n        if (file.endsWith('.json')) {\n          return this.#processJSONFile(file, messagesBag)\n        } else {\n          return this.#processYamlFile(file, messagesBag)\n        }\n      })\n    )\n\n    return Object.keys(messagesBag).reduce<Translations>((result, lang) => {\n      result[lang] = flatten(messagesBag[lang])\n      return result\n    }, {})\n  }\n}\n"],"mappings":"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","names":[]}