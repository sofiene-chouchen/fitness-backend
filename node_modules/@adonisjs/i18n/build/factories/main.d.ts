import { Emitter } from '@adonisjs/core/events';
import type { NextFn } from '@adonisjs/core/types/http';
import { EventsList } from '@adonisjs/core/types';
import { type HttpContext } from '@adonisjs/core/http';
import { I18n } from '../src/i18n.js';
import { I18nManagerConfig } from '../src/types.js';
import { I18nManager } from '../src/i18n_manager.js';
/**
 * Notify TypeScript about i18n property
 */
declare module '@adonisjs/core/http' {
    interface HttpContext {
        i18n: I18n;
    }
}
/**
 * The "{{ middlewareName }}" middleware uses i18n service to share
 * a request specific i18n object with the HTTP Context
 */
export default class DetectUserLocaleMiddleware {
    i18nManager: I18nManager;
    constructor(i18nManager: I18nManager);
    /**
     * This method reads the user language from the "Accept-Language"
     * header and returns the best matching locale by checking it
     * against the supported locales.
     *
     * Feel free to use different mechanism for finding user language.
     */
    protected getRequestLocale(ctx: HttpContext): string | null;
    handle(ctx: HttpContext, next: NextFn): Promise<any>;
}
/**
 * Exposes the API to create an instance of detect user locale
 * middleware and the i18nManager
 */
export declare class I18nManagerFactory {
    #private;
    /**
     * Merge custom options
     */
    merge(options: {
        config?: Partial<I18nManagerConfig>;
        emitter?: Emitter<EventsList>;
    }): this;
    /**
     * Creates an instance of the i18nManager class
     */
    create(): I18nManager;
    /**
     * Creates an instance of the DetectUserLocale
     * middleware
     */
    createMiddleware(): DetectUserLocaleMiddleware;
}
