import {
  I18n,
  I18nManager
} from "../chunk-ALNS7L4X.js";
import {
  IcuFormatter
} from "../chunk-H2VGXK2K.js";
import {
  FsLoader
} from "../chunk-ZFRZECEP.js";
import "../chunk-AQOK7X5X.js";

// factories/main.ts
import { Emitter } from "@adonisjs/core/events";
import { AppFactory } from "@adonisjs/core/factories/app";
import { RequestValidator } from "@adonisjs/core/http";
var DetectUserLocaleMiddleware = class {
  constructor(i18nManager) {
    this.i18nManager = i18nManager;
  }
  static {
    RequestValidator.messagesProvider = (ctx) => {
      return ctx.i18n.createMessagesProvider();
    };
  }
  /**
   * This method reads the user language from the "Accept-Language"
   * header and returns the best matching locale by checking it
   * against the supported locales.
   *
   * Feel free to use different mechanism for finding user language.
   */
  getRequestLocale(ctx) {
    const userLanguages = ctx.request.languages();
    return this.i18nManager.getSupportedLocaleFor(userLanguages);
  }
  async handle(ctx, next) {
    const language = this.getRequestLocale(ctx);
    ctx.i18n = this.i18nManager.locale(language || this.i18nManager.defaultLocale);
    ctx.containerResolver.bindValue(I18n, ctx.i18n);
    if ("view" in ctx) {
      ctx.view.share({ i18n: ctx.i18n });
    }
    return next();
  }
};
var I18nManagerFactory = class {
  #config = {
    defaultLocale: "en",
    formatter: () => new IcuFormatter(),
    loaders: [
      () => new FsLoader({
        location: "./resources/lang"
      })
    ]
  };
  /**
   * The emitter instance to use for emitting
   * events
   */
  #emitter;
  /**
   * Returns an instance of app for testing
   */
  #getApp() {
    return new AppFactory().create(new URL("./", import.meta.url), () => {
    });
  }
  /**
   * Returns an instance of default or user defined emitter
   */
  #getEmitter() {
    return this.#emitter || new Emitter(this.#getApp());
  }
  /**
   * Merge custom options
   */
  merge(options) {
    if (options.config) {
      Object.assign(this.#config, options.config);
    }
    if (options.emitter) {
      this.#emitter = options.emitter;
    }
    return this;
  }
  /**
   * Creates an instance of the i18nManager class
   */
  create() {
    return new I18nManager(this.#getEmitter(), this.#config);
  }
  /**
   * Creates an instance of the DetectUserLocale
   * middleware
   */
  createMiddleware() {
    return new DetectUserLocaleMiddleware(this.create());
  }
};
export {
  I18nManagerFactory,
  DetectUserLocaleMiddleware as default
};
//# sourceMappingURL=main.js.map