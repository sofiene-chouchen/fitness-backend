{"version":3,"sources":["../../factories/main.ts"],"sourcesContent":["/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Emitter } from '@adonisjs/core/events'\nimport type { NextFn } from '@adonisjs/core/types/http'\nimport { AppFactory } from '@adonisjs/core/factories/app'\nimport { ApplicationService, EventsList } from '@adonisjs/core/types'\nimport { type HttpContext, RequestValidator } from '@adonisjs/core/http'\n\nimport { I18n } from '../src/i18n.js'\nimport { FsLoader } from '../src/loaders/fs.js'\nimport { I18nManagerConfig } from '../src/types.js'\nimport { I18nManager } from '../src/i18n_manager.js'\nimport { IcuFormatter } from '../src/messages_formatters/icu.js'\n\n/**\n * Notify TypeScript about i18n property\n */\ndeclare module '@adonisjs/core/http' {\n  export interface HttpContext {\n    i18n: I18n\n  }\n}\n\n/**\n * The \"{{ middlewareName }}\" middleware uses i18n service to share\n * a request specific i18n object with the HTTP Context\n */\nexport default class DetectUserLocaleMiddleware {\n  /**\n   * Using i18n for validation messages. Applicable to only\n   * \"request.validateUsing\" method calls\n   */\n  static {\n    RequestValidator.messagesProvider = (ctx) => {\n      return ctx.i18n.createMessagesProvider()\n    }\n  }\n\n  constructor(public i18nManager: I18nManager) {}\n\n  /**\n   * This method reads the user language from the \"Accept-Language\"\n   * header and returns the best matching locale by checking it\n   * against the supported locales.\n   *\n   * Feel free to use different mechanism for finding user language.\n   */\n  protected getRequestLocale(ctx: HttpContext) {\n    const userLanguages = ctx.request.languages()\n    return this.i18nManager.getSupportedLocaleFor(userLanguages)\n  }\n\n  async handle(ctx: HttpContext, next: NextFn) {\n    /**\n     * Finding user language\n     */\n    const language = this.getRequestLocale(ctx)\n\n    /**\n     * Assigning i18n property to the HTTP context\n     */\n    ctx.i18n = this.i18nManager.locale(language || this.i18nManager.defaultLocale)\n\n    /**\n     * Binding I18n class to the request specific instance of it.\n     * Doing so will allow IoC container to resolve an instance\n     * of request specific i18n object when I18n class is\n     * injected somewhere.\n     */\n    ctx.containerResolver.bindValue(I18n, ctx.i18n)\n\n    /**\n     * Sharing request specific instance of i18n with edge\n     * templates.\n     *\n     * Remove the following block of code, if you are not using\n     * edge templates.\n     */\n    if ('view' in ctx) {\n      ctx.view.share({ i18n: ctx.i18n })\n    }\n\n    return next()\n  }\n}\n\n/**\n * Exposes the API to create an instance of detect user locale\n * middleware and the i18nManager\n */\nexport class I18nManagerFactory {\n  #config: I18nManagerConfig = {\n    defaultLocale: 'en',\n    formatter: () => new IcuFormatter(),\n    loaders: [\n      () =>\n        new FsLoader({\n          location: './resources/lang',\n        }),\n    ],\n  }\n\n  /**\n   * The emitter instance to use for emitting\n   * events\n   */\n  #emitter?: Emitter<EventsList>\n\n  /**\n   * Returns an instance of app for testing\n   */\n  #getApp() {\n    return new AppFactory().create(new URL('./', import.meta.url), () => {}) as ApplicationService\n  }\n\n  /**\n   * Returns an instance of default or user defined emitter\n   */\n  #getEmitter() {\n    return this.#emitter || new Emitter<EventsList>(this.#getApp())\n  }\n\n  /**\n   * Merge custom options\n   */\n  merge(options: { config?: Partial<I18nManagerConfig>; emitter?: Emitter<EventsList> }) {\n    if (options.config) {\n      Object.assign(this.#config, options.config)\n    }\n\n    if (options.emitter) {\n      this.#emitter = options.emitter\n    }\n\n    return this\n  }\n\n  /**\n   * Creates an instance of the i18nManager class\n   */\n  create() {\n    return new I18nManager(this.#getEmitter(), this.#config)\n  }\n\n  /**\n   * Creates an instance of the DetectUserLocale\n   * middleware\n   */\n  createMiddleware() {\n    return new DetectUserLocaleMiddleware(this.create())\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AASA,SAAS,eAAe;AAExB,SAAS,kBAAkB;AAE3B,SAA2B,wBAAwB;AAqBnD,IAAqB,6BAArB,MAAgD;AAAA,EAW9C,YAAmB,aAA0B;AAA1B;AAAA,EAA2B;AAAA,EAN9C,OAAO;AACL,qBAAiB,mBAAmB,CAAC,QAAQ;AAC3C,aAAO,IAAI,KAAK,uBAAuB;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWU,iBAAiB,KAAkB;AAC3C,UAAM,gBAAgB,IAAI,QAAQ,UAAU;AAC5C,WAAO,KAAK,YAAY,sBAAsB,aAAa;AAAA,EAC7D;AAAA,EAEA,MAAM,OAAO,KAAkB,MAAc;AAI3C,UAAM,WAAW,KAAK,iBAAiB,GAAG;AAK1C,QAAI,OAAO,KAAK,YAAY,OAAO,YAAY,KAAK,YAAY,aAAa;AAQ7E,QAAI,kBAAkB,UAAU,MAAM,IAAI,IAAI;AAS9C,QAAI,UAAU,KAAK;AACjB,UAAI,KAAK,MAAM,EAAE,MAAM,IAAI,KAAK,CAAC;AAAA,IACnC;AAEA,WAAO,KAAK;AAAA,EACd;AACF;AAMO,IAAM,qBAAN,MAAyB;AAAA,EAC9B,UAA6B;AAAA,IAC3B,eAAe;AAAA,IACf,WAAW,MAAM,IAAI,aAAa;AAAA,IAClC,SAAS;AAAA,MACP,MACE,IAAI,SAAS;AAAA,QACX,UAAU;AAAA,MACZ,CAAC;AAAA,IACL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,WAAO,IAAI,WAAW,EAAE,OAAO,IAAI,IAAI,MAAM,YAAY,GAAG,GAAG,MAAM;AAAA,IAAC,CAAC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACZ,WAAO,KAAK,YAAY,IAAI,QAAoB,KAAK,QAAQ,CAAC;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAiF;AACrF,QAAI,QAAQ,QAAQ;AAClB,aAAO,OAAO,KAAK,SAAS,QAAQ,MAAM;AAAA,IAC5C;AAEA,QAAI,QAAQ,SAAS;AACnB,WAAK,WAAW,QAAQ;AAAA,IAC1B;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,WAAO,IAAI,YAAY,KAAK,YAAY,GAAG,KAAK,OAAO;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB;AACjB,WAAO,IAAI,2BAA2B,KAAK,OAAO,CAAC;AAAA,EACrD;AACF;","names":[]}