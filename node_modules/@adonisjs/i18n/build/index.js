import {
  I18n,
  I18nManager
} from "./chunk-ALNS7L4X.js";
import "./chunk-AQOK7X5X.js";

// stubs/main.ts
import { getDirname } from "@poppinss/utils";
var stubsRoot = getDirname(import.meta.url);

// configure.ts
async function configure(command) {
  const codemods = await command.createCodemods();
  await codemods.makeUsingStub(stubsRoot, "config/i18n.stub", {});
  await codemods.makeUsingStub(stubsRoot, "make/middleware/detect_user_locale.stub", {
    entity: command.app.generators.createEntity("detect_user_locale")
  });
  await codemods.registerMiddleware("router", [
    {
      path: "#middleware/detect_user_locale_middleware"
    }
  ]);
  await codemods.updateRcFile((rcFile) => {
    rcFile.addProvider("@adonisjs/i18n/i18n_provider");
    rcFile.addMetaFile("resources/lang/**/*.{json,yaml,yml}", false);
  });
}

// src/define_config.ts
import { configProvider } from "@adonisjs/core";
import { RuntimeException } from "@poppinss/utils";
function defineConfig(config) {
  if (!config.formatter) {
    throw new RuntimeException('Cannot configure i18n manager. Missing property "formatter"');
  }
  const { formatter, loaders: loaders2, ...rest } = config;
  return configProvider.create(async (app) => {
    const resolvedFormatter = typeof formatter === "function" ? formatter : await formatter.resolver(app);
    const resolvedLoaders = await Promise.all(
      loaders2.map((loader) => {
        return typeof loader === "function" ? loader : loader.resolver(app);
      })
    );
    return {
      defaultLocale: "en",
      formatter: resolvedFormatter,
      loaders: resolvedLoaders,
      ...rest
    };
  });
}
var formatters = {
  icu() {
    return configProvider.create(async () => {
      const { IcuFormatter } = await import("./icu-CNW64LBD.js");
      return () => new IcuFormatter();
    });
  }
};
var loaders = {
  fs(config) {
    return configProvider.create(async () => {
      const { FsLoader } = await import("./fs-V44SHZLJ.js");
      return () => new FsLoader(config);
    });
  }
};
export {
  I18n,
  I18nManager,
  configure,
  defineConfig,
  formatters,
  loaders,
  stubsRoot
};
//# sourceMappingURL=index.js.map