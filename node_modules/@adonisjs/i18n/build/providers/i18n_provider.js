import {
  I18nManager
} from "../chunk-ALNS7L4X.js";
import "../chunk-AQOK7X5X.js";

// providers/i18n_provider.ts
import { configProvider } from "@adonisjs/core";
import { RuntimeException } from "@poppinss/utils";
var I18nProvider = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * Registers edge plugin when edge is installed
   */
  async registerEdgePlugin(i18nManager) {
    if (this.app.usingEdgeJS) {
      const edge = await import("edge.js");
      const { edgePluginI18n } = await import("../src/plugins/edge.js");
      edge.default.use(edgePluginI18n(i18nManager));
    }
  }
  /**
   * Registers repl bindings
   */
  async registerReplBindings() {
    if (this.app.getEnvironment() === "repl") {
      const { registerReplBindings } = await import("../repl_bindings-7HNEPW7N.js");
      registerReplBindings(this.app, await this.app.container.make("repl"));
    }
  }
  /**
   * Register i18n manager to the container
   */
  register() {
    this.app.container.singleton("i18n", async (resolver) => {
      const i18nConfigProvider = this.app.config.get("i18n");
      const config = await configProvider.resolve(this.app, i18nConfigProvider);
      if (!config) {
        throw new RuntimeException(
          'Invalid default export from "config/i18n.ts" file. Make sure to use defineConfig method'
        );
      }
      const emitter = await resolver.make("emitter");
      return new I18nManager(emitter, config);
    });
  }
  /**
   * Load translations, register edge helpers and
   * define repl bindings
   */
  async boot() {
    const i18nManager = await this.app.container.make("i18n");
    await i18nManager.loadTranslations();
    await this.registerEdgePlugin(i18nManager);
    await this.registerReplBindings();
  }
};
export {
  I18nProvider as default
};
//# sourceMappingURL=i18n_provider.js.map