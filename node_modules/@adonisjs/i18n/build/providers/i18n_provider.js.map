{"version":3,"sources":["../../providers/i18n_provider.ts"],"sourcesContent":["/*\n * @adonisjs/i18n\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { configProvider } from '@adonisjs/core'\nimport { RuntimeException } from '@poppinss/utils'\n\nimport { I18nManager } from '../src/i18n_manager.js'\nimport type { ApplicationService } from '@adonisjs/core/types'\nimport type { MissingTranslationEventPayload } from '../src/types.js'\n\ndeclare module '@adonisjs/core/types' {\n  export interface EventsList {\n    'i18n:missing:translation': MissingTranslationEventPayload\n  }\n  export interface ContainerBindings {\n    i18n: I18nManager\n  }\n}\n\n/**\n * Registers a singleton instance of I18nManager to the container,\n * register edge helpers and repl bindings\n */\nexport default class I18nProvider {\n  constructor(protected app: ApplicationService) {}\n\n  /**\n   * Registers edge plugin when edge is installed\n   */\n  protected async registerEdgePlugin(i18nManager: I18nManager) {\n    if (this.app.usingEdgeJS) {\n      const edge = await import('edge.js')\n      const { edgePluginI18n } = await import('../src/plugins/edge.js')\n      edge.default.use(edgePluginI18n(i18nManager))\n    }\n  }\n\n  /**\n   * Registers repl bindings\n   */\n  protected async registerReplBindings() {\n    if (this.app.getEnvironment() === 'repl') {\n      const { registerReplBindings } = await import('../src/repl_bindings.js')\n      registerReplBindings(this.app, await this.app.container.make('repl'))\n    }\n  }\n\n  /**\n   * Register i18n manager to the container\n   */\n  register() {\n    this.app.container.singleton('i18n', async (resolver) => {\n      const i18nConfigProvider = this.app.config.get('i18n')\n      const config = await configProvider.resolve<any>(this.app, i18nConfigProvider)\n\n      if (!config) {\n        throw new RuntimeException(\n          'Invalid default export from \"config/i18n.ts\" file. Make sure to use defineConfig method'\n        )\n      }\n\n      const emitter = await resolver.make('emitter')\n      return new I18nManager(emitter, config)\n    })\n  }\n\n  /**\n   * Load translations, register edge helpers and\n   * define repl bindings\n   */\n  async boot() {\n    /**\n     * Loading translation on boot. There is no simple way to defer\n     * loading of translations and hence we have to do it at\n     * boot time.\n     */\n    const i18nManager = await this.app.container.make('i18n')\n    await i18nManager.loadTranslations()\n\n    await this.registerEdgePlugin(i18nManager)\n    await this.registerReplBindings()\n  }\n}\n"],"mappings":";;;;;;AASA,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AAmBjC,IAAqB,eAArB,MAAkC;AAAA,EAChC,YAAsB,KAAyB;AAAzB;AAAA,EAA0B;AAAA;AAAA;AAAA;AAAA,EAKhD,MAAgB,mBAAmB,aAA0B;AAC3D,QAAI,KAAK,IAAI,aAAa;AACxB,YAAM,OAAO,MAAM,OAAO,SAAS;AACnC,YAAM,EAAE,eAAe,IAAI,MAAM,OAAO,wBAAwB;AAChE,WAAK,QAAQ,IAAI,eAAe,WAAW,CAAC;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAgB,uBAAuB;AACrC,QAAI,KAAK,IAAI,eAAe,MAAM,QAAQ;AACxC,YAAM,EAAE,qBAAqB,IAAI,MAAM,OAAO,8BAAyB;AACvE,2BAAqB,KAAK,KAAK,MAAM,KAAK,IAAI,UAAU,KAAK,MAAM,CAAC;AAAA,IACtE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,SAAK,IAAI,UAAU,UAAU,QAAQ,OAAO,aAAa;AACvD,YAAM,qBAAqB,KAAK,IAAI,OAAO,IAAI,MAAM;AACrD,YAAM,SAAS,MAAM,eAAe,QAAa,KAAK,KAAK,kBAAkB;AAE7E,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAM,UAAU,MAAM,SAAS,KAAK,SAAS;AAC7C,aAAO,IAAI,YAAY,SAAS,MAAM;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAAO;AAMX,UAAM,cAAc,MAAM,KAAK,IAAI,UAAU,KAAK,MAAM;AACxD,UAAM,YAAY,iBAAiB;AAEnC,UAAM,KAAK,mBAAmB,WAAW;AACzC,UAAM,KAAK,qBAAqB;AAAA,EAClC;AACF;","names":[]}