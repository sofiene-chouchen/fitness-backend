import { DateTime } from 'luxon';
import type { TimeFormatOptions, NumberFormatOptions, CurrencyFormatOptions } from '../types.js';
/**
 * Core formatter to format different values using the I18n API
 */
export declare class Formatter {
    #private;
    /**
     * The local for the formatter
     */
    get locale(): string;
    constructor(locale: string);
    switchLocale(locale: string): void;
    /**
     * Format a numeric value for a given style
     */
    formatNumber(value: string | number | bigint, options?: NumberFormatOptions): string;
    /**
     * Format a numeric value to a currency
     */
    formatCurrency(value: string | number | bigint, options: CurrencyFormatOptions): string;
    /**
     * Format value as a date. The method accepts the following data
     * types.
     *
     * - Date instance
     * - Luxon DateTime instance
     * - Number representing a unix timestamp
     * - String representing an ISO date/time value
     */
    formatDate(value: string | number | Date | DateTime, options?: Intl.DateTimeFormatOptions): string;
    /**
     * Format value as time. The method accepts the following data
     * types.
     *
     * - Date instance
     * - Luxon DateTime instance
     * - Number representing a unix timestamp
     * - String representing an ISO date/time value
     */
    formatTime(value: string | number | Date | DateTime, options?: TimeFormatOptions): string;
    /**
     * Format value as relative diff between the current time
     * and the given value.
     *
     * The following data types are allowed
     *
     * - Date instance
     * - Luxon DateTime instance
     * - Number representing the diff value in provided units. If the "unit" is
     *   auto, the number will be considered as a diff in milliseconds
     * - String representing an ISO date/time value
     */
    formatRelativeTime(value: string | number | Date | DateTime, unit: Intl.RelativeTimeFormatUnit | 'auto', options?: Intl.RelativeTimeFormatOptions): string;
    /**
     * Format the value to its plural counter part
     */
    formatPlural(value: string | number, options?: Intl.PluralRulesOptions): string;
    /**
     * Format an array of strings to a sentence.
     */
    formatList(list: Iterable<string>, options?: Intl.ListFormatOptions): string;
    /**
     * Format region, currency, language codes to their display names
     */
    formatDisplayNames(code: string, options: Intl.DisplayNamesOptions): string | undefined;
}
