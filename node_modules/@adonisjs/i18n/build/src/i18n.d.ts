import type { Emitter } from '@adonisjs/core/events';
import type { I18nManager } from './i18n_manager.js';
import { Formatter } from './formatters/values_formatter.js';
import type { MissingTranslationEventPayload } from './types.js';
import { I18nMessagesProvider } from './vine_i18n_messages_provider.js';
/**
 * I18n exposes the APIs to format values and translate messages
 * for a given locale.
 *
 * Under the hood it uses the I18nManager to load translations data
 */
export declare class I18n extends Formatter {
    #private;
    /**
     * Translations for the selected locale
     */
    localeTranslations: Record<string, string>;
    /**
     * Translations for the fallback locale. The fallback translations
     * are used when the selected locale translations are missing
     */
    fallbackTranslations: Record<string, string>;
    /**
     * The fallback locale for the current instance.
     */
    fallbackLocale: string;
    /**
     * Creates a messages provider for VineJS
     */
    createMessagesProvider(prefix?: string): I18nMessagesProvider;
    constructor(locale: string, emitter: Emitter<{
        'i18n:missing:translation': MissingTranslationEventPayload;
    } & any>, i18nManager: I18nManager);
    /**
     * Returns the message for a given identifier
     */
    resolveIdentifier(identifier: string): {
        message: string;
        isFallback: boolean;
    } | null;
    /**
     * Returns a boolean identifying if the message for a given
     * identifier exists or not
     */
    hasMessage(identifier: string): boolean;
    /**
     * Returns a boolean identifying if a fallback message for a given
     * identifier exists or not
     */
    hasFallbackMessage(identifier: string): boolean;
    /**
     * Switch locale for the current instance
     */
    switchLocale(locale: string): void;
    /**
     * Formats a message using the messages formatter
     */
    formatMessage(identifier: string, data?: Record<string, any>, fallbackMessage?: string): string;
    /**
     * Shorthand method for formatUsage
     * @alias formatUsage
     */
    t(identifier: string, data?: Record<string, any>, fallbackMessage?: string): string;
    /**
     * Formats a message using the messages formatter
     */
    formatRawMessage(message: string, data?: Record<string, any>): string;
}
