import type { Emitter } from '@adonisjs/core/events';
import type { I18nManagerConfig, TranslationsFormatterContract, MissingTranslationEventPayload } from './types.js';
import { I18n } from './i18n.js';
export declare class I18nManager {
    #private;
    /**
     * i18n config
     */
    config: I18nManagerConfig;
    /**
     * Reference to the default locale defined inside the config file
     */
    get defaultLocale(): string;
    /**
     * Check if the translations has been cached or not.
     * Use "reloadTranslations" method re-fetch translations
     */
    get hasCachedTranslations(): boolean;
    constructor(emitter: Emitter<{
        'i18n:missing:translation': MissingTranslationEventPayload;
    } & any>, config: I18nManagerConfig);
    /**
     * Returns an array of locales supported by the application.
     *
     * The method returns locales by inspecting the translations,
     * when no explicit supportLocales are defined inside the
     * config file.
     */
    supportedLocales(): string[];
    /**
     * Returns an object of cached translations. The object is shared
     * by reference and hence mutations will mutate the original
     * copy
     */
    getTranslations(): {
        [lang: string]: Record<string, string>;
    };
    /**
     * Returns an object of translations for a given locale
     */
    getTranslationsFor(locale: string): Record<string, string>;
    /**
     * Returns an instance of the translations formatter for the
     * active formatter
     */
    getFormatter(): TranslationsFormatterContract;
    /**
     * Load translations using all the configured loaders.
     *
     * The loaded translations are cached forever and you must use
     * "reloadTranslations" method to reload them.
     */
    loadTranslations(): Promise<void>;
    /**
     * Reload translations from the registered loaders
     */
    reloadTranslations(): Promise<void>;
    /**
     * Returns the most appropriate supported locale based upon the user
     * languages
     */
    getSupportedLocaleFor(userLanguage: string | string[]): string | null;
    /**
     * Returns the fallback locale for a given locale. Returns the default
     * locale when no fallback is defined
     */
    getFallbackLocaleFor(locale: string): string;
    /**
     * Returns an instance of I18n for a given locale
     */
    locale(locale: string): I18n;
    /**
     * Returns the fallback message for an identifier and locale
     * when the "config.fallback" property is defined.
     *
     * Otherwise returns undefined
     */
    getFallbackMessage(identifier: string, locale: string): string | undefined;
}
