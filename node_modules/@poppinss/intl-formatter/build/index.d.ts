import moize from 'moize';

declare const number: moize.Moized<(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined) => Intl.NumberFormat, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined) => Intl.NumberFormat>;
    onCacheChange: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined) => Intl.NumberFormat>;
    onCacheHit: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined) => Intl.NumberFormat>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<moize.Moizeable>;
    onCacheChange: moize.OnCacheOperation<moize.Moizeable>;
    onCacheHit: moize.OnCacheOperation<moize.Moizeable>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    isDeepEqual: true;
}>;
declare const date: moize.Moized<(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined) => Intl.DateTimeFormat, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined) => Intl.DateTimeFormat>;
    onCacheChange: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined) => Intl.DateTimeFormat>;
    onCacheHit: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined) => Intl.DateTimeFormat>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<moize.Moizeable>;
    onCacheChange: moize.OnCacheOperation<moize.Moizeable>;
    onCacheHit: moize.OnCacheOperation<moize.Moizeable>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    isDeepEqual: true;
}>;
declare const plural: moize.Moized<(locales?: Intl.LocalesArgument, options?: Intl.PluralRulesOptions | undefined) => Intl.PluralRules, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.PluralRulesOptions | undefined) => Intl.PluralRules>;
    onCacheChange: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.PluralRulesOptions | undefined) => Intl.PluralRules>;
    onCacheHit: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.PluralRulesOptions | undefined) => Intl.PluralRules>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<moize.Moizeable>;
    onCacheChange: moize.OnCacheOperation<moize.Moizeable>;
    onCacheHit: moize.OnCacheOperation<moize.Moizeable>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    isDeepEqual: true;
}>;
declare const relative: moize.Moized<(locales?: Intl.LocalesArgument, options?: Intl.RelativeTimeFormatOptions | undefined) => Intl.RelativeTimeFormat, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.RelativeTimeFormatOptions | undefined) => Intl.RelativeTimeFormat>;
    onCacheChange: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.RelativeTimeFormatOptions | undefined) => Intl.RelativeTimeFormat>;
    onCacheHit: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.RelativeTimeFormatOptions | undefined) => Intl.RelativeTimeFormat>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<moize.Moizeable>;
    onCacheChange: moize.OnCacheOperation<moize.Moizeable>;
    onCacheHit: moize.OnCacheOperation<moize.Moizeable>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    isDeepEqual: true;
}>;
declare const list: moize.Moized<(locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions | undefined) => Intl.ListFormat, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions | undefined) => Intl.ListFormat>;
    onCacheChange: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions | undefined) => Intl.ListFormat>;
    onCacheHit: moize.OnCacheOperation<(locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions | undefined) => Intl.ListFormat>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<moize.Moizeable>;
    onCacheChange: moize.OnCacheOperation<moize.Moizeable>;
    onCacheHit: moize.OnCacheOperation<moize.Moizeable>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    isDeepEqual: true;
}>;
declare const displayNames: moize.Moized<(locales: Intl.LocalesArgument, options: Intl.DisplayNamesOptions) => Intl.DisplayNames, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<(locales: Intl.LocalesArgument, options: Intl.DisplayNamesOptions) => Intl.DisplayNames>;
    onCacheChange: moize.OnCacheOperation<(locales: Intl.LocalesArgument, options: Intl.DisplayNamesOptions) => Intl.DisplayNames>;
    onCacheHit: moize.OnCacheOperation<(locales: Intl.LocalesArgument, options: Intl.DisplayNamesOptions) => Intl.DisplayNames>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: moize.IsEqual;
    matchesKey: moize.IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: moize.OnCacheOperation<moize.Moizeable>;
    onCacheChange: moize.OnCacheOperation<moize.Moizeable>;
    onCacheHit: moize.OnCacheOperation<moize.Moizeable>;
    onExpire: moize.OnExpire;
    profileName: string;
    serializer: moize.Serialize;
    transformArgs: moize.TransformKey;
    updateCacheForKey: moize.UpdateCacheForKey;
    updateExpire: boolean;
}> & {
    isDeepEqual: true;
}>;

declare const formatters_date: typeof date;
declare const formatters_displayNames: typeof displayNames;
declare const formatters_list: typeof list;
declare const formatters_number: typeof number;
declare const formatters_plural: typeof plural;
declare const formatters_relative: typeof relative;
declare namespace formatters {
  export { formatters_date as date, formatters_displayNames as displayNames, formatters_list as list, formatters_number as number, formatters_plural as plural, formatters_relative as relative };
}

export { formatters as default };
