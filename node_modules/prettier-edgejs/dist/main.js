var aa = Object.defineProperty;
var ca = (t, e, r) => e in t ? aa(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r;
var Ge = (t, e, r) => ca(t, typeof e != "symbol" ? e + "" : e, r);
import ua from "uglify-js";
var As = (t) => {
  throw TypeError(t);
}, Ss = (t, e, r) => e.has(t) || As("Cannot " + r), la = (t, e, r) => (Ss(t, e, "read from private field"), r ? r.call(t) : e.get(t)), ei = (t, e, r) => e.has(t) ? As("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, r), ti = (t, e, r) => (Ss(t, e, "access private method"), r), Rs = typeof global == "object" && global && global.Object === Object && global, ha = typeof self == "object" && self && self.Object === Object && self, Pe = Rs || ha || Function("return this")(), _e = Pe.Symbol, Os = Object.prototype, fa = Os.hasOwnProperty, pa = Os.toString, Et = _e ? _e.toStringTag : void 0;
function da(t) {
  var e = fa.call(t, Et), r = t[Et];
  try {
    t[Et] = void 0;
    var n = !0;
  } catch {
  }
  var i = pa.call(t);
  return n && (e ? t[Et] = r : delete t[Et]), i;
}
var ma = Object.prototype, ga = ma.toString;
function Ea(t) {
  return ga.call(t);
}
var va = "[object Null]", Ta = "[object Undefined]", ri = _e ? _e.toStringTag : void 0;
function Je(t) {
  return t == null ? t === void 0 ? Ta : va : ri && ri in Object(t) ? da(t) : Ea(t);
}
function Le(t) {
  return t != null && typeof t == "object";
}
var _a = "[object Symbol]";
function gr(t) {
  return typeof t == "symbol" || Le(t) && Je(t) == _a;
}
function Er(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length, i = Array(n); ++r < n; )
    i[r] = e(t[r], r, t);
  return i;
}
var j = Array.isArray, ya = 1 / 0, ni = _e ? _e.prototype : void 0, ii = ni ? ni.toString : void 0;
function Ls(t) {
  if (typeof t == "string")
    return t;
  if (j(t))
    return Er(t, Ls) + "";
  if (gr(t))
    return ii ? ii.call(t) : "";
  var e = t + "";
  return e == "0" && 1 / t == -ya ? "-0" : e;
}
var Aa = /\s/;
function Sa(t) {
  for (var e = t.length; e-- && Aa.test(t.charAt(e)); )
    ;
  return e;
}
var Ra = /^\s+/;
function Oa(t) {
  return t && t.slice(0, Sa(t) + 1).replace(Ra, "");
}
function ye(t) {
  var e = typeof t;
  return t != null && (e == "object" || e == "function");
}
var si = NaN, La = /^[-+]0x[0-9a-f]+$/i, Ia = /^0b[01]+$/i, Ca = /^0o[0-7]+$/i, Ma = parseInt;
function ba(t) {
  if (typeof t == "number")
    return t;
  if (gr(t))
    return si;
  if (ye(t)) {
    var e = typeof t.valueOf == "function" ? t.valueOf() : t;
    t = ye(e) ? e + "" : e;
  }
  if (typeof t != "string")
    return t === 0 ? t : +t;
  t = Oa(t);
  var r = Ia.test(t);
  return r || Ca.test(t) ? Ma(t.slice(2), r ? 2 : 8) : La.test(t) ? si : +t;
}
var oi = 1 / 0, ka = 17976931348623157e292;
function Na(t) {
  if (!t)
    return t === 0 ? t : 0;
  if (t = ba(t), t === oi || t === -oi) {
    var e = t < 0 ? -1 : 1;
    return e * ka;
  }
  return t === t ? t : 0;
}
function vr(t) {
  var e = Na(t), r = e % 1;
  return e === e ? r ? e - r : e : 0;
}
function ht(t) {
  return t;
}
var Pa = "[object AsyncFunction]", wa = "[object Function]", xa = "[object GeneratorFunction]", Ua = "[object Proxy]";
function He(t) {
  if (!ye(t))
    return !1;
  var e = Je(t);
  return e == wa || e == xa || e == Pa || e == Ua;
}
var xr = Pe["__core-js_shared__"], ai = function() {
  var t = /[^.]+$/.exec(xr && xr.keys && xr.keys.IE_PROTO || "");
  return t ? "Symbol(src)_1." + t : "";
}();
function Da(t) {
  return !!ai && ai in t;
}
var Fa = Function.prototype, ja = Fa.toString;
function st(t) {
  if (t != null) {
    try {
      return ja.call(t);
    } catch {
    }
    try {
      return t + "";
    } catch {
    }
  }
  return "";
}
var $a = /[\\^$.*+?()[\]{}|]/g, Ga = /^\[object .+?Constructor\]$/, Ba = Function.prototype, Va = Object.prototype, Wa = Ba.toString, Ka = Va.hasOwnProperty, Ha = RegExp(
  "^" + Wa.call(Ka).replace($a, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function za(t) {
  if (!ye(t) || Da(t))
    return !1;
  var e = He(t) ? Ha : Ga;
  return e.test(st(t));
}
function Ya(t, e) {
  return t == null ? void 0 : t[e];
}
function ot(t, e) {
  var r = Ya(t, e);
  return za(r) ? r : void 0;
}
var rn = ot(Pe, "WeakMap"), ci = Object.create, qa = /* @__PURE__ */ function() {
  function t() {
  }
  return function(e) {
    if (!ye(e))
      return {};
    if (ci)
      return ci(e);
    t.prototype = e;
    var r = new t();
    return t.prototype = void 0, r;
  };
}();
function Xa(t, e, r) {
  switch (r.length) {
    case 0:
      return t.call(e);
    case 1:
      return t.call(e, r[0]);
    case 2:
      return t.call(e, r[0], r[1]);
    case 3:
      return t.call(e, r[0], r[1], r[2]);
  }
  return t.apply(e, r);
}
function J() {
}
function Qa(t, e) {
  var r = -1, n = t.length;
  for (e || (e = Array(n)); ++r < n; )
    e[r] = t[r];
  return e;
}
var Ja = 800, Za = 16, ec = Date.now;
function tc(t) {
  var e = 0, r = 0;
  return function() {
    var n = ec(), i = Za - (n - r);
    if (r = n, i > 0) {
      if (++e >= Ja)
        return arguments[0];
    } else
      e = 0;
    return t.apply(void 0, arguments);
  };
}
function rc(t) {
  return function() {
    return t;
  };
}
var nr = function() {
  try {
    var t = ot(Object, "defineProperty");
    return t({}, "", {}), t;
  } catch {
  }
}(), nc = nr ? function(t, e) {
  return nr(t, "toString", {
    configurable: !0,
    enumerable: !1,
    value: rc(e),
    writable: !0
  });
} : ht, ic = tc(nc);
function Is(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n && e(t[r], r, t) !== !1; )
    ;
  return t;
}
function Cs(t, e, r, n) {
  for (var i = t.length, s = r + -1; ++s < i; )
    if (e(t[s], s, t))
      return s;
  return -1;
}
function sc(t) {
  return t !== t;
}
function oc(t, e, r) {
  for (var n = r - 1, i = t.length; ++n < i; )
    if (t[n] === e)
      return n;
  return -1;
}
function Ln(t, e, r) {
  return e === e ? oc(t, e, r) : Cs(t, sc, r);
}
function Ms(t, e) {
  var r = t == null ? 0 : t.length;
  return !!r && Ln(t, e, 0) > -1;
}
var ac = 9007199254740991, cc = /^(?:0|[1-9]\d*)$/;
function Tr(t, e) {
  var r = typeof t;
  return e = e ?? ac, !!e && (r == "number" || r != "symbol" && cc.test(t)) && t > -1 && t % 1 == 0 && t < e;
}
function In(t, e, r) {
  e == "__proto__" && nr ? nr(t, e, {
    configurable: !0,
    enumerable: !0,
    value: r,
    writable: !0
  }) : t[e] = r;
}
function kt(t, e) {
  return t === e || t !== t && e !== e;
}
var uc = Object.prototype, lc = uc.hasOwnProperty;
function _r(t, e, r) {
  var n = t[e];
  (!(lc.call(t, e) && kt(n, r)) || r === void 0 && !(e in t)) && In(t, e, r);
}
function Cn(t, e, r, n) {
  var i = !r;
  r || (r = {});
  for (var s = -1, o = e.length; ++s < o; ) {
    var c = e[s], a = void 0;
    a === void 0 && (a = t[c]), i ? In(r, c, a) : _r(r, c, a);
  }
  return r;
}
var ui = Math.max;
function hc(t, e, r) {
  return e = ui(e === void 0 ? t.length - 1 : e, 0), function() {
    for (var n = arguments, i = -1, s = ui(n.length - e, 0), o = Array(s); ++i < s; )
      o[i] = n[e + i];
    i = -1;
    for (var c = Array(e + 1); ++i < e; )
      c[i] = n[i];
    return c[e] = r(o), Xa(t, this, c);
  };
}
function Mn(t, e) {
  return ic(hc(t, e, ht), t + "");
}
var fc = 9007199254740991;
function bn(t) {
  return typeof t == "number" && t > -1 && t % 1 == 0 && t <= fc;
}
function we(t) {
  return t != null && bn(t.length) && !He(t);
}
function bs(t, e, r) {
  if (!ye(r))
    return !1;
  var n = typeof e;
  return (n == "number" ? we(r) && Tr(e, r.length) : n == "string" && e in r) ? kt(r[e], t) : !1;
}
function pc(t) {
  return Mn(function(e, r) {
    var n = -1, i = r.length, s = i > 1 ? r[i - 1] : void 0, o = i > 2 ? r[2] : void 0;
    for (s = t.length > 3 && typeof s == "function" ? (i--, s) : void 0, o && bs(r[0], r[1], o) && (s = i < 3 ? void 0 : s, i = 1), e = Object(e); ++n < i; ) {
      var c = r[n];
      c && t(e, c, n, s);
    }
    return e;
  });
}
var dc = Object.prototype;
function Nt(t) {
  var e = t && t.constructor, r = typeof e == "function" && e.prototype || dc;
  return t === r;
}
function mc(t, e) {
  for (var r = -1, n = Array(t); ++r < t; )
    n[r] = e(r);
  return n;
}
var gc = "[object Arguments]";
function li(t) {
  return Le(t) && Je(t) == gc;
}
var ks = Object.prototype, Ec = ks.hasOwnProperty, vc = ks.propertyIsEnumerable, yr = li(/* @__PURE__ */ function() {
  return arguments;
}()) ? li : function(t) {
  return Le(t) && Ec.call(t, "callee") && !vc.call(t, "callee");
};
function Tc() {
  return !1;
}
var Ns = typeof exports == "object" && exports && !exports.nodeType && exports, hi = Ns && typeof module == "object" && module && !module.nodeType && module, _c = hi && hi.exports === Ns, fi = _c ? Pe.Buffer : void 0, yc = fi ? fi.isBuffer : void 0, It = yc || Tc, Ac = "[object Arguments]", Sc = "[object Array]", Rc = "[object Boolean]", Oc = "[object Date]", Lc = "[object Error]", Ic = "[object Function]", Cc = "[object Map]", Mc = "[object Number]", bc = "[object Object]", kc = "[object RegExp]", Nc = "[object Set]", Pc = "[object String]", wc = "[object WeakMap]", xc = "[object ArrayBuffer]", Uc = "[object DataView]", Dc = "[object Float32Array]", Fc = "[object Float64Array]", jc = "[object Int8Array]", $c = "[object Int16Array]", Gc = "[object Int32Array]", Bc = "[object Uint8Array]", Vc = "[object Uint8ClampedArray]", Wc = "[object Uint16Array]", Kc = "[object Uint32Array]", H = {};
H[Dc] = H[Fc] = H[jc] = H[$c] = H[Gc] = H[Bc] = H[Vc] = H[Wc] = H[Kc] = !0;
H[Ac] = H[Sc] = H[xc] = H[Rc] = H[Uc] = H[Oc] = H[Lc] = H[Ic] = H[Cc] = H[Mc] = H[bc] = H[kc] = H[Nc] = H[Pc] = H[wc] = !1;
function Hc(t) {
  return Le(t) && bn(t.length) && !!H[Je(t)];
}
function Ar(t) {
  return function(e) {
    return t(e);
  };
}
var Ps = typeof exports == "object" && exports && !exports.nodeType && exports, Ot = Ps && typeof module == "object" && module && !module.nodeType && module, zc = Ot && Ot.exports === Ps, Ur = zc && Rs.process, Xe = function() {
  try {
    var t = Ot && Ot.require && Ot.require("util").types;
    return t || Ur && Ur.binding && Ur.binding("util");
  } catch {
  }
}(), pi = Xe && Xe.isTypedArray, kn = pi ? Ar(pi) : Hc, Yc = Object.prototype, qc = Yc.hasOwnProperty;
function ws(t, e) {
  var r = j(t), n = !r && yr(t), i = !r && !n && It(t), s = !r && !n && !i && kn(t), o = r || n || i || s, c = o ? mc(t.length, String) : [], a = c.length;
  for (var u in t)
    (e || qc.call(t, u)) && !(o && // Safari 9 has enumerable `arguments.length` in strict mode.
    (u == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    i && (u == "offset" || u == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    s && (u == "buffer" || u == "byteLength" || u == "byteOffset") || // Skip index properties.
    Tr(u, a))) && c.push(u);
  return c;
}
function xs(t, e) {
  return function(r) {
    return t(e(r));
  };
}
var Xc = xs(Object.keys, Object), Qc = Object.prototype, Jc = Qc.hasOwnProperty;
function Us(t) {
  if (!Nt(t))
    return Xc(t);
  var e = [];
  for (var r in Object(t))
    Jc.call(t, r) && r != "constructor" && e.push(r);
  return e;
}
function Ae(t) {
  return we(t) ? ws(t) : Us(t);
}
var Zc = Object.prototype, eu = Zc.hasOwnProperty, de = pc(function(t, e) {
  if (Nt(e) || we(e)) {
    Cn(e, Ae(e), t);
    return;
  }
  for (var r in e)
    eu.call(e, r) && _r(t, r, e[r]);
});
function tu(t) {
  var e = [];
  if (t != null)
    for (var r in Object(t))
      e.push(r);
  return e;
}
var ru = Object.prototype, nu = ru.hasOwnProperty;
function iu(t) {
  if (!ye(t))
    return tu(t);
  var e = Nt(t), r = [];
  for (var n in t)
    n == "constructor" && (e || !nu.call(t, n)) || r.push(n);
  return r;
}
function Ds(t) {
  return we(t) ? ws(t, !0) : iu(t);
}
var su = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, ou = /^\w*$/;
function Nn(t, e) {
  if (j(t))
    return !1;
  var r = typeof t;
  return r == "number" || r == "symbol" || r == "boolean" || t == null || gr(t) ? !0 : ou.test(t) || !su.test(t) || e != null && t in Object(e);
}
var Ct = ot(Object, "create");
function au() {
  this.__data__ = Ct ? Ct(null) : {}, this.size = 0;
}
function cu(t) {
  var e = this.has(t) && delete this.__data__[t];
  return this.size -= e ? 1 : 0, e;
}
var uu = "__lodash_hash_undefined__", lu = Object.prototype, hu = lu.hasOwnProperty;
function fu(t) {
  var e = this.__data__;
  if (Ct) {
    var r = e[t];
    return r === uu ? void 0 : r;
  }
  return hu.call(e, t) ? e[t] : void 0;
}
var pu = Object.prototype, du = pu.hasOwnProperty;
function mu(t) {
  var e = this.__data__;
  return Ct ? e[t] !== void 0 : du.call(e, t);
}
var gu = "__lodash_hash_undefined__";
function Eu(t, e) {
  var r = this.__data__;
  return this.size += this.has(t) ? 0 : 1, r[t] = Ct && e === void 0 ? gu : e, this;
}
function rt(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
rt.prototype.clear = au;
rt.prototype.delete = cu;
rt.prototype.get = fu;
rt.prototype.has = mu;
rt.prototype.set = Eu;
function vu() {
  this.__data__ = [], this.size = 0;
}
function Sr(t, e) {
  for (var r = t.length; r--; )
    if (kt(t[r][0], e))
      return r;
  return -1;
}
var Tu = Array.prototype, _u = Tu.splice;
function yu(t) {
  var e = this.__data__, r = Sr(e, t);
  if (r < 0)
    return !1;
  var n = e.length - 1;
  return r == n ? e.pop() : _u.call(e, r, 1), --this.size, !0;
}
function Au(t) {
  var e = this.__data__, r = Sr(e, t);
  return r < 0 ? void 0 : e[r][1];
}
function Su(t) {
  return Sr(this.__data__, t) > -1;
}
function Ru(t, e) {
  var r = this.__data__, n = Sr(r, t);
  return n < 0 ? (++this.size, r.push([t, e])) : r[n][1] = e, this;
}
function ze(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
ze.prototype.clear = vu;
ze.prototype.delete = yu;
ze.prototype.get = Au;
ze.prototype.has = Su;
ze.prototype.set = Ru;
var Mt = ot(Pe, "Map");
function Ou() {
  this.size = 0, this.__data__ = {
    hash: new rt(),
    map: new (Mt || ze)(),
    string: new rt()
  };
}
function Lu(t) {
  var e = typeof t;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null;
}
function Rr(t, e) {
  var r = t.__data__;
  return Lu(e) ? r[typeof e == "string" ? "string" : "hash"] : r.map;
}
function Iu(t) {
  var e = Rr(this, t).delete(t);
  return this.size -= e ? 1 : 0, e;
}
function Cu(t) {
  return Rr(this, t).get(t);
}
function Mu(t) {
  return Rr(this, t).has(t);
}
function bu(t, e) {
  var r = Rr(this, t), n = r.size;
  return r.set(t, e), this.size += r.size == n ? 0 : 1, this;
}
function Ye(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
Ye.prototype.clear = Ou;
Ye.prototype.delete = Iu;
Ye.prototype.get = Cu;
Ye.prototype.has = Mu;
Ye.prototype.set = bu;
var ku = "Expected a function";
function Pn(t, e) {
  if (typeof t != "function" || e != null && typeof e != "function")
    throw new TypeError(ku);
  var r = function() {
    var n = arguments, i = e ? e.apply(this, n) : n[0], s = r.cache;
    if (s.has(i))
      return s.get(i);
    var o = t.apply(this, n);
    return r.cache = s.set(i, o) || s, o;
  };
  return r.cache = new (Pn.Cache || Ye)(), r;
}
Pn.Cache = Ye;
var Nu = 500;
function Pu(t) {
  var e = Pn(t, function(n) {
    return r.size === Nu && r.clear(), n;
  }), r = e.cache;
  return e;
}
var wu = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, xu = /\\(\\)?/g, Uu = Pu(function(t) {
  var e = [];
  return t.charCodeAt(0) === 46 && e.push(""), t.replace(wu, function(r, n, i, s) {
    e.push(i ? s.replace(xu, "$1") : n || r);
  }), e;
});
function Du(t) {
  return t == null ? "" : Ls(t);
}
function Or(t, e) {
  return j(t) ? t : Nn(t, e) ? [t] : Uu(Du(t));
}
var Fu = 1 / 0;
function Pt(t) {
  if (typeof t == "string" || gr(t))
    return t;
  var e = t + "";
  return e == "0" && 1 / t == -Fu ? "-0" : e;
}
function wn(t, e) {
  e = Or(e, t);
  for (var r = 0, n = e.length; t != null && r < n; )
    t = t[Pt(e[r++])];
  return r && r == n ? t : void 0;
}
function ju(t, e, r) {
  var n = t == null ? void 0 : wn(t, e);
  return n === void 0 ? r : n;
}
function xn(t, e) {
  for (var r = -1, n = e.length, i = t.length; ++r < n; )
    t[i + r] = e[r];
  return t;
}
var di = _e ? _e.isConcatSpreadable : void 0;
function $u(t) {
  return j(t) || yr(t) || !!(di && t && t[di]);
}
function Un(t, e, r, n, i) {
  var s = -1, o = t.length;
  for (r || (r = $u), i || (i = []); ++s < o; ) {
    var c = t[s];
    r(c) ? xn(i, c) : n || (i[i.length] = c);
  }
  return i;
}
function Re(t) {
  var e = t == null ? 0 : t.length;
  return e ? Un(t) : [];
}
var Fs = xs(Object.getPrototypeOf, Object);
function js(t, e, r) {
  var n = -1, i = t.length;
  e < 0 && (e = -e > i ? 0 : i + e), r = r > i ? i : r, r < 0 && (r += i), i = e > r ? 0 : r - e >>> 0, e >>>= 0;
  for (var s = Array(i); ++n < i; )
    s[n] = t[n + e];
  return s;
}
function Gu(t, e, r, n) {
  var i = -1, s = t == null ? 0 : t.length;
  for (n && s && (r = t[++i]); ++i < s; )
    r = e(r, t[i], i, t);
  return r;
}
function Bu() {
  this.__data__ = new ze(), this.size = 0;
}
function Vu(t) {
  var e = this.__data__, r = e.delete(t);
  return this.size = e.size, r;
}
function Wu(t) {
  return this.__data__.get(t);
}
function Ku(t) {
  return this.__data__.has(t);
}
var Hu = 200;
function zu(t, e) {
  var r = this.__data__;
  if (r instanceof ze) {
    var n = r.__data__;
    if (!Mt || n.length < Hu - 1)
      return n.push([t, e]), this.size = ++r.size, this;
    r = this.__data__ = new Ye(n);
  }
  return r.set(t, e), this.size = r.size, this;
}
function Ne(t) {
  var e = this.__data__ = new ze(t);
  this.size = e.size;
}
Ne.prototype.clear = Bu;
Ne.prototype.delete = Vu;
Ne.prototype.get = Wu;
Ne.prototype.has = Ku;
Ne.prototype.set = zu;
function Yu(t, e) {
  return t && Cn(e, Ae(e), t);
}
var $s = typeof exports == "object" && exports && !exports.nodeType && exports, mi = $s && typeof module == "object" && module && !module.nodeType && module, qu = mi && mi.exports === $s, gi = qu ? Pe.Buffer : void 0, Ei = gi ? gi.allocUnsafe : void 0;
function Xu(t, e) {
  var r = t.length, n = Ei ? Ei(r) : new t.constructor(r);
  return t.copy(n), n;
}
function Dn(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length, i = 0, s = []; ++r < n; ) {
    var o = t[r];
    e(o, r, t) && (s[i++] = o);
  }
  return s;
}
function Gs() {
  return [];
}
var Qu = Object.prototype, Ju = Qu.propertyIsEnumerable, vi = Object.getOwnPropertySymbols, Fn = vi ? function(t) {
  return t == null ? [] : (t = Object(t), Dn(vi(t), function(e) {
    return Ju.call(t, e);
  }));
} : Gs;
function Zu(t, e) {
  return Cn(t, Fn(t), e);
}
var el = Object.getOwnPropertySymbols, tl = el ? function(t) {
  for (var e = []; t; )
    xn(e, Fn(t)), t = Fs(t);
  return e;
} : Gs;
function Bs(t, e, r) {
  var n = e(t);
  return j(t) ? n : xn(n, r(t));
}
function nn(t) {
  return Bs(t, Ae, Fn);
}
function rl(t) {
  return Bs(t, Ds, tl);
}
var sn = ot(Pe, "DataView"), on = ot(Pe, "Promise"), lt = ot(Pe, "Set"), Ti = "[object Map]", nl = "[object Object]", _i = "[object Promise]", yi = "[object Set]", Ai = "[object WeakMap]", Si = "[object DataView]", il = st(sn), sl = st(Mt), ol = st(on), al = st(lt), cl = st(rn), ve = Je;
(sn && ve(new sn(new ArrayBuffer(1))) != Si || Mt && ve(new Mt()) != Ti || on && ve(on.resolve()) != _i || lt && ve(new lt()) != yi || rn && ve(new rn()) != Ai) && (ve = function(t) {
  var e = Je(t), r = e == nl ? t.constructor : void 0, n = r ? st(r) : "";
  if (n)
    switch (n) {
      case il:
        return Si;
      case sl:
        return Ti;
      case ol:
        return _i;
      case al:
        return yi;
      case cl:
        return Ai;
    }
  return e;
});
var ul = Object.prototype, ll = ul.hasOwnProperty;
function hl(t) {
  var e = t.length, r = new t.constructor(e);
  return e && typeof t[0] == "string" && ll.call(t, "index") && (r.index = t.index, r.input = t.input), r;
}
var ir = Pe.Uint8Array;
function fl(t) {
  var e = new t.constructor(t.byteLength);
  return new ir(e).set(new ir(t)), e;
}
function pl(t, e) {
  var r = t.buffer;
  return new t.constructor(r, t.byteOffset, t.byteLength);
}
var dl = /\w*$/;
function ml(t) {
  var e = new t.constructor(t.source, dl.exec(t));
  return e.lastIndex = t.lastIndex, e;
}
var Ri = _e ? _e.prototype : void 0, Oi = Ri ? Ri.valueOf : void 0;
function gl(t) {
  return Oi ? Object(Oi.call(t)) : {};
}
function El(t, e) {
  var r = t.buffer;
  return new t.constructor(r, t.byteOffset, t.length);
}
var vl = "[object Boolean]", Tl = "[object Date]", _l = "[object Map]", yl = "[object Number]", Al = "[object RegExp]", Sl = "[object Set]", Rl = "[object String]", Ol = "[object Symbol]", Ll = "[object ArrayBuffer]", Il = "[object DataView]", Cl = "[object Float32Array]", Ml = "[object Float64Array]", bl = "[object Int8Array]", kl = "[object Int16Array]", Nl = "[object Int32Array]", Pl = "[object Uint8Array]", wl = "[object Uint8ClampedArray]", xl = "[object Uint16Array]", Ul = "[object Uint32Array]";
function Dl(t, e, r) {
  var n = t.constructor;
  switch (e) {
    case Ll:
      return fl(t);
    case vl:
    case Tl:
      return new n(+t);
    case Il:
      return pl(t);
    case Cl:
    case Ml:
    case bl:
    case kl:
    case Nl:
    case Pl:
    case wl:
    case xl:
    case Ul:
      return El(t);
    case _l:
      return new n();
    case yl:
    case Rl:
      return new n(t);
    case Al:
      return ml(t);
    case Sl:
      return new n();
    case Ol:
      return gl(t);
  }
}
function Fl(t) {
  return typeof t.constructor == "function" && !Nt(t) ? qa(Fs(t)) : {};
}
var jl = "[object Map]";
function $l(t) {
  return Le(t) && ve(t) == jl;
}
var Li = Xe && Xe.isMap, Gl = Li ? Ar(Li) : $l, Bl = "[object Set]";
function Vl(t) {
  return Le(t) && ve(t) == Bl;
}
var Ii = Xe && Xe.isSet, Wl = Ii ? Ar(Ii) : Vl, Vs = "[object Arguments]", Kl = "[object Array]", Hl = "[object Boolean]", zl = "[object Date]", Yl = "[object Error]", Ws = "[object Function]", ql = "[object GeneratorFunction]", Xl = "[object Map]", Ql = "[object Number]", Ks = "[object Object]", Jl = "[object RegExp]", Zl = "[object Set]", eh = "[object String]", th = "[object Symbol]", rh = "[object WeakMap]", nh = "[object ArrayBuffer]", ih = "[object DataView]", sh = "[object Float32Array]", oh = "[object Float64Array]", ah = "[object Int8Array]", ch = "[object Int16Array]", uh = "[object Int32Array]", lh = "[object Uint8Array]", hh = "[object Uint8ClampedArray]", fh = "[object Uint16Array]", ph = "[object Uint32Array]", W = {};
W[Vs] = W[Kl] = W[nh] = W[ih] = W[Hl] = W[zl] = W[sh] = W[oh] = W[ah] = W[ch] = W[uh] = W[Xl] = W[Ql] = W[Ks] = W[Jl] = W[Zl] = W[eh] = W[th] = W[lh] = W[hh] = W[fh] = W[ph] = !0;
W[Yl] = W[Ws] = W[rh] = !1;
function qt(t, e, r, n, i, s) {
  var o;
  if (o !== void 0)
    return o;
  if (!ye(t))
    return t;
  var c = j(t);
  if (c)
    return o = hl(t), Qa(t, o);
  var a = ve(t), u = a == Ws || a == ql;
  if (It(t))
    return Xu(t);
  if (a == Ks || a == Vs || u && !i)
    return o = u ? {} : Fl(t), Zu(t, Yu(o, t));
  if (!W[a])
    return i ? t : {};
  o = Dl(t, a), s || (s = new Ne());
  var l = s.get(t);
  if (l)
    return l;
  s.set(t, o), Wl(t) ? t.forEach(function(p) {
    o.add(qt(p, e, r, p, t, s));
  }) : Gl(t) && t.forEach(function(p, m) {
    o.set(m, qt(p, e, r, m, t, s));
  });
  var h = nn, d = c ? void 0 : h(t);
  return Is(d || t, function(p, m) {
    d && (m = p, p = t[m]), _r(o, m, qt(p, e, r, m, t, s));
  }), o;
}
var dh = 4;
function ie(t) {
  return qt(t, dh);
}
function wt(t) {
  for (var e = -1, r = t == null ? 0 : t.length, n = 0, i = []; ++e < r; ) {
    var s = t[e];
    s && (i[n++] = s);
  }
  return i;
}
var mh = "__lodash_hash_undefined__";
function gh(t) {
  return this.__data__.set(t, mh), this;
}
function Eh(t) {
  return this.__data__.has(t);
}
function ft(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.__data__ = new Ye(); ++e < r; )
    this.add(t[e]);
}
ft.prototype.add = ft.prototype.push = gh;
ft.prototype.has = Eh;
function Hs(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n; )
    if (e(t[r], r, t))
      return !0;
  return !1;
}
function jn(t, e) {
  return t.has(e);
}
var vh = 1, Th = 2;
function zs(t, e, r, n, i, s) {
  var o = r & vh, c = t.length, a = e.length;
  if (c != a && !(o && a > c))
    return !1;
  var u = s.get(t), l = s.get(e);
  if (u && l)
    return u == e && l == t;
  var h = -1, d = !0, p = r & Th ? new ft() : void 0;
  for (s.set(t, e), s.set(e, t); ++h < c; ) {
    var m = t[h], g = e[h];
    if (n)
      var _ = o ? n(g, m, h, e, t, s) : n(m, g, h, t, e, s);
    if (_ !== void 0) {
      if (_)
        continue;
      d = !1;
      break;
    }
    if (p) {
      if (!Hs(e, function(y, T) {
        if (!jn(p, T) && (m === y || i(m, y, r, n, s)))
          return p.push(T);
      })) {
        d = !1;
        break;
      }
    } else if (!(m === g || i(m, g, r, n, s))) {
      d = !1;
      break;
    }
  }
  return s.delete(t), s.delete(e), d;
}
function _h(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n, i) {
    r[++e] = [i, n];
  }), r;
}
function $n(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n) {
    r[++e] = n;
  }), r;
}
var yh = 1, Ah = 2, Sh = "[object Boolean]", Rh = "[object Date]", Oh = "[object Error]", Lh = "[object Map]", Ih = "[object Number]", Ch = "[object RegExp]", Mh = "[object Set]", bh = "[object String]", kh = "[object Symbol]", Nh = "[object ArrayBuffer]", Ph = "[object DataView]", Ci = _e ? _e.prototype : void 0, Dr = Ci ? Ci.valueOf : void 0;
function wh(t, e, r, n, i, s, o) {
  switch (r) {
    case Ph:
      if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset)
        return !1;
      t = t.buffer, e = e.buffer;
    case Nh:
      return !(t.byteLength != e.byteLength || !s(new ir(t), new ir(e)));
    case Sh:
    case Rh:
    case Ih:
      return kt(+t, +e);
    case Oh:
      return t.name == e.name && t.message == e.message;
    case Ch:
    case bh:
      return t == e + "";
    case Lh:
      var c = _h;
    case Mh:
      var a = n & yh;
      if (c || (c = $n), t.size != e.size && !a)
        return !1;
      var u = o.get(t);
      if (u)
        return u == e;
      n |= Ah, o.set(t, e);
      var l = zs(c(t), c(e), n, i, s, o);
      return o.delete(t), l;
    case kh:
      if (Dr)
        return Dr.call(t) == Dr.call(e);
  }
  return !1;
}
var xh = 1, Uh = Object.prototype, Dh = Uh.hasOwnProperty;
function Fh(t, e, r, n, i, s) {
  var o = r & xh, c = nn(t), a = c.length, u = nn(e), l = u.length;
  if (a != l && !o)
    return !1;
  for (var h = a; h--; ) {
    var d = c[h];
    if (!(o ? d in e : Dh.call(e, d)))
      return !1;
  }
  var p = s.get(t), m = s.get(e);
  if (p && m)
    return p == e && m == t;
  var g = !0;
  s.set(t, e), s.set(e, t);
  for (var _ = o; ++h < a; ) {
    d = c[h];
    var y = t[d], T = e[d];
    if (n)
      var v = o ? n(T, y, d, e, t, s) : n(y, T, d, t, e, s);
    if (!(v === void 0 ? y === T || i(y, T, r, n, s) : v)) {
      g = !1;
      break;
    }
    _ || (_ = d == "constructor");
  }
  if (g && !_) {
    var f = t.constructor, E = e.constructor;
    f != E && "constructor" in t && "constructor" in e && !(typeof f == "function" && f instanceof f && typeof E == "function" && E instanceof E) && (g = !1);
  }
  return s.delete(t), s.delete(e), g;
}
var jh = 1, Mi = "[object Arguments]", bi = "[object Array]", $t = "[object Object]", $h = Object.prototype, ki = $h.hasOwnProperty;
function Gh(t, e, r, n, i, s) {
  var o = j(t), c = j(e), a = o ? bi : ve(t), u = c ? bi : ve(e);
  a = a == Mi ? $t : a, u = u == Mi ? $t : u;
  var l = a == $t, h = u == $t, d = a == u;
  if (d && It(t)) {
    if (!It(e))
      return !1;
    o = !0, l = !1;
  }
  if (d && !l)
    return s || (s = new Ne()), o || kn(t) ? zs(t, e, r, n, i, s) : wh(t, e, a, r, n, i, s);
  if (!(r & jh)) {
    var p = l && ki.call(t, "__wrapped__"), m = h && ki.call(e, "__wrapped__");
    if (p || m) {
      var g = p ? t.value() : t, _ = m ? e.value() : e;
      return s || (s = new Ne()), i(g, _, r, n, s);
    }
  }
  return d ? (s || (s = new Ne()), Fh(t, e, r, n, i, s)) : !1;
}
function Gn(t, e, r, n, i) {
  return t === e ? !0 : t == null || e == null || !Le(t) && !Le(e) ? t !== t && e !== e : Gh(t, e, r, n, Gn, i);
}
var Bh = 1, Vh = 2;
function Wh(t, e, r, n) {
  var i = r.length, s = i;
  if (t == null)
    return !s;
  for (t = Object(t); i--; ) {
    var o = r[i];
    if (o[2] ? o[1] !== t[o[0]] : !(o[0] in t))
      return !1;
  }
  for (; ++i < s; ) {
    o = r[i];
    var c = o[0], a = t[c], u = o[1];
    if (o[2]) {
      if (a === void 0 && !(c in t))
        return !1;
    } else {
      var l = new Ne(), h;
      if (!(h === void 0 ? Gn(u, a, Bh | Vh, n, l) : h))
        return !1;
    }
  }
  return !0;
}
function Ys(t) {
  return t === t && !ye(t);
}
function Kh(t) {
  for (var e = Ae(t), r = e.length; r--; ) {
    var n = e[r], i = t[n];
    e[r] = [n, i, Ys(i)];
  }
  return e;
}
function qs(t, e) {
  return function(r) {
    return r == null ? !1 : r[t] === e && (e !== void 0 || t in Object(r));
  };
}
function Hh(t) {
  var e = Kh(t);
  return e.length == 1 && e[0][2] ? qs(e[0][0], e[0][1]) : function(r) {
    return r === t || Wh(r, t, e);
  };
}
function zh(t, e) {
  return t != null && e in Object(t);
}
function Xs(t, e, r) {
  e = Or(e, t);
  for (var n = -1, i = e.length, s = !1; ++n < i; ) {
    var o = Pt(e[n]);
    if (!(s = t != null && r(t, o)))
      break;
    t = t[o];
  }
  return s || ++n != i ? s : (i = t == null ? 0 : t.length, !!i && bn(i) && Tr(o, i) && (j(t) || yr(t)));
}
function Yh(t, e) {
  return t != null && Xs(t, e, zh);
}
var qh = 1, Xh = 2;
function Qh(t, e) {
  return Nn(t) && Ys(e) ? qs(Pt(t), e) : function(r) {
    var n = ju(r, t);
    return n === void 0 && n === e ? Yh(r, t) : Gn(e, n, qh | Xh);
  };
}
function Jh(t) {
  return function(e) {
    return e == null ? void 0 : e[t];
  };
}
function Zh(t) {
  return function(e) {
    return wn(e, t);
  };
}
function ef(t) {
  return Nn(t) ? Jh(Pt(t)) : Zh(t);
}
function xe(t) {
  return typeof t == "function" ? t : t == null ? ht : typeof t == "object" ? j(t) ? Qh(t[0], t[1]) : Hh(t) : ef(t);
}
function tf(t, e, r, n) {
  for (var i = -1, s = t == null ? 0 : t.length; ++i < s; ) {
    var o = t[i];
    e(n, o, r(o), t);
  }
  return n;
}
function rf(t) {
  return function(e, r, n) {
    for (var i = -1, s = Object(e), o = n(e), c = o.length; c--; ) {
      var a = o[++i];
      if (r(s[a], a, s) === !1)
        break;
    }
    return e;
  };
}
var nf = rf();
function sf(t, e) {
  return t && nf(t, e, Ae);
}
function of(t, e) {
  return function(r, n) {
    if (r == null)
      return r;
    if (!we(r))
      return t(r, n);
    for (var i = r.length, s = -1, o = Object(r); ++s < i && n(o[s], s, o) !== !1; )
      ;
    return r;
  };
}
var at = of(sf);
function af(t, e, r, n) {
  return at(t, function(i, s, o) {
    e(n, i, r(i), o);
  }), n;
}
function cf(t, e) {
  return function(r, n) {
    var i = j(r) ? tf : af, s = {};
    return i(r, t, xe(n), s);
  };
}
var Qs = Object.prototype, uf = Qs.hasOwnProperty, Bn = Mn(function(t, e) {
  t = Object(t);
  var r = -1, n = e.length, i = n > 2 ? e[2] : void 0;
  for (i && bs(e[0], e[1], i) && (n = 1); ++r < n; )
    for (var s = e[r], o = Ds(s), c = -1, a = o.length; ++c < a; ) {
      var u = o[c], l = t[u];
      (l === void 0 || kt(l, Qs[u]) && !uf.call(t, u)) && (t[u] = s[u]);
    }
  return t;
});
function Ni(t) {
  return Le(t) && we(t);
}
var lf = 200;
function hf(t, e, r, n) {
  var i = -1, s = Ms, o = !0, c = t.length, a = [], u = e.length;
  if (!c)
    return a;
  e.length >= lf && (s = jn, o = !1, e = new ft(e));
  e:
    for (; ++i < c; ) {
      var l = t[i], h = l;
      if (l = l !== 0 ? l : 0, o && h === h) {
        for (var d = u; d--; )
          if (e[d] === h)
            continue e;
        a.push(l);
      } else s(e, h, n) || a.push(l);
    }
  return a;
}
var Lr = Mn(function(t, e) {
  return Ni(t) ? hf(t, Un(e, 1, Ni, !0)) : [];
});
function pt(t) {
  var e = t == null ? 0 : t.length;
  return e ? t[e - 1] : void 0;
}
function ne(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = e === void 0 ? 1 : vr(e), js(t, e < 0 ? 0 : e, n)) : [];
}
function bt(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = e === void 0 ? 1 : vr(e), e = n - e, js(t, 0, e < 0 ? 0 : e)) : [];
}
function ff(t) {
  return typeof t == "function" ? t : ht;
}
function N(t, e) {
  var r = j(t) ? Is : at;
  return r(t, ff(e));
}
function pf(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n; )
    if (!e(t[r], r, t))
      return !1;
  return !0;
}
function df(t, e) {
  var r = !0;
  return at(t, function(n, i, s) {
    return r = !!e(n, i, s), r;
  }), r;
}
function Oe(t, e, r) {
  var n = j(t) ? pf : df;
  return n(t, xe(e));
}
function Js(t, e) {
  var r = [];
  return at(t, function(n, i, s) {
    e(n, i, s) && r.push(n);
  }), r;
}
function Se(t, e) {
  var r = j(t) ? Dn : Js;
  return r(t, xe(e));
}
function mf(t) {
  return function(e, r, n) {
    var i = Object(e);
    if (!we(e)) {
      var s = xe(r);
      e = Ae(e), r = function(c) {
        return s(i[c], c, i);
      };
    }
    var o = t(e, r, n);
    return o > -1 ? i[s ? e[o] : o] : void 0;
  };
}
var gf = Math.max;
function Ef(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = r == null ? 0 : vr(r);
  return i < 0 && (i = gf(n + i, 0)), Cs(t, xe(e), i);
}
var dt = mf(Ef);
function Ie(t) {
  return t && t.length ? t[0] : void 0;
}
function vf(t, e) {
  var r = -1, n = we(t) ? Array(t.length) : [];
  return at(t, function(i, s, o) {
    n[++r] = e(i, s, o);
  }), n;
}
function C(t, e) {
  var r = j(t) ? Er : vf;
  return r(t, xe(e));
}
function Te(t, e) {
  return Un(C(t, e));
}
var Tf = Object.prototype, _f = Tf.hasOwnProperty, yf = cf(function(t, e, r) {
  _f.call(t, r) ? t[r].push(e) : In(t, r, [e]);
}), Af = Object.prototype, Sf = Af.hasOwnProperty;
function Rf(t, e) {
  return t != null && Sf.call(t, e);
}
function b(t, e) {
  return t != null && Xs(t, e, Rf);
}
var Of = "[object String]";
function he(t) {
  return typeof t == "string" || !j(t) && Le(t) && Je(t) == Of;
}
function Lf(t, e) {
  return Er(e, function(r) {
    return t[r];
  });
}
function Z(t) {
  return t == null ? [] : Lf(t, Ae(t));
}
var If = Math.max;
function ue(t, e, r, n) {
  t = we(t) ? t : Z(t), r = r && !n ? vr(r) : 0;
  var i = t.length;
  return r < 0 && (r = If(i + r, 0)), he(t) ? r <= i && t.indexOf(e, r) > -1 : !!i && Ln(t, e, r) > -1;
}
function Pi(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = 0;
  return Ln(t, e, i);
}
var Cf = "[object Map]", Mf = "[object Set]", bf = Object.prototype, kf = bf.hasOwnProperty;
function K(t) {
  if (t == null)
    return !0;
  if (we(t) && (j(t) || typeof t == "string" || typeof t.splice == "function" || It(t) || kn(t) || yr(t)))
    return !t.length;
  var e = ve(t);
  if (e == Cf || e == Mf)
    return !t.size;
  if (Nt(t))
    return !Us(t).length;
  for (var r in t)
    if (kf.call(t, r))
      return !1;
  return !0;
}
var Nf = "[object RegExp]";
function Pf(t) {
  return Le(t) && Je(t) == Nf;
}
var wi = Xe && Xe.isRegExp, Ve = wi ? Ar(wi) : Pf;
function We(t) {
  return t === void 0;
}
var wf = "Expected a function";
function xf(t) {
  if (typeof t != "function")
    throw new TypeError(wf);
  return function() {
    var e = arguments;
    switch (e.length) {
      case 0:
        return !t.call(this);
      case 1:
        return !t.call(this, e[0]);
      case 2:
        return !t.call(this, e[0], e[1]);
      case 3:
        return !t.call(this, e[0], e[1], e[2]);
    }
    return !t.apply(this, e);
  };
}
function Uf(t, e, r, n) {
  if (!ye(t))
    return t;
  e = Or(e, t);
  for (var i = -1, s = e.length, o = s - 1, c = t; c != null && ++i < s; ) {
    var a = Pt(e[i]), u = r;
    if (a === "__proto__" || a === "constructor" || a === "prototype")
      return t;
    if (i != o) {
      var l = c[a];
      u = void 0, u === void 0 && (u = ye(l) ? l : Tr(e[i + 1]) ? [] : {});
    }
    _r(c, a, u), c = c[a];
  }
  return t;
}
function Df(t, e, r) {
  for (var n = -1, i = e.length, s = {}; ++n < i; ) {
    var o = e[n], c = wn(t, o);
    r(c, o) && Uf(s, Or(o, t), c);
  }
  return s;
}
function Ce(t, e) {
  if (t == null)
    return {};
  var r = Er(rl(t), function(n) {
    return [n];
  });
  return e = xe(e), Df(t, r, function(n, i) {
    return e(n, i[0]);
  });
}
function Ff(t, e, r, n, i) {
  return i(t, function(s, o, c) {
    r = n ? (n = !1, s) : e(r, s, o, c);
  }), r;
}
function me(t, e, r) {
  var n = j(t) ? Gu : Ff, i = arguments.length < 3;
  return n(t, xe(e), r, i, at);
}
function Ir(t, e) {
  var r = j(t) ? Dn : Js;
  return r(t, xf(xe(e)));
}
function jf(t, e) {
  var r;
  return at(t, function(n, i, s) {
    return r = e(n, i, s), !r;
  }), !!r;
}
function Zs(t, e, r) {
  var n = j(t) ? Hs : jf;
  return n(t, xe(e));
}
var $f = 1 / 0, Gf = lt && 1 / $n(new lt([, -0]))[1] == $f ? function(t) {
  return new lt(t);
} : J, Bf = 200;
function Vf(t, e, r) {
  var n = -1, i = Ms, s = t.length, o = !0, c = [], a = c;
  if (s >= Bf) {
    var u = Gf(t);
    if (u)
      return $n(u);
    o = !1, i = jn, a = new ft();
  } else
    a = c;
  e:
    for (; ++n < s; ) {
      var l = t[n], h = l;
      if (l = l !== 0 ? l : 0, o && h === h) {
        for (var d = a.length; d--; )
          if (a[d] === h)
            continue e;
        c.push(l);
      } else i(a, h, r) || (a !== c && a.push(h), c.push(l));
    }
  return c;
}
function Vn(t) {
  return t && t.length ? Vf(t) : [];
}
function an(t) {
  console && console.error && console.error(`Error: ${t}`);
}
function eo(t) {
  console && console.warn && console.warn(`Warning: ${t}`);
}
function to(t) {
  const e = (/* @__PURE__ */ new Date()).getTime(), r = t();
  return { time: (/* @__PURE__ */ new Date()).getTime() - e, value: r };
}
function ro(t) {
  function e() {
  }
  e.prototype = t;
  const r = new e();
  function n() {
    return typeof r.bar;
  }
  return n(), n(), t;
}
function Wf(t) {
  return Kf(t) ? t.LABEL : t.name;
}
function Kf(t) {
  return he(t.LABEL) && t.LABEL !== "";
}
class Ue {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    this._definition = e;
  }
  accept(e) {
    e.visit(this), N(this.definition, (r) => {
      r.accept(e);
    });
  }
}
class ge extends Ue {
  constructor(e) {
    super([]), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
  set definition(e) {
  }
  get definition() {
    return this.referencedRule !== void 0 ? this.referencedRule.definition : [];
  }
  accept(e) {
    e.visit(this);
  }
}
class mt extends Ue {
  constructor(e) {
    super(e.definition), this.orgText = "", de(this, Ce(e, (r) => r !== void 0));
  }
}
class fe extends Ue {
  constructor(e) {
    super(e.definition), this.ignoreAmbiguities = !1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class le extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class De extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class Fe extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class ee extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class Me extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class be extends Ue {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    super(e.definition), this.idx = 1, this.ignoreAmbiguities = !1, this.hasPredicates = !1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class z {
  constructor(e) {
    this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
  accept(e) {
    e.visit(this);
  }
}
function Hf(t) {
  return C(t, Xt);
}
function Xt(t) {
  function e(r) {
    return C(r, Xt);
  }
  if (t instanceof ge) {
    const r = {
      type: "NonTerminal",
      name: t.nonTerminalName,
      idx: t.idx
    };
    return he(t.label) && (r.label = t.label), r;
  } else {
    if (t instanceof fe)
      return {
        type: "Alternative",
        definition: e(t.definition)
      };
    if (t instanceof le)
      return {
        type: "Option",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof De)
      return {
        type: "RepetitionMandatory",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof Fe)
      return {
        type: "RepetitionMandatoryWithSeparator",
        idx: t.idx,
        separator: Xt(new z({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof Me)
      return {
        type: "RepetitionWithSeparator",
        idx: t.idx,
        separator: Xt(new z({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof ee)
      return {
        type: "Repetition",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof be)
      return {
        type: "Alternation",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof z) {
      const r = {
        type: "Terminal",
        name: t.terminalType.name,
        label: Wf(t.terminalType),
        idx: t.idx
      };
      he(t.label) && (r.terminalLabel = t.label);
      const n = t.terminalType.PATTERN;
      return t.terminalType.PATTERN && (r.pattern = Ve(n) ? n.source : n), r;
    } else {
      if (t instanceof mt)
        return {
          type: "Rule",
          name: t.name,
          orgText: t.orgText,
          definition: e(t.definition)
        };
      throw Error("non exhaustive match");
    }
  }
}
class gt {
  visit(e) {
    const r = e;
    switch (r.constructor) {
      case ge:
        return this.visitNonTerminal(r);
      case fe:
        return this.visitAlternative(r);
      case le:
        return this.visitOption(r);
      case De:
        return this.visitRepetitionMandatory(r);
      case Fe:
        return this.visitRepetitionMandatoryWithSeparator(r);
      case Me:
        return this.visitRepetitionWithSeparator(r);
      case ee:
        return this.visitRepetition(r);
      case be:
        return this.visitAlternation(r);
      case z:
        return this.visitTerminal(r);
      case mt:
        return this.visitRule(r);
      default:
        throw Error("non exhaustive match");
    }
  }
  /* c8 ignore next */
  visitNonTerminal(e) {
  }
  /* c8 ignore next */
  visitAlternative(e) {
  }
  /* c8 ignore next */
  visitOption(e) {
  }
  /* c8 ignore next */
  visitRepetition(e) {
  }
  /* c8 ignore next */
  visitRepetitionMandatory(e) {
  }
  /* c8 ignore next 3 */
  visitRepetitionMandatoryWithSeparator(e) {
  }
  /* c8 ignore next */
  visitRepetitionWithSeparator(e) {
  }
  /* c8 ignore next */
  visitAlternation(e) {
  }
  /* c8 ignore next */
  visitTerminal(e) {
  }
  /* c8 ignore next */
  visitRule(e) {
  }
}
function zf(t) {
  return t instanceof fe || t instanceof le || t instanceof ee || t instanceof De || t instanceof Fe || t instanceof Me || t instanceof z || t instanceof mt;
}
function sr(t, e = []) {
  return t instanceof le || t instanceof ee || t instanceof Me ? !0 : t instanceof be ? Zs(t.definition, (r) => sr(r, e)) : t instanceof ge && ue(e, t) ? !1 : t instanceof Ue ? (t instanceof ge && e.push(t), Oe(t.definition, (r) => sr(r, e))) : !1;
}
function Yf(t) {
  return t instanceof be;
}
function ke(t) {
  if (t instanceof ge)
    return "SUBRULE";
  if (t instanceof le)
    return "OPTION";
  if (t instanceof be)
    return "OR";
  if (t instanceof De)
    return "AT_LEAST_ONE";
  if (t instanceof Fe)
    return "AT_LEAST_ONE_SEP";
  if (t instanceof Me)
    return "MANY_SEP";
  if (t instanceof ee)
    return "MANY";
  if (t instanceof z)
    return "CONSUME";
  throw Error("non exhaustive match");
}
class Cr {
  walk(e, r = []) {
    N(e.definition, (n, i) => {
      const s = ne(e.definition, i + 1);
      if (n instanceof ge)
        this.walkProdRef(n, s, r);
      else if (n instanceof z)
        this.walkTerminal(n, s, r);
      else if (n instanceof fe)
        this.walkFlat(n, s, r);
      else if (n instanceof le)
        this.walkOption(n, s, r);
      else if (n instanceof De)
        this.walkAtLeastOne(n, s, r);
      else if (n instanceof Fe)
        this.walkAtLeastOneSep(n, s, r);
      else if (n instanceof Me)
        this.walkManySep(n, s, r);
      else if (n instanceof ee)
        this.walkMany(n, s, r);
      else if (n instanceof be)
        this.walkOr(n, s, r);
      else
        throw Error("non exhaustive match");
    });
  }
  walkTerminal(e, r, n) {
  }
  walkProdRef(e, r, n) {
  }
  walkFlat(e, r, n) {
    const i = r.concat(n);
    this.walk(e, i);
  }
  walkOption(e, r, n) {
    const i = r.concat(n);
    this.walk(e, i);
  }
  walkAtLeastOne(e, r, n) {
    const i = [
      new le({ definition: e.definition })
    ].concat(r, n);
    this.walk(e, i);
  }
  walkAtLeastOneSep(e, r, n) {
    const i = xi(e, r, n);
    this.walk(e, i);
  }
  walkMany(e, r, n) {
    const i = [
      new le({ definition: e.definition })
    ].concat(r, n);
    this.walk(e, i);
  }
  walkManySep(e, r, n) {
    const i = xi(e, r, n);
    this.walk(e, i);
  }
  walkOr(e, r, n) {
    const i = r.concat(n);
    N(e.definition, (s) => {
      const o = new fe({ definition: [s] });
      this.walk(o, i);
    });
  }
}
function xi(t, e, r) {
  return [
    new le({
      definition: [
        new z({ terminalType: t.separator })
      ].concat(t.definition)
    })
  ].concat(e, r);
}
function xt(t) {
  if (t instanceof ge)
    return xt(t.referencedRule);
  if (t instanceof z)
    return Qf(t);
  if (zf(t))
    return qf(t);
  if (Yf(t))
    return Xf(t);
  throw Error("non exhaustive match");
}
function qf(t) {
  let e = [];
  const r = t.definition;
  let n = 0, i = r.length > n, s, o = !0;
  for (; i && o; )
    s = r[n], o = sr(s), e = e.concat(xt(s)), n = n + 1, i = r.length > n;
  return Vn(e);
}
function Xf(t) {
  const e = C(t.definition, (r) => xt(r));
  return Vn(Re(e));
}
function Qf(t) {
  return [t.terminalType];
}
const no = "_~IN~_";
class Jf extends Cr {
  constructor(e) {
    super(), this.topProd = e, this.follows = {};
  }
  startWalking() {
    return this.walk(this.topProd), this.follows;
  }
  walkTerminal(e, r, n) {
  }
  walkProdRef(e, r, n) {
    const i = ep(e.referencedRule, e.idx) + this.topProd.name, s = r.concat(n), o = new fe({ definition: s }), c = xt(o);
    this.follows[i] = c;
  }
}
function Zf(t) {
  const e = {};
  return N(t, (r) => {
    const n = new Jf(r).startWalking();
    de(e, n);
  }), e;
}
function ep(t, e) {
  return t.name + e + no;
}
function P(t) {
  return t.charCodeAt(0);
}
function Fr(t, e) {
  Array.isArray(t) ? t.forEach(function(r) {
    e.push(r);
  }) : e.push(t);
}
function vt(t, e) {
  if (t[e] === !0)
    throw "duplicate flag " + e;
  t[e], t[e] = !0;
}
function ut(t) {
  if (t === void 0)
    throw Error("Internal Error - Should never get here!");
  return !0;
}
function tp() {
  throw Error("Internal Error - Should never get here!");
}
function Ui(t) {
  return t.type === "Character";
}
const or = [];
for (let t = P("0"); t <= P("9"); t++)
  or.push(t);
const ar = [P("_")].concat(or);
for (let t = P("a"); t <= P("z"); t++)
  ar.push(t);
for (let t = P("A"); t <= P("Z"); t++)
  ar.push(t);
const Di = [
  P(" "),
  P("\f"),
  P(`
`),
  P("\r"),
  P("	"),
  P("\v"),
  P("	"),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P("\u2028"),
  P("\u2029"),
  P(" "),
  P(" "),
  P("　"),
  P("\uFEFF")
], rp = /[0-9a-fA-F]/, Gt = /[0-9]/, np = /[1-9]/;
class ip {
  constructor() {
    this.idx = 0, this.input = "", this.groupIdx = 0;
  }
  saveState() {
    return {
      idx: this.idx,
      input: this.input,
      groupIdx: this.groupIdx
    };
  }
  restoreState(e) {
    this.idx = e.idx, this.input = e.input, this.groupIdx = e.groupIdx;
  }
  pattern(e) {
    this.idx = 0, this.input = e, this.groupIdx = 0, this.consumeChar("/");
    const r = this.disjunction();
    this.consumeChar("/");
    const n = {
      type: "Flags",
      loc: { begin: this.idx, end: e.length },
      global: !1,
      ignoreCase: !1,
      multiLine: !1,
      unicode: !1,
      sticky: !1
    };
    for (; this.isRegExpFlag(); )
      switch (this.popChar()) {
        case "g":
          vt(n, "global");
          break;
        case "i":
          vt(n, "ignoreCase");
          break;
        case "m":
          vt(n, "multiLine");
          break;
        case "u":
          vt(n, "unicode");
          break;
        case "y":
          vt(n, "sticky");
          break;
      }
    if (this.idx !== this.input.length)
      throw Error("Redundant input: " + this.input.substring(this.idx));
    return {
      type: "Pattern",
      flags: n,
      value: r,
      loc: this.loc(0)
    };
  }
  disjunction() {
    const e = [], r = this.idx;
    for (e.push(this.alternative()); this.peekChar() === "|"; )
      this.consumeChar("|"), e.push(this.alternative());
    return { type: "Disjunction", value: e, loc: this.loc(r) };
  }
  alternative() {
    const e = [], r = this.idx;
    for (; this.isTerm(); )
      e.push(this.term());
    return { type: "Alternative", value: e, loc: this.loc(r) };
  }
  term() {
    return this.isAssertion() ? this.assertion() : this.atom();
  }
  assertion() {
    const e = this.idx;
    switch (this.popChar()) {
      case "^":
        return {
          type: "StartAnchor",
          loc: this.loc(e)
        };
      case "$":
        return { type: "EndAnchor", loc: this.loc(e) };
      case "\\":
        switch (this.popChar()) {
          case "b":
            return {
              type: "WordBoundary",
              loc: this.loc(e)
            };
          case "B":
            return {
              type: "NonWordBoundary",
              loc: this.loc(e)
            };
        }
        throw Error("Invalid Assertion Escape");
      case "(":
        this.consumeChar("?");
        let r;
        switch (this.popChar()) {
          case "=":
            r = "Lookahead";
            break;
          case "!":
            r = "NegativeLookahead";
            break;
        }
        ut(r);
        const n = this.disjunction();
        return this.consumeChar(")"), {
          type: r,
          value: n,
          loc: this.loc(e)
        };
    }
    return tp();
  }
  quantifier(e = !1) {
    let r;
    const n = this.idx;
    switch (this.popChar()) {
      case "*":
        r = {
          atLeast: 0,
          atMost: 1 / 0
        };
        break;
      case "+":
        r = {
          atLeast: 1,
          atMost: 1 / 0
        };
        break;
      case "?":
        r = {
          atLeast: 0,
          atMost: 1
        };
        break;
      case "{":
        const i = this.integerIncludingZero();
        switch (this.popChar()) {
          case "}":
            r = {
              atLeast: i,
              atMost: i
            };
            break;
          case ",":
            let s;
            this.isDigit() ? (s = this.integerIncludingZero(), r = {
              atLeast: i,
              atMost: s
            }) : r = {
              atLeast: i,
              atMost: 1 / 0
            }, this.consumeChar("}");
            break;
        }
        if (e === !0 && r === void 0)
          return;
        ut(r);
        break;
    }
    if (!(e === !0 && r === void 0) && ut(r))
      return this.peekChar(0) === "?" ? (this.consumeChar("?"), r.greedy = !1) : r.greedy = !0, r.type = "Quantifier", r.loc = this.loc(n), r;
  }
  atom() {
    let e;
    const r = this.idx;
    switch (this.peekChar()) {
      case ".":
        e = this.dotAll();
        break;
      case "\\":
        e = this.atomEscape();
        break;
      case "[":
        e = this.characterClass();
        break;
      case "(":
        e = this.group();
        break;
    }
    if (e === void 0 && this.isPatternCharacter() && (e = this.patternCharacter()), ut(e))
      return e.loc = this.loc(r), this.isQuantifier() && (e.quantifier = this.quantifier()), e;
  }
  dotAll() {
    return this.consumeChar("."), {
      type: "Set",
      complement: !0,
      value: [P(`
`), P("\r"), P("\u2028"), P("\u2029")]
    };
  }
  atomEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.decimalEscapeAtom();
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  decimalEscapeAtom() {
    return { type: "GroupBackReference", value: this.positiveInteger() };
  }
  characterClassEscape() {
    let e, r = !1;
    switch (this.popChar()) {
      case "d":
        e = or;
        break;
      case "D":
        e = or, r = !0;
        break;
      case "s":
        e = Di;
        break;
      case "S":
        e = Di, r = !0;
        break;
      case "w":
        e = ar;
        break;
      case "W":
        e = ar, r = !0;
        break;
    }
    if (ut(e))
      return { type: "Set", value: e, complement: r };
  }
  controlEscapeAtom() {
    let e;
    switch (this.popChar()) {
      case "f":
        e = P("\f");
        break;
      case "n":
        e = P(`
`);
        break;
      case "r":
        e = P("\r");
        break;
      case "t":
        e = P("	");
        break;
      case "v":
        e = P("\v");
        break;
    }
    if (ut(e))
      return { type: "Character", value: e };
  }
  controlLetterEscapeAtom() {
    this.consumeChar("c");
    const e = this.popChar();
    if (/[a-zA-Z]/.test(e) === !1)
      throw Error("Invalid ");
    return { type: "Character", value: e.toUpperCase().charCodeAt(0) - 64 };
  }
  nulCharacterAtom() {
    return this.consumeChar("0"), { type: "Character", value: P("\0") };
  }
  hexEscapeSequenceAtom() {
    return this.consumeChar("x"), this.parseHexDigits(2);
  }
  regExpUnicodeEscapeSequenceAtom() {
    return this.consumeChar("u"), this.parseHexDigits(4);
  }
  identityEscapeAtom() {
    const e = this.popChar();
    return { type: "Character", value: P(e) };
  }
  classPatternCharacterAtom() {
    switch (this.peekChar()) {
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
      case "\\":
      case "]":
        throw Error("TBD");
      default:
        const e = this.popChar();
        return { type: "Character", value: P(e) };
    }
  }
  characterClass() {
    const e = [];
    let r = !1;
    for (this.consumeChar("["), this.peekChar(0) === "^" && (this.consumeChar("^"), r = !0); this.isClassAtom(); ) {
      const n = this.classAtom();
      if (n.type, Ui(n) && this.isRangeDash()) {
        this.consumeChar("-");
        const i = this.classAtom();
        if (i.type, Ui(i)) {
          if (i.value < n.value)
            throw Error("Range out of order in character class");
          e.push({ from: n.value, to: i.value });
        } else
          Fr(n.value, e), e.push(P("-")), Fr(i.value, e);
      } else
        Fr(n.value, e);
    }
    return this.consumeChar("]"), { type: "Set", complement: r, value: e };
  }
  classAtom() {
    switch (this.peekChar()) {
      case "]":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        throw Error("TBD");
      case "\\":
        return this.classEscape();
      default:
        return this.classPatternCharacterAtom();
    }
  }
  classEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      case "b":
        return this.consumeChar("b"), { type: "Character", value: P("\b") };
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  group() {
    let e = !0;
    switch (this.consumeChar("("), this.peekChar(0)) {
      case "?":
        this.consumeChar("?"), this.consumeChar(":"), e = !1;
        break;
      default:
        this.groupIdx++;
        break;
    }
    const r = this.disjunction();
    this.consumeChar(")");
    const n = {
      type: "Group",
      capturing: e,
      value: r
    };
    return e && (n.idx = this.groupIdx), n;
  }
  positiveInteger() {
    let e = this.popChar();
    if (np.test(e) === !1)
      throw Error("Expecting a positive integer");
    for (; Gt.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  integerIncludingZero() {
    let e = this.popChar();
    if (Gt.test(e) === !1)
      throw Error("Expecting an integer");
    for (; Gt.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  patternCharacter() {
    const e = this.popChar();
    switch (e) {
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
      case "^":
      case "$":
      case "\\":
      case ".":
      case "*":
      case "+":
      case "?":
      case "(":
      case ")":
      case "[":
      case "|":
        throw Error("TBD");
      default:
        return { type: "Character", value: P(e) };
    }
  }
  isRegExpFlag() {
    switch (this.peekChar(0)) {
      case "g":
      case "i":
      case "m":
      case "u":
      case "y":
        return !0;
      default:
        return !1;
    }
  }
  isRangeDash() {
    return this.peekChar() === "-" && this.isClassAtom(1);
  }
  isDigit() {
    return Gt.test(this.peekChar(0));
  }
  isClassAtom(e = 0) {
    switch (this.peekChar(e)) {
      case "]":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  isTerm() {
    return this.isAtom() || this.isAssertion();
  }
  isAtom() {
    if (this.isPatternCharacter())
      return !0;
    switch (this.peekChar(0)) {
      case ".":
      case "\\":
      case "[":
      case "(":
        return !0;
      default:
        return !1;
    }
  }
  isAssertion() {
    switch (this.peekChar(0)) {
      case "^":
      case "$":
        return !0;
      case "\\":
        switch (this.peekChar(1)) {
          case "b":
          case "B":
            return !0;
          default:
            return !1;
        }
      case "(":
        return this.peekChar(1) === "?" && (this.peekChar(2) === "=" || this.peekChar(2) === "!");
      default:
        return !1;
    }
  }
  isQuantifier() {
    const e = this.saveState();
    try {
      return this.quantifier(!0) !== void 0;
    } catch {
      return !1;
    } finally {
      this.restoreState(e);
    }
  }
  isPatternCharacter() {
    switch (this.peekChar()) {
      case "^":
      case "$":
      case "\\":
      case ".":
      case "*":
      case "+":
      case "?":
      case "(":
      case ")":
      case "[":
      case "|":
      case "/":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  parseHexDigits(e) {
    let r = "";
    for (let n = 0; n < e; n++) {
      const i = this.popChar();
      if (rp.test(i) === !1)
        throw Error("Expecting a HexDecimal digits");
      r += i;
    }
    return { type: "Character", value: parseInt(r, 16) };
  }
  peekChar(e = 0) {
    return this.input[this.idx + e];
  }
  popChar() {
    const e = this.peekChar(0);
    return this.consumeChar(void 0), e;
  }
  consumeChar(e) {
    if (e !== void 0 && this.input[this.idx] !== e)
      throw Error("Expected: '" + e + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
    if (this.idx >= this.input.length)
      throw Error("Unexpected end of input");
    this.idx++;
  }
  loc(e) {
    return { begin: e, end: this.idx };
  }
}
class Wn {
  visitChildren(e) {
    for (const r in e) {
      const n = e[r];
      e.hasOwnProperty(r) && (n.type !== void 0 ? this.visit(n) : Array.isArray(n) && n.forEach((i) => {
        this.visit(i);
      }, this));
    }
  }
  visit(e) {
    switch (e.type) {
      case "Pattern":
        this.visitPattern(e);
        break;
      case "Flags":
        this.visitFlags(e);
        break;
      case "Disjunction":
        this.visitDisjunction(e);
        break;
      case "Alternative":
        this.visitAlternative(e);
        break;
      case "StartAnchor":
        this.visitStartAnchor(e);
        break;
      case "EndAnchor":
        this.visitEndAnchor(e);
        break;
      case "WordBoundary":
        this.visitWordBoundary(e);
        break;
      case "NonWordBoundary":
        this.visitNonWordBoundary(e);
        break;
      case "Lookahead":
        this.visitLookahead(e);
        break;
      case "NegativeLookahead":
        this.visitNegativeLookahead(e);
        break;
      case "Character":
        this.visitCharacter(e);
        break;
      case "Set":
        this.visitSet(e);
        break;
      case "Group":
        this.visitGroup(e);
        break;
      case "GroupBackReference":
        this.visitGroupBackReference(e);
        break;
      case "Quantifier":
        this.visitQuantifier(e);
        break;
    }
    this.visitChildren(e);
  }
  visitPattern(e) {
  }
  visitFlags(e) {
  }
  visitDisjunction(e) {
  }
  visitAlternative(e) {
  }
  // Assertion
  visitStartAnchor(e) {
  }
  visitEndAnchor(e) {
  }
  visitWordBoundary(e) {
  }
  visitNonWordBoundary(e) {
  }
  visitLookahead(e) {
  }
  visitNegativeLookahead(e) {
  }
  // atoms
  visitCharacter(e) {
  }
  visitSet(e) {
  }
  visitGroup(e) {
  }
  visitGroupBackReference(e) {
  }
  visitQuantifier(e) {
  }
}
let Qt = {};
const sp = new ip();
function Mr(t) {
  const e = t.toString();
  if (Qt.hasOwnProperty(e))
    return Qt[e];
  {
    const r = sp.pattern(e);
    return Qt[e] = r, r;
  }
}
function op() {
  Qt = {};
}
const io = "Complement Sets are not supported for first char optimization", cr = `Unable to use "first char" lexer optimizations:
`;
function ap(t, e = !1) {
  try {
    const r = Mr(t);
    return cn(r.value, {}, r.flags.ignoreCase);
  } catch (r) {
    if (r.message === io)
      e && eo(`${cr}	Unable to optimize: < ${t.toString()} >
	Complement Sets cannot be automatically optimized.
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.`);
    else {
      let n = "";
      e && (n = `
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.`), an(`${cr}
	Failed parsing: < ${t.toString()} >
	Using the @chevrotain/regexp-to-ast library
	Please open an issue at: https://github.com/chevrotain/chevrotain/issues` + n);
    }
  }
  return [];
}
function cn(t, e, r) {
  switch (t.type) {
    case "Disjunction":
      for (let i = 0; i < t.value.length; i++)
        cn(t.value[i], e, r);
      break;
    case "Alternative":
      const n = t.value;
      for (let i = 0; i < n.length; i++) {
        const s = n[i];
        switch (s.type) {
          case "EndAnchor":
          case "GroupBackReference":
          case "Lookahead":
          case "NegativeLookahead":
          case "StartAnchor":
          case "WordBoundary":
          case "NonWordBoundary":
            continue;
        }
        const o = s;
        switch (o.type) {
          case "Character":
            Bt(o.value, e, r);
            break;
          case "Set":
            if (o.complement === !0)
              throw Error(io);
            N(o.value, (a) => {
              if (typeof a == "number")
                Bt(a, e, r);
              else {
                const u = a;
                if (r === !0)
                  for (let l = u.from; l <= u.to; l++)
                    Bt(l, e, r);
                else {
                  for (let l = u.from; l <= u.to && l < St; l++)
                    Bt(l, e, r);
                  if (u.to >= St) {
                    const l = u.from >= St ? u.from : St, h = u.to, d = Qe(l), p = Qe(h);
                    for (let m = d; m <= p; m++)
                      e[m] = m;
                  }
                }
              }
            });
            break;
          case "Group":
            cn(o.value, e, r);
            break;
          default:
            throw Error("Non Exhaustive Match");
        }
        const c = o.quantifier !== void 0 && o.quantifier.atLeast === 0;
        if (
          // A group may be optional due to empty contents /(?:)/
          // or if everything inside it is optional /((a)?)/
          o.type === "Group" && un(o) === !1 || // If this term is not a group it may only be optional if it has an optional quantifier
          o.type !== "Group" && c === !1
        )
          break;
      }
      break;
    default:
      throw Error("non exhaustive match!");
  }
  return Z(e);
}
function Bt(t, e, r) {
  const n = Qe(t);
  e[n] = n, r === !0 && cp(t, e);
}
function cp(t, e) {
  const r = String.fromCharCode(t), n = r.toUpperCase();
  if (n !== r) {
    const i = Qe(n.charCodeAt(0));
    e[i] = i;
  } else {
    const i = r.toLowerCase();
    if (i !== r) {
      const s = Qe(i.charCodeAt(0));
      e[s] = s;
    }
  }
}
function Fi(t, e) {
  return dt(t.value, (r) => {
    if (typeof r == "number")
      return ue(e, r);
    {
      const n = r;
      return dt(e, (i) => n.from <= i && i <= n.to) !== void 0;
    }
  });
}
function un(t) {
  const e = t.quantifier;
  return e && e.atLeast === 0 ? !0 : t.value ? j(t.value) ? Oe(t.value, un) : un(t.value) : !1;
}
class up extends Wn {
  constructor(e) {
    super(), this.targetCharCodes = e, this.found = !1;
  }
  visitChildren(e) {
    if (this.found !== !0) {
      switch (e.type) {
        case "Lookahead":
          this.visitLookahead(e);
          return;
        case "NegativeLookahead":
          this.visitNegativeLookahead(e);
          return;
      }
      super.visitChildren(e);
    }
  }
  visitCharacter(e) {
    ue(this.targetCharCodes, e.value) && (this.found = !0);
  }
  visitSet(e) {
    e.complement ? Fi(e, this.targetCharCodes) === void 0 && (this.found = !0) : Fi(e, this.targetCharCodes) !== void 0 && (this.found = !0);
  }
}
function Kn(t, e) {
  if (e instanceof RegExp) {
    const r = Mr(e), n = new up(t);
    return n.visit(r), n.found;
  } else
    return dt(e, (r) => ue(t, r.charCodeAt(0))) !== void 0;
}
const nt = "PATTERN", At = "defaultMode", Vt = "modes";
let so = typeof new RegExp("(?:)").sticky == "boolean";
function lp(t, e) {
  e = Bn(e, {
    useSticky: so,
    debug: !1,
    safeMode: !1,
    positionTracking: "full",
    lineTerminatorCharacters: ["\r", `
`],
    tracer: (T, v) => v()
  });
  const r = e.tracer;
  r("initCharCodeToOptimizedIndexMap", () => {
    Pp();
  });
  let n;
  r("Reject Lexer.NA", () => {
    n = Ir(t, (T) => T[nt] === ae.NA);
  });
  let i = !1, s;
  r("Transform Patterns", () => {
    i = !1, s = C(n, (T) => {
      const v = T[nt];
      if (Ve(v)) {
        const f = v.source;
        return f.length === 1 && // only these regExp meta characters which can appear in a length one regExp
        f !== "^" && f !== "$" && f !== "." && !v.ignoreCase ? f : f.length === 2 && f[0] === "\\" && // not a meta character
        !ue([
          "d",
          "D",
          "s",
          "S",
          "t",
          "r",
          "n",
          "t",
          "0",
          "c",
          "b",
          "B",
          "f",
          "v",
          "w",
          "W"
        ], f[1]) ? f[1] : e.useSticky ? $i(v) : ji(v);
      } else {
        if (He(v))
          return i = !0, { exec: v };
        if (typeof v == "object")
          return i = !0, v;
        if (typeof v == "string") {
          if (v.length === 1)
            return v;
          {
            const f = v.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&"), E = new RegExp(f);
            return e.useSticky ? $i(E) : ji(E);
          }
        } else
          throw Error("non exhaustive match");
      }
    });
  });
  let o, c, a, u, l;
  r("misc mapping", () => {
    o = C(n, (T) => T.tokenTypeIdx), c = C(n, (T) => {
      const v = T.GROUP;
      if (v !== ae.SKIPPED) {
        if (he(v))
          return v;
        if (We(v))
          return !1;
        throw Error("non exhaustive match");
      }
    }), a = C(n, (T) => {
      const v = T.LONGER_ALT;
      if (v)
        return j(v) ? C(v, (f) => Pi(n, f)) : [Pi(n, v)];
    }), u = C(n, (T) => T.PUSH_MODE), l = C(n, (T) => b(T, "POP_MODE"));
  });
  let h;
  r("Line Terminator Handling", () => {
    const T = co(e.lineTerminatorCharacters);
    h = C(n, (v) => !1), e.positionTracking !== "onlyOffset" && (h = C(n, (v) => b(v, "LINE_BREAKS") ? !!v.LINE_BREAKS : ao(v, T) === !1 && Kn(T, v.PATTERN)));
  });
  let d, p, m, g;
  r("Misc Mapping #2", () => {
    d = C(n, oo), p = C(s, bp), m = me(n, (T, v) => {
      const f = v.GROUP;
      return he(f) && f !== ae.SKIPPED && (T[f] = []), T;
    }, {}), g = C(s, (T, v) => ({
      pattern: s[v],
      longerAlt: a[v],
      canLineTerminator: h[v],
      isCustom: d[v],
      short: p[v],
      group: c[v],
      push: u[v],
      pop: l[v],
      tokenTypeIdx: o[v],
      tokenType: n[v]
    }));
  });
  let _ = !0, y = [];
  return e.safeMode || r("First Char Optimization", () => {
    y = me(n, (T, v, f) => {
      if (typeof v.PATTERN == "string") {
        const E = v.PATTERN.charCodeAt(0), L = Qe(E);
        jr(T, L, g[f]);
      } else if (j(v.START_CHARS_HINT)) {
        let E;
        N(v.START_CHARS_HINT, (L) => {
          const R = typeof L == "string" ? L.charCodeAt(0) : L, D = Qe(R);
          E !== D && (E = D, jr(T, D, g[f]));
        });
      } else if (Ve(v.PATTERN))
        if (v.PATTERN.unicode)
          _ = !1, e.ensureOptimizations && an(`${cr}	Unable to analyze < ${v.PATTERN.toString()} > pattern.
	The regexp unicode flag is not currently supported by the regexp-to-ast library.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE`);
        else {
          const E = ap(v.PATTERN, e.ensureOptimizations);
          K(E) && (_ = !1), N(E, (L) => {
            jr(T, L, g[f]);
          });
        }
      else
        e.ensureOptimizations && an(`${cr}	TokenType: <${v.name}> is using a custom token pattern without providing <start_chars_hint> parameter.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE`), _ = !1;
      return T;
    }, []);
  }), {
    emptyGroups: m,
    patternIdxToConfig: g,
    charCodeToPatternIdxToConfig: y,
    hasCustom: i,
    canBeOptimized: _
  };
}
function hp(t, e) {
  let r = [];
  const n = pp(t);
  r = r.concat(n.errors);
  const i = dp(n.valid), s = i.valid;
  return r = r.concat(i.errors), r = r.concat(fp(s)), r = r.concat(Ap(s)), r = r.concat(Sp(s, e)), r = r.concat(Rp(s)), r;
}
function fp(t) {
  let e = [];
  const r = Se(t, (n) => Ve(n[nt]));
  return e = e.concat(gp(r)), e = e.concat(Tp(r)), e = e.concat(_p(r)), e = e.concat(yp(r)), e = e.concat(Ep(r)), e;
}
function pp(t) {
  const e = Se(t, (i) => !b(i, nt)), r = C(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- missing static 'PATTERN' property",
    type: q.MISSING_PATTERN,
    tokenTypes: [i]
  })), n = Lr(t, e);
  return { errors: r, valid: n };
}
function dp(t) {
  const e = Se(t, (i) => {
    const s = i[nt];
    return !Ve(s) && !He(s) && !b(s, "exec") && !he(s);
  }), r = C(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
    type: q.INVALID_PATTERN,
    tokenTypes: [i]
  })), n = Lr(t, e);
  return { errors: r, valid: n };
}
const mp = /[^\\][$]/;
function gp(t) {
  class e extends Wn {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitEndAnchor(i) {
      this.found = !0;
    }
  }
  const r = Se(t, (n) => {
    const i = n.PATTERN;
    try {
      const s = Mr(i), o = new e();
      return o.visit(s), o.found;
    } catch {
      return mp.test(i.source);
    }
  });
  return C(r, (n) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + n.name + `<- static 'PATTERN' cannot contain end of input anchor '$'
	See chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: q.EOI_ANCHOR_FOUND,
    tokenTypes: [n]
  }));
}
function Ep(t) {
  const e = Se(t, (r) => r.PATTERN.test(""));
  return C(e, (r) => ({
    message: "Token Type: ->" + r.name + "<- static 'PATTERN' must not match an empty string",
    type: q.EMPTY_MATCH_PATTERN,
    tokenTypes: [r]
  }));
}
const vp = /[^\\[][\^]|^\^/;
function Tp(t) {
  class e extends Wn {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitStartAnchor(i) {
      this.found = !0;
    }
  }
  const r = Se(t, (n) => {
    const i = n.PATTERN;
    try {
      const s = Mr(i), o = new e();
      return o.visit(s), o.found;
    } catch {
      return vp.test(i.source);
    }
  });
  return C(r, (n) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + n.name + `<- static 'PATTERN' cannot contain start of input anchor '^'
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: q.SOI_ANCHOR_FOUND,
    tokenTypes: [n]
  }));
}
function _p(t) {
  const e = Se(t, (r) => {
    const n = r[nt];
    return n instanceof RegExp && (n.multiline || n.global);
  });
  return C(e, (r) => ({
    message: "Token Type: ->" + r.name + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
    type: q.UNSUPPORTED_FLAGS_FOUND,
    tokenTypes: [r]
  }));
}
function yp(t) {
  const e = [];
  let r = C(t, (i) => me(t, (s, o) => (i.PATTERN.source === o.PATTERN.source && !ue(e, o) && o.PATTERN !== ae.NA && (e.push(o), s.push(o)), s), []));
  r = wt(r);
  const n = Se(r, (i) => i.length > 1);
  return C(n, (i) => {
    const s = C(i, (o) => o.name);
    return {
      message: `The same RegExp pattern ->${Ie(i).PATTERN}<-has been used in all of the following Token Types: ${s.join(", ")} <-`,
      type: q.DUPLICATE_PATTERNS_FOUND,
      tokenTypes: i
    };
  });
}
function Ap(t) {
  const e = Se(t, (r) => {
    if (!b(r, "GROUP"))
      return !1;
    const n = r.GROUP;
    return n !== ae.SKIPPED && n !== ae.NA && !he(n);
  });
  return C(e, (r) => ({
    message: "Token Type: ->" + r.name + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
    type: q.INVALID_GROUP_TYPE_FOUND,
    tokenTypes: [r]
  }));
}
function Sp(t, e) {
  const r = Se(t, (n) => n.PUSH_MODE !== void 0 && !ue(e, n.PUSH_MODE));
  return C(r, (n) => ({
    message: `Token Type: ->${n.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${n.PUSH_MODE}<-which does not exist`,
    type: q.PUSH_MODE_DOES_NOT_EXIST,
    tokenTypes: [n]
  }));
}
function Rp(t) {
  const e = [], r = me(t, (n, i, s) => {
    const o = i.PATTERN;
    return o === ae.NA || (he(o) ? n.push({ str: o, idx: s, tokenType: i }) : Ve(o) && Lp(o) && n.push({ str: o.source, idx: s, tokenType: i })), n;
  }, []);
  return N(t, (n, i) => {
    N(r, ({ str: s, idx: o, tokenType: c }) => {
      if (i < o && Op(s, n.PATTERN)) {
        const a = `Token: ->${c.name}<- can never be matched.
Because it appears AFTER the Token Type ->${n.name}<-in the lexer's definition.
See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;
        e.push({
          message: a,
          type: q.UNREACHABLE_PATTERN,
          tokenTypes: [n, c]
        });
      }
    });
  }), e;
}
function Op(t, e) {
  if (Ve(e)) {
    const r = e.exec(t);
    return r !== null && r.index === 0;
  } else {
    if (He(e))
      return e(t, 0, [], {});
    if (b(e, "exec"))
      return e.exec(t, 0, [], {});
    if (typeof e == "string")
      return e === t;
    throw Error("non exhaustive match");
  }
}
function Lp(t) {
  return dt([
    ".",
    "\\",
    "[",
    "]",
    "|",
    "^",
    "$",
    "(",
    ")",
    "?",
    "*",
    "+",
    "{"
  ], (e) => t.source.indexOf(e) !== -1) === void 0;
}
function ji(t) {
  const e = t.ignoreCase ? "i" : "";
  return new RegExp(`^(?:${t.source})`, e);
}
function $i(t) {
  const e = t.ignoreCase ? "iy" : "y";
  return new RegExp(`${t.source}`, e);
}
function Ip(t, e, r) {
  const n = [];
  return b(t, At) || n.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + At + `> property in its definition
`,
    type: q.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
  }), b(t, Vt) || n.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + Vt + `> property in its definition
`,
    type: q.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
  }), b(t, Vt) && b(t, At) && !b(t.modes, t.defaultMode) && n.push({
    message: `A MultiMode Lexer cannot be initialized with a ${At}: <${t.defaultMode}>which does not exist
`,
    type: q.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
  }), b(t, Vt) && N(t.modes, (i, s) => {
    N(i, (o, c) => {
      if (We(o))
        n.push({
          message: `A Lexer cannot be initialized using an undefined Token Type. Mode:<${s}> at index: <${c}>
`,
          type: q.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
        });
      else if (b(o, "LONGER_ALT")) {
        const a = j(o.LONGER_ALT) ? o.LONGER_ALT : [o.LONGER_ALT];
        N(a, (u) => {
          !We(u) && !ue(i, u) && n.push({
            message: `A MultiMode Lexer cannot be initialized with a longer_alt <${u.name}> on token <${o.name}> outside of mode <${s}>
`,
            type: q.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE
          });
        });
      }
    });
  }), n;
}
function Cp(t, e, r) {
  const n = [];
  let i = !1;
  const s = wt(Re(Z(t.modes))), o = Ir(s, (a) => a[nt] === ae.NA), c = co(r);
  return e && N(o, (a) => {
    const u = ao(a, c);
    if (u !== !1) {
      const l = {
        message: Np(a, u),
        type: u.issue,
        tokenType: a
      };
      n.push(l);
    } else
      b(a, "LINE_BREAKS") ? a.LINE_BREAKS === !0 && (i = !0) : Kn(c, a.PATTERN) && (i = !0);
  }), e && !i && n.push({
    message: `Warning: No LINE_BREAKS Found.
	This Lexer has been defined to track line and column information,
	But none of the Token Types can be identified as matching a line terminator.
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS 
	for details.`,
    type: q.NO_LINE_BREAKS_FLAGS
  }), n;
}
function Mp(t) {
  const e = {}, r = Ae(t);
  return N(r, (n) => {
    const i = t[n];
    if (j(i))
      e[n] = [];
    else
      throw Error("non exhaustive match");
  }), e;
}
function oo(t) {
  const e = t.PATTERN;
  if (Ve(e))
    return !1;
  if (He(e) || b(e, "exec"))
    return !0;
  if (he(e))
    return !1;
  throw Error("non exhaustive match");
}
function bp(t) {
  return he(t) && t.length === 1 ? t.charCodeAt(0) : !1;
}
const kp = {
  // implements /\n|\r\n?/g.test
  test: function(t) {
    const e = t.length;
    for (let r = this.lastIndex; r < e; r++) {
      const n = t.charCodeAt(r);
      if (n === 10)
        return this.lastIndex = r + 1, !0;
      if (n === 13)
        return t.charCodeAt(r + 1) === 10 ? this.lastIndex = r + 2 : this.lastIndex = r + 1, !0;
    }
    return !1;
  },
  lastIndex: 0
};
function ao(t, e) {
  if (b(t, "LINE_BREAKS"))
    return !1;
  if (Ve(t.PATTERN)) {
    try {
      Kn(e, t.PATTERN);
    } catch (r) {
      return {
        issue: q.IDENTIFY_TERMINATOR,
        errMsg: r.message
      };
    }
    return !1;
  } else {
    if (he(t.PATTERN))
      return !1;
    if (oo(t))
      return { issue: q.CUSTOM_LINE_BREAK };
    throw Error("non exhaustive match");
  }
}
function Np(t, e) {
  if (e.issue === q.IDENTIFY_TERMINATOR)
    return `Warning: unable to identify line terminator usage in pattern.
	The problem is in the <${t.name}> Token Type
	 Root cause: ${e.errMsg}.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR`;
  if (e.issue === q.CUSTOM_LINE_BREAK)
    return `Warning: A Custom Token Pattern should specify the <line_breaks> option.
	The problem is in the <${t.name}> Token Type
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK`;
  throw Error("non exhaustive match");
}
function co(t) {
  return C(t, (e) => he(e) ? e.charCodeAt(0) : e);
}
function jr(t, e, r) {
  t[e] === void 0 ? t[e] = [r] : t[e].push(r);
}
const St = 256;
let Jt = [];
function Qe(t) {
  return t < St ? t : Jt[t];
}
function Pp() {
  if (K(Jt)) {
    Jt = new Array(65536);
    for (let t = 0; t < 65536; t++)
      Jt[t] = t > 255 ? 255 + ~~(t / 255) : t;
  }
}
function Ut(t, e) {
  const r = t.tokenTypeIdx;
  return r === e.tokenTypeIdx ? !0 : e.isParent === !0 && e.categoryMatchesMap[r] === !0;
}
function ur(t, e) {
  return t.tokenTypeIdx === e.tokenTypeIdx;
}
let Gi = 1;
const uo = {};
function Dt(t) {
  const e = wp(t);
  xp(e), Dp(e), Up(e), N(e, (r) => {
    r.isParent = r.categoryMatches.length > 0;
  });
}
function wp(t) {
  let e = ie(t), r = t, n = !0;
  for (; n; ) {
    r = wt(Re(C(r, (s) => s.CATEGORIES)));
    const i = Lr(r, e);
    e = e.concat(i), K(i) ? n = !1 : r = i;
  }
  return e;
}
function xp(t) {
  N(t, (e) => {
    ho(e) || (uo[Gi] = e, e.tokenTypeIdx = Gi++), Bi(e) && !j(e.CATEGORIES) && (e.CATEGORIES = [e.CATEGORIES]), Bi(e) || (e.CATEGORIES = []), Fp(e) || (e.categoryMatches = []), jp(e) || (e.categoryMatchesMap = {});
  });
}
function Up(t) {
  N(t, (e) => {
    e.categoryMatches = [], N(e.categoryMatchesMap, (r, n) => {
      e.categoryMatches.push(uo[n].tokenTypeIdx);
    });
  });
}
function Dp(t) {
  N(t, (e) => {
    lo([], e);
  });
}
function lo(t, e) {
  N(t, (r) => {
    e.categoryMatchesMap[r.tokenTypeIdx] = !0;
  }), N(e.CATEGORIES, (r) => {
    const n = t.concat(e);
    ue(n, r) || lo(n, r);
  });
}
function ho(t) {
  return b(t, "tokenTypeIdx");
}
function Bi(t) {
  return b(t, "CATEGORIES");
}
function Fp(t) {
  return b(t, "categoryMatches");
}
function jp(t) {
  return b(t, "categoryMatchesMap");
}
function $p(t) {
  return b(t, "tokenTypeIdx");
}
const Gp = {
  buildUnableToPopLexerModeMessage(t) {
    return `Unable to pop Lexer Mode after encountering Token ->${t.image}<- The Mode Stack is empty`;
  },
  buildUnexpectedCharactersMessage(t, e, r, n, i) {
    return `unexpected character: ->${t.charAt(e)}<- at offset: ${e}, skipped ${r} characters.`;
  }
};
var q;
(function(t) {
  t[t.MISSING_PATTERN = 0] = "MISSING_PATTERN", t[t.INVALID_PATTERN = 1] = "INVALID_PATTERN", t[t.EOI_ANCHOR_FOUND = 2] = "EOI_ANCHOR_FOUND", t[t.UNSUPPORTED_FLAGS_FOUND = 3] = "UNSUPPORTED_FLAGS_FOUND", t[t.DUPLICATE_PATTERNS_FOUND = 4] = "DUPLICATE_PATTERNS_FOUND", t[t.INVALID_GROUP_TYPE_FOUND = 5] = "INVALID_GROUP_TYPE_FOUND", t[t.PUSH_MODE_DOES_NOT_EXIST = 6] = "PUSH_MODE_DOES_NOT_EXIST", t[t.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE", t[t.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY", t[t.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST", t[t.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED", t[t.SOI_ANCHOR_FOUND = 11] = "SOI_ANCHOR_FOUND", t[t.EMPTY_MATCH_PATTERN = 12] = "EMPTY_MATCH_PATTERN", t[t.NO_LINE_BREAKS_FLAGS = 13] = "NO_LINE_BREAKS_FLAGS", t[t.UNREACHABLE_PATTERN = 14] = "UNREACHABLE_PATTERN", t[t.IDENTIFY_TERMINATOR = 15] = "IDENTIFY_TERMINATOR", t[t.CUSTOM_LINE_BREAK = 16] = "CUSTOM_LINE_BREAK", t[t.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE = 17] = "MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE";
})(q || (q = {}));
const Rt = {
  deferDefinitionErrorsHandling: !1,
  positionTracking: "full",
  lineTerminatorsPattern: /\n|\r\n?/g,
  lineTerminatorCharacters: [`
`, "\r"],
  ensureOptimizations: !1,
  safeMode: !1,
  errorMessageProvider: Gp,
  traceInitPerf: !1,
  skipValidations: !1,
  recoveryEnabled: !0
};
Object.freeze(Rt);
class ae {
  constructor(e, r = Rt) {
    if (this.lexerDefinition = e, this.lexerDefinitionErrors = [], this.lexerDefinitionWarning = [], this.patternIdxToConfig = {}, this.charCodeToPatternIdxToConfig = {}, this.modes = [], this.emptyGroups = {}, this.trackStartLines = !0, this.trackEndLines = !0, this.hasCustom = !1, this.canModeBeOptimized = {}, this.TRACE_INIT = (i, s) => {
      if (this.traceInitPerf === !0) {
        this.traceInitIndent++;
        const o = new Array(this.traceInitIndent + 1).join("	");
        this.traceInitIndent < this.traceInitMaxIdent && console.log(`${o}--> <${i}>`);
        const { time: c, value: a } = to(s), u = c > 10 ? console.warn : console.log;
        return this.traceInitIndent < this.traceInitMaxIdent && u(`${o}<-- <${i}> time: ${c}ms`), this.traceInitIndent--, a;
      } else
        return s();
    }, typeof r == "boolean")
      throw Error(`The second argument to the Lexer constructor is now an ILexerConfig Object.
a boolean 2nd argument is no longer supported`);
    this.config = de({}, Rt, r);
    const n = this.config.traceInitPerf;
    n === !0 ? (this.traceInitMaxIdent = 1 / 0, this.traceInitPerf = !0) : typeof n == "number" && (this.traceInitMaxIdent = n, this.traceInitPerf = !0), this.traceInitIndent = -1, this.TRACE_INIT("Lexer Constructor", () => {
      let i, s = !0;
      this.TRACE_INIT("Lexer Config handling", () => {
        if (this.config.lineTerminatorsPattern === Rt.lineTerminatorsPattern)
          this.config.lineTerminatorsPattern = kp;
        else if (this.config.lineTerminatorCharacters === Rt.lineTerminatorCharacters)
          throw Error(`Error: Missing <lineTerminatorCharacters> property on the Lexer config.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS`);
        if (r.safeMode && r.ensureOptimizations)
          throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking), this.trackEndLines = /full/i.test(this.config.positionTracking), j(e) ? i = {
          modes: { defaultMode: ie(e) },
          defaultMode: At
        } : (s = !1, i = ie(e));
      }), this.config.skipValidations === !1 && (this.TRACE_INIT("performRuntimeChecks", () => {
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(Ip(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      }), this.TRACE_INIT("performWarningRuntimeChecks", () => {
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(Cp(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      })), i.modes = i.modes ? i.modes : {}, N(i.modes, (c, a) => {
        i.modes[a] = Ir(c, (u) => We(u));
      });
      const o = Ae(i.modes);
      if (N(i.modes, (c, a) => {
        this.TRACE_INIT(`Mode: <${a}> processing`, () => {
          if (this.modes.push(a), this.config.skipValidations === !1 && this.TRACE_INIT("validatePatterns", () => {
            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(hp(c, o));
          }), K(this.lexerDefinitionErrors)) {
            Dt(c);
            let u;
            this.TRACE_INIT("analyzeTokenTypes", () => {
              u = lp(c, {
                lineTerminatorCharacters: this.config.lineTerminatorCharacters,
                positionTracking: r.positionTracking,
                ensureOptimizations: r.ensureOptimizations,
                safeMode: r.safeMode,
                tracer: this.TRACE_INIT
              });
            }), this.patternIdxToConfig[a] = u.patternIdxToConfig, this.charCodeToPatternIdxToConfig[a] = u.charCodeToPatternIdxToConfig, this.emptyGroups = de({}, this.emptyGroups, u.emptyGroups), this.hasCustom = u.hasCustom || this.hasCustom, this.canModeBeOptimized[a] = u.canBeOptimized;
          }
        });
      }), this.defaultMode = i.defaultMode, !K(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {
        const c = C(this.lexerDefinitionErrors, (a) => a.message).join(`-----------------------
`);
        throw new Error(`Errors detected in definition of Lexer:
` + c);
      }
      N(this.lexerDefinitionWarning, (c) => {
        eo(c.message);
      }), this.TRACE_INIT("Choosing sub-methods implementations", () => {
        if (so ? (this.chopInput = ht, this.match = this.matchWithTest) : (this.updateLastIndex = J, this.match = this.matchWithExec), s && (this.handleModes = J), this.trackStartLines === !1 && (this.computeNewColumn = ht), this.trackEndLines === !1 && (this.updateTokenEndLineColumnLocation = J), /full/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createFullToken;
        else if (/onlyStart/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createStartOnlyToken;
        else if (/onlyOffset/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createOffsetOnlyToken;
        else
          throw Error(`Invalid <positionTracking> config option: "${this.config.positionTracking}"`);
        this.hasCustom ? (this.addToken = this.addTokenUsingPush, this.handlePayload = this.handlePayloadWithCustom) : (this.addToken = this.addTokenUsingMemberAccess, this.handlePayload = this.handlePayloadNoCustom);
      }), this.TRACE_INIT("Failed Optimization Warnings", () => {
        const c = me(this.canModeBeOptimized, (a, u, l) => (u === !1 && a.push(l), a), []);
        if (r.ensureOptimizations && !K(c))
          throw Error(`Lexer Modes: < ${c.join(", ")} > cannot be optimized.
	 Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.
	 Or inspect the console log for details on how to resolve these issues.`);
      }), this.TRACE_INIT("clearRegExpParserCache", () => {
        op();
      }), this.TRACE_INIT("toFastProperties", () => {
        ro(this);
      });
    });
  }
  tokenize(e, r = this.defaultMode) {
    if (!K(this.lexerDefinitionErrors)) {
      const n = C(this.lexerDefinitionErrors, (i) => i.message).join(`-----------------------
`);
      throw new Error(`Unable to Tokenize because Errors detected in definition of Lexer:
` + n);
    }
    return this.tokenizeInternal(e, r);
  }
  // There is quite a bit of duplication between this and "tokenizeInternalLazy"
  // This is intentional due to performance considerations.
  // this method also used quite a bit of `!` none null assertions because it is too optimized
  // for `tsc` to always understand it is "safe"
  tokenizeInternal(e, r) {
    let n, i, s, o, c, a, u, l, h, d, p, m, g, _, y;
    const T = e, v = T.length;
    let f = 0, E = 0;
    const L = this.hasCustom ? 0 : Math.floor(e.length / 10), R = new Array(L), D = [];
    let Q = this.trackStartLines ? 1 : void 0, F = this.trackStartLines ? 1 : void 0;
    const I = Mp(this.emptyGroups), w = this.trackStartLines, x = this.config.lineTerminatorsPattern;
    let k = 0, O = [], $ = [];
    const U = [], G = [];
    Object.freeze(G);
    let S;
    function A() {
      return O;
    }
    function M(oe) {
      const Ee = Qe(oe), ct = $[Ee];
      return ct === void 0 ? G : ct;
    }
    const B = (oe) => {
      if (U.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
      // So no error should occur.
      oe.tokenType.PUSH_MODE === void 0) {
        const Ee = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(oe);
        D.push({
          offset: oe.startOffset,
          line: oe.startLine,
          column: oe.startColumn,
          length: oe.image.length,
          message: Ee
        });
      } else {
        U.pop();
        const Ee = pt(U);
        O = this.patternIdxToConfig[Ee], $ = this.charCodeToPatternIdxToConfig[Ee], k = O.length;
        const ct = this.canModeBeOptimized[Ee] && this.config.safeMode === !1;
        $ && ct ? S = M : S = A;
      }
    };
    function se(oe) {
      U.push(oe), $ = this.charCodeToPatternIdxToConfig[oe], O = this.patternIdxToConfig[oe], k = O.length, k = O.length;
      const Ee = this.canModeBeOptimized[oe] && this.config.safeMode === !1;
      $ && Ee ? S = M : S = A;
    }
    se.call(this, r);
    let te;
    const Jn = this.config.recoveryEnabled;
    for (; f < v; ) {
      a = null;
      const oe = T.charCodeAt(f), Ee = S(oe), ct = Ee.length;
      for (n = 0; n < ct; n++) {
        te = Ee[n];
        const pe = te.pattern;
        u = null;
        const je = te.short;
        if (je !== !1 ? oe === je && (a = pe) : te.isCustom === !0 ? (y = pe.exec(T, f, R, I), y !== null ? (a = y[0], y.payload !== void 0 && (u = y.payload)) : a = null) : (this.updateLastIndex(pe, f), a = this.match(pe, e, f)), a !== null) {
          if (c = te.longerAlt, c !== void 0) {
            const qe = c.length;
            for (s = 0; s < qe; s++) {
              const $e = O[c[s]], et = $e.pattern;
              if (l = null, $e.isCustom === !0 ? (y = et.exec(T, f, R, I), y !== null ? (o = y[0], y.payload !== void 0 && (l = y.payload)) : o = null) : (this.updateLastIndex(et, f), o = this.match(et, e, f)), o && o.length > a.length) {
                a = o, u = l, te = $e;
                break;
              }
            }
          }
          break;
        }
      }
      if (a !== null) {
        if (h = a.length, d = te.group, d !== void 0 && (p = te.tokenTypeIdx, m = this.createTokenInstance(a, f, p, te.tokenType, Q, F, h), this.handlePayload(m, u), d === !1 ? E = this.addToken(R, E, m) : I[d].push(m)), e = this.chopInput(e, h), f = f + h, F = this.computeNewColumn(F, h), w === !0 && te.canLineTerminator === !0) {
          let pe = 0, je, qe;
          x.lastIndex = 0;
          do
            je = x.test(a), je === !0 && (qe = x.lastIndex - 1, pe++);
          while (je === !0);
          pe !== 0 && (Q = Q + pe, F = h - qe, this.updateTokenEndLineColumnLocation(m, d, qe, pe, Q, F, h));
        }
        this.handleModes(te, B, se, m);
      } else {
        const pe = f, je = Q, qe = F;
        let $e = Jn === !1;
        for (; $e === !1 && f < v; )
          for (e = this.chopInput(e, 1), f++, i = 0; i < k; i++) {
            const et = O[i], wr = et.pattern, Zn = et.short;
            if (Zn !== !1 ? T.charCodeAt(f) === Zn && ($e = !0) : et.isCustom === !0 ? $e = wr.exec(T, f, R, I) !== null : (this.updateLastIndex(wr, f), $e = wr.exec(e) !== null), $e === !0)
              break;
          }
        if (g = f - pe, F = this.computeNewColumn(F, g), _ = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(T, pe, g, je, qe), D.push({
          offset: pe,
          line: je,
          column: qe,
          length: g,
          message: _
        }), Jn === !1)
          break;
      }
    }
    return this.hasCustom || (R.length = E), {
      tokens: R,
      groups: I,
      errors: D
    };
  }
  handleModes(e, r, n, i) {
    if (e.pop === !0) {
      const s = e.push;
      r(i), s !== void 0 && n.call(this, s);
    } else e.push !== void 0 && n.call(this, e.push);
  }
  chopInput(e, r) {
    return e.substring(r);
  }
  updateLastIndex(e, r) {
    e.lastIndex = r;
  }
  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
  updateTokenEndLineColumnLocation(e, r, n, i, s, o, c) {
    let a, u;
    r !== void 0 && (a = n === c - 1, u = a ? -1 : 0, i === 1 && a === !0 || (e.endLine = s + u, e.endColumn = o - 1 + -u));
  }
  computeNewColumn(e, r) {
    return e + r;
  }
  createOffsetOnlyToken(e, r, n, i) {
    return {
      image: e,
      startOffset: r,
      tokenTypeIdx: n,
      tokenType: i
    };
  }
  createStartOnlyToken(e, r, n, i, s, o) {
    return {
      image: e,
      startOffset: r,
      startLine: s,
      startColumn: o,
      tokenTypeIdx: n,
      tokenType: i
    };
  }
  createFullToken(e, r, n, i, s, o, c) {
    return {
      image: e,
      startOffset: r,
      endOffset: r + c - 1,
      startLine: s,
      endLine: s,
      startColumn: o,
      endColumn: o + c - 1,
      tokenTypeIdx: n,
      tokenType: i
    };
  }
  addTokenUsingPush(e, r, n) {
    return e.push(n), r;
  }
  addTokenUsingMemberAccess(e, r, n) {
    return e[r] = n, r++, r;
  }
  handlePayloadNoCustom(e, r) {
  }
  handlePayloadWithCustom(e, r) {
    r !== null && (e.payload = r);
  }
  matchWithTest(e, r, n) {
    return e.test(r) === !0 ? r.substring(n, e.lastIndex) : null;
  }
  matchWithExec(e, r) {
    const n = e.exec(r);
    return n !== null ? n[0] : null;
  }
}
ae.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
ae.NA = /NOT_APPLICABLE/;
function Lt(t) {
  return fo(t) ? t.LABEL : t.name;
}
function fo(t) {
  return he(t.LABEL) && t.LABEL !== "";
}
const Bp = "parent", Vi = "categories", Wi = "label", Ki = "group", Hi = "push_mode", zi = "pop_mode", Yi = "longer_alt", qi = "line_breaks", Xi = "start_chars_hint";
function V(t) {
  return Vp(t);
}
function Vp(t) {
  const e = t.pattern, r = {};
  if (r.name = t.name, We(e) || (r.PATTERN = e), b(t, Bp))
    throw `The parent property is no longer supported.
See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.`;
  return b(t, Vi) && (r.CATEGORIES = t[Vi]), Dt([r]), b(t, Wi) && (r.LABEL = t[Wi]), b(t, Ki) && (r.GROUP = t[Ki]), b(t, zi) && (r.POP_MODE = t[zi]), b(t, Hi) && (r.PUSH_MODE = t[Hi]), b(t, Yi) && (r.LONGER_ALT = t[Yi]), b(t, qi) && (r.LINE_BREAKS = t[qi]), b(t, Xi) && (r.START_CHARS_HINT = t[Xi]), r;
}
const it = V({ name: "EOF", pattern: ae.NA });
Dt([it]);
function Hn(t, e, r, n, i, s, o, c) {
  return {
    image: e,
    startOffset: r,
    endOffset: n,
    startLine: i,
    endLine: s,
    startColumn: o,
    endColumn: c,
    tokenTypeIdx: t.tokenTypeIdx,
    tokenType: t
  };
}
function Wp(t, e) {
  return Ut(t, e);
}
const po = {
  buildMismatchTokenMessage({ expected: t, actual: e, previous: r, ruleName: n }) {
    return `Expecting ${fo(t) ? `--> ${Lt(t)} <--` : `token of type --> ${t.name} <--`} but found --> '${e.image}' <--`;
  },
  buildNotAllInputParsedMessage({ firstRedundant: t, ruleName: e }) {
    return "Redundant input, expecting EOF but found: " + t.image;
  },
  buildNoViableAltMessage({ expectedPathsPerAlt: t, actual: e, previous: r, customUserDescription: n, ruleName: i }) {
    const s = "Expecting: ", o = `
but found: '` + Ie(e).image + "'";
    if (n)
      return s + n + o;
    {
      const c = me(t, (l, h) => l.concat(h), []), a = C(c, (l) => `[${C(l, (h) => Lt(h)).join(", ")}]`), u = `one of these possible Token sequences:
${C(a, (l, h) => `  ${h + 1}. ${l}`).join(`
`)}`;
      return s + u + o;
    }
  },
  buildEarlyExitMessage({ expectedIterationPaths: t, actual: e, customUserDescription: r, ruleName: n }) {
    const i = "Expecting: ", s = `
but found: '` + Ie(e).image + "'";
    if (r)
      return i + r + s;
    {
      const o = `expecting at least one iteration which starts with one of these possible Token sequences::
  <${C(t, (c) => `[${C(c, (a) => Lt(a)).join(",")}]`).join(" ,")}>`;
      return i + o + s;
    }
  }
};
Object.freeze(po);
const Kp = {
  buildRuleNotFoundError(t, e) {
    return "Invalid grammar, reference to a rule which is not defined: ->" + e.nonTerminalName + `<-
inside top level rule: ->` + t.name + "<-";
  }
}, tt = {
  buildDuplicateFoundError(t, e) {
    function r(l) {
      return l instanceof z ? l.terminalType.name : l instanceof ge ? l.nonTerminalName : "";
    }
    const n = t.name, i = Ie(e), s = i.idx, o = ke(i), c = r(i), a = s > 0;
    let u = `->${o}${a ? s : ""}<- ${c ? `with argument: ->${c}<-` : ""}
                  appears more than once (${e.length} times) in the top level rule: ->${n}<-.                  
                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES 
                  `;
    return u = u.replace(/[ \t]+/g, " "), u = u.replace(/\s\s+/g, `
`), u;
  },
  buildNamespaceConflictError(t) {
    return `Namespace conflict found in grammar.
The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${t.name}>.
To resolve this make sure each Terminal and Non-Terminal names are unique
This is easy to accomplish by using the convention that Terminal names start with an uppercase letter
and Non-Terminal names start with a lower case letter.`;
  },
  buildAlternationPrefixAmbiguityError(t) {
    const e = C(t.prefixPath, (n) => Lt(n)).join(", "), r = t.alternation.idx === 0 ? "" : t.alternation.idx;
    return `Ambiguous alternatives: <${t.ambiguityIndices.join(" ,")}> due to common lookahead prefix
in <OR${r}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX
For Further details.`;
  },
  buildAlternationAmbiguityError(t) {
    const e = C(t.prefixPath, (i) => Lt(i)).join(", "), r = t.alternation.idx === 0 ? "" : t.alternation.idx;
    let n = `Ambiguous Alternatives Detected: <${t.ambiguityIndices.join(" ,")}> in <OR${r}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
`;
    return n = n + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES
For Further details.`, n;
  },
  buildEmptyRepetitionError(t) {
    let e = ke(t.repetition);
    return t.repetition.idx !== 0 && (e += t.repetition.idx), `The repetition <${e}> within Rule <${t.topLevelRule.name}> can never consume any tokens.
This could lead to an infinite loop.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildTokenNameError(t) {
    return "deprecated";
  },
  buildEmptyAlternationError(t) {
    return `Ambiguous empty alternative: <${t.emptyChoiceIdx + 1}> in <OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
Only the last alternative may be an empty alternative.`;
  },
  buildTooManyAlternativesError(t) {
    return `An Alternation cannot have more than 256 alternatives:
<OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
 has ${t.alternation.definition.length + 1} alternatives.`;
  },
  buildLeftRecursionError(t) {
    const e = t.topLevelRule.name, r = C(t.leftRecursionPath, (i) => i.name), n = `${e} --> ${r.concat([e]).join(" --> ")}`;
    return `Left Recursion found in grammar.
rule: <${e}> can be invoked from itself (directly or indirectly)
without consuming any Tokens. The grammar path that causes this is: 
 ${n}
 To fix this refactor your grammar to remove the left recursion.
see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildInvalidRuleNameError(t) {
    return "deprecated";
  },
  buildDuplicateRuleNameError(t) {
    let e;
    return t.topLevelRule instanceof mt ? e = t.topLevelRule.name : e = t.topLevelRule, `Duplicate definition, rule: ->${e}<- is already defined in the grammar: ->${t.grammarName}<-`;
  }
};
function Hp(t, e) {
  const r = new zp(t, e);
  return r.resolveRefs(), r.errors;
}
class zp extends gt {
  constructor(e, r) {
    super(), this.nameToTopRule = e, this.errMsgProvider = r, this.errors = [];
  }
  resolveRefs() {
    N(Z(this.nameToTopRule), (e) => {
      this.currTopLevel = e, e.accept(this);
    });
  }
  visitNonTerminal(e) {
    const r = this.nameToTopRule[e.nonTerminalName];
    if (r)
      e.referencedRule = r;
    else {
      const n = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, e);
      this.errors.push({
        message: n,
        type: ce.UNRESOLVED_SUBRULE_REF,
        ruleName: this.currTopLevel.name,
        unresolvedRefName: e.nonTerminalName
      });
    }
  }
}
class Yp extends Cr {
  constructor(e, r) {
    super(), this.topProd = e, this.path = r, this.possibleTokTypes = [], this.nextProductionName = "", this.nextProductionOccurrence = 0, this.found = !1, this.isAtEndOfPath = !1;
  }
  startWalking() {
    if (this.found = !1, this.path.ruleStack[0] !== this.topProd.name)
      throw Error("The path does not start with the walker's top Rule!");
    return this.ruleStack = ie(this.path.ruleStack).reverse(), this.occurrenceStack = ie(this.path.occurrenceStack).reverse(), this.ruleStack.pop(), this.occurrenceStack.pop(), this.updateExpectedNext(), this.walk(this.topProd), this.possibleTokTypes;
  }
  walk(e, r = []) {
    this.found || super.walk(e, r);
  }
  walkProdRef(e, r, n) {
    if (e.referencedRule.name === this.nextProductionName && e.idx === this.nextProductionOccurrence) {
      const i = r.concat(n);
      this.updateExpectedNext(), this.walk(e.referencedRule, i);
    }
  }
  updateExpectedNext() {
    K(this.ruleStack) ? (this.nextProductionName = "", this.nextProductionOccurrence = 0, this.isAtEndOfPath = !0) : (this.nextProductionName = this.ruleStack.pop(), this.nextProductionOccurrence = this.occurrenceStack.pop());
  }
}
class qp extends Yp {
  constructor(e, r) {
    super(e, r), this.path = r, this.nextTerminalName = "", this.nextTerminalOccurrence = 0, this.nextTerminalName = this.path.lastTok.name, this.nextTerminalOccurrence = this.path.lastTokOccurrence;
  }
  walkTerminal(e, r, n) {
    if (this.isAtEndOfPath && e.terminalType.name === this.nextTerminalName && e.idx === this.nextTerminalOccurrence && !this.found) {
      const i = r.concat(n), s = new fe({ definition: i });
      this.possibleTokTypes = xt(s), this.found = !0;
    }
  }
}
class br extends Cr {
  constructor(e, r) {
    super(), this.topRule = e, this.occurrence = r, this.result = {
      token: void 0,
      occurrence: void 0,
      isEndOfRule: void 0
    };
  }
  startWalking() {
    return this.walk(this.topRule), this.result;
  }
}
class Xp extends br {
  walkMany(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkMany(e, r, n);
  }
}
class Qi extends br {
  walkManySep(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkManySep(e, r, n);
  }
}
class Qp extends br {
  walkAtLeastOne(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOne(e, r, n);
  }
}
class Ji extends br {
  walkAtLeastOneSep(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOneSep(e, r, n);
  }
}
function ln(t, e, r = []) {
  r = ie(r);
  let n = [], i = 0;
  function s(c) {
    return c.concat(ne(t, i + 1));
  }
  function o(c) {
    const a = ln(s(c), e, r);
    return n.concat(a);
  }
  for (; r.length < e && i < t.length; ) {
    const c = t[i];
    if (c instanceof fe || c instanceof ge)
      return o(c.definition);
    if (c instanceof le)
      n = o(c.definition);
    else if (c instanceof De) {
      const a = c.definition.concat([
        new ee({
          definition: c.definition
        })
      ]);
      return o(a);
    } else if (c instanceof Fe) {
      const a = [
        new fe({ definition: c.definition }),
        new ee({
          definition: [new z({ terminalType: c.separator })].concat(c.definition)
        })
      ];
      return o(a);
    } else if (c instanceof Me) {
      const a = c.definition.concat([
        new ee({
          definition: [new z({ terminalType: c.separator })].concat(c.definition)
        })
      ]);
      n = o(a);
    } else if (c instanceof ee) {
      const a = c.definition.concat([
        new ee({
          definition: c.definition
        })
      ]);
      n = o(a);
    } else {
      if (c instanceof be)
        return N(c.definition, (a) => {
          K(a.definition) === !1 && (n = o(a.definition));
        }), n;
      if (c instanceof z)
        r.push(c.terminalType);
      else
        throw Error("non exhaustive match");
    }
    i++;
  }
  return n.push({
    partialPath: r,
    suffixDef: ne(t, i)
  }), n;
}
function mo(t, e, r, n) {
  const i = "EXIT_NONE_TERMINAL", s = [i], o = "EXIT_ALTERNATIVE";
  let c = !1;
  const a = e.length, u = a - n - 1, l = [], h = [];
  for (h.push({
    idx: -1,
    def: t,
    ruleStack: [],
    occurrenceStack: []
  }); !K(h); ) {
    const d = h.pop();
    if (d === o) {
      c && pt(h).idx <= u && h.pop();
      continue;
    }
    const p = d.def, m = d.idx, g = d.ruleStack, _ = d.occurrenceStack;
    if (K(p))
      continue;
    const y = p[0];
    if (y === i) {
      const T = {
        idx: m,
        def: ne(p),
        ruleStack: bt(g),
        occurrenceStack: bt(_)
      };
      h.push(T);
    } else if (y instanceof z)
      if (m < a - 1) {
        const T = m + 1, v = e[T];
        if (r(v, y.terminalType)) {
          const f = {
            idx: T,
            def: ne(p),
            ruleStack: g,
            occurrenceStack: _
          };
          h.push(f);
        }
      } else if (m === a - 1)
        l.push({
          nextTokenType: y.terminalType,
          nextTokenOccurrence: y.idx,
          ruleStack: g,
          occurrenceStack: _
        }), c = !0;
      else
        throw Error("non exhaustive match");
    else if (y instanceof ge) {
      const T = ie(g);
      T.push(y.nonTerminalName);
      const v = ie(_);
      v.push(y.idx);
      const f = {
        idx: m,
        def: y.definition.concat(s, ne(p)),
        ruleStack: T,
        occurrenceStack: v
      };
      h.push(f);
    } else if (y instanceof le) {
      const T = {
        idx: m,
        def: ne(p),
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(T), h.push(o);
      const v = {
        idx: m,
        def: y.definition.concat(ne(p)),
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(v);
    } else if (y instanceof De) {
      const T = new ee({
        definition: y.definition,
        idx: y.idx
      }), v = y.definition.concat([T], ne(p)), f = {
        idx: m,
        def: v,
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(f);
    } else if (y instanceof Fe) {
      const T = new z({
        terminalType: y.separator
      }), v = new ee({
        definition: [T].concat(y.definition),
        idx: y.idx
      }), f = y.definition.concat([v], ne(p)), E = {
        idx: m,
        def: f,
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(E);
    } else if (y instanceof Me) {
      const T = {
        idx: m,
        def: ne(p),
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(T), h.push(o);
      const v = new z({
        terminalType: y.separator
      }), f = new ee({
        definition: [v].concat(y.definition),
        idx: y.idx
      }), E = y.definition.concat([f], ne(p)), L = {
        idx: m,
        def: E,
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(L);
    } else if (y instanceof ee) {
      const T = {
        idx: m,
        def: ne(p),
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(T), h.push(o);
      const v = new ee({
        definition: y.definition,
        idx: y.idx
      }), f = y.definition.concat([v], ne(p)), E = {
        idx: m,
        def: f,
        ruleStack: g,
        occurrenceStack: _
      };
      h.push(E);
    } else if (y instanceof be)
      for (let T = y.definition.length - 1; T >= 0; T--) {
        const v = y.definition[T], f = {
          idx: m,
          def: v.definition.concat(ne(p)),
          ruleStack: g,
          occurrenceStack: _
        };
        h.push(f), h.push(o);
      }
    else if (y instanceof fe)
      h.push({
        idx: m,
        def: y.definition.concat(ne(p)),
        ruleStack: g,
        occurrenceStack: _
      });
    else if (y instanceof mt)
      h.push(Jp(y, m, g, _));
    else
      throw Error("non exhaustive match");
  }
  return l;
}
function Jp(t, e, r, n) {
  const i = ie(r);
  i.push(t.name);
  const s = ie(n);
  return s.push(1), {
    idx: e,
    def: t.definition,
    ruleStack: i,
    occurrenceStack: s
  };
}
var Y;
(function(t) {
  t[t.OPTION = 0] = "OPTION", t[t.REPETITION = 1] = "REPETITION", t[t.REPETITION_MANDATORY = 2] = "REPETITION_MANDATORY", t[t.REPETITION_MANDATORY_WITH_SEPARATOR = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR", t[t.REPETITION_WITH_SEPARATOR = 4] = "REPETITION_WITH_SEPARATOR", t[t.ALTERNATION = 5] = "ALTERNATION";
})(Y || (Y = {}));
function go(t) {
  if (t instanceof le || t === "Option")
    return Y.OPTION;
  if (t instanceof ee || t === "Repetition")
    return Y.REPETITION;
  if (t instanceof De || t === "RepetitionMandatory")
    return Y.REPETITION_MANDATORY;
  if (t instanceof Fe || t === "RepetitionMandatoryWithSeparator")
    return Y.REPETITION_MANDATORY_WITH_SEPARATOR;
  if (t instanceof Me || t === "RepetitionWithSeparator")
    return Y.REPETITION_WITH_SEPARATOR;
  if (t instanceof be || t === "Alternation")
    return Y.ALTERNATION;
  throw Error("non exhaustive match");
}
function Zp(t, e, r, n, i, s) {
  const o = zn(t, e, r), c = To(o) ? ur : Ut;
  return s(o, n, c, i);
}
function ed(t, e, r, n, i, s) {
  const o = Yn(t, e, i, r), c = To(o) ? ur : Ut;
  return s(o[0], c, n);
}
function td(t, e, r, n) {
  const i = t.length, s = Oe(t, (o) => Oe(o, (c) => c.length === 1));
  if (e)
    return function(o) {
      const c = C(o, (a) => a.GATE);
      for (let a = 0; a < i; a++) {
        const u = t[a], l = u.length, h = c[a];
        if (!(h !== void 0 && h.call(this) === !1))
          e: for (let d = 0; d < l; d++) {
            const p = u[d], m = p.length;
            for (let g = 0; g < m; g++) {
              const _ = this.LA(g + 1);
              if (r(_, p[g]) === !1)
                continue e;
            }
            return a;
          }
      }
    };
  if (s && !n) {
    const o = C(t, (a) => Re(a)), c = me(o, (a, u, l) => (N(u, (h) => {
      b(a, h.tokenTypeIdx) || (a[h.tokenTypeIdx] = l), N(h.categoryMatches, (d) => {
        b(a, d) || (a[d] = l);
      });
    }), a), {});
    return function() {
      const a = this.LA(1);
      return c[a.tokenTypeIdx];
    };
  } else
    return function() {
      for (let o = 0; o < i; o++) {
        const c = t[o], a = c.length;
        e: for (let u = 0; u < a; u++) {
          const l = c[u], h = l.length;
          for (let d = 0; d < h; d++) {
            const p = this.LA(d + 1);
            if (r(p, l[d]) === !1)
              continue e;
          }
          return o;
        }
      }
    };
}
function rd(t, e, r) {
  const n = Oe(t, (s) => s.length === 1), i = t.length;
  if (n && !r) {
    const s = Re(t);
    if (s.length === 1 && K(s[0].categoryMatches)) {
      const o = s[0].tokenTypeIdx;
      return function() {
        return this.LA(1).tokenTypeIdx === o;
      };
    } else {
      const o = me(s, (c, a, u) => (c[a.tokenTypeIdx] = !0, N(a.categoryMatches, (l) => {
        c[l] = !0;
      }), c), []);
      return function() {
        const c = this.LA(1);
        return o[c.tokenTypeIdx] === !0;
      };
    }
  } else
    return function() {
      e: for (let s = 0; s < i; s++) {
        const o = t[s], c = o.length;
        for (let a = 0; a < c; a++) {
          const u = this.LA(a + 1);
          if (e(u, o[a]) === !1)
            continue e;
        }
        return !0;
      }
      return !1;
    };
}
class nd extends Cr {
  constructor(e, r, n) {
    super(), this.topProd = e, this.targetOccurrence = r, this.targetProdType = n;
  }
  startWalking() {
    return this.walk(this.topProd), this.restDef;
  }
  checkIsTarget(e, r, n, i) {
    return e.idx === this.targetOccurrence && this.targetProdType === r ? (this.restDef = n.concat(i), !0) : !1;
  }
  walkOption(e, r, n) {
    this.checkIsTarget(e, Y.OPTION, r, n) || super.walkOption(e, r, n);
  }
  walkAtLeastOne(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY, r, n) || super.walkOption(e, r, n);
  }
  walkAtLeastOneSep(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY_WITH_SEPARATOR, r, n) || super.walkOption(e, r, n);
  }
  walkMany(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION, r, n) || super.walkOption(e, r, n);
  }
  walkManySep(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION_WITH_SEPARATOR, r, n) || super.walkOption(e, r, n);
  }
}
class Eo extends gt {
  constructor(e, r, n) {
    super(), this.targetOccurrence = e, this.targetProdType = r, this.targetRef = n, this.result = [];
  }
  checkIsTarget(e, r) {
    e.idx === this.targetOccurrence && this.targetProdType === r && (this.targetRef === void 0 || e === this.targetRef) && (this.result = e.definition);
  }
  visitOption(e) {
    this.checkIsTarget(e, Y.OPTION);
  }
  visitRepetition(e) {
    this.checkIsTarget(e, Y.REPETITION);
  }
  visitRepetitionMandatory(e) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY_WITH_SEPARATOR);
  }
  visitRepetitionWithSeparator(e) {
    this.checkIsTarget(e, Y.REPETITION_WITH_SEPARATOR);
  }
  visitAlternation(e) {
    this.checkIsTarget(e, Y.ALTERNATION);
  }
}
function Zi(t) {
  const e = new Array(t);
  for (let r = 0; r < t; r++)
    e[r] = [];
  return e;
}
function $r(t) {
  let e = [""];
  for (let r = 0; r < t.length; r++) {
    const n = t[r], i = [];
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      i.push(o + "_" + n.tokenTypeIdx);
      for (let c = 0; c < n.categoryMatches.length; c++) {
        const a = "_" + n.categoryMatches[c];
        i.push(o + a);
      }
    }
    e = i;
  }
  return e;
}
function id(t, e, r) {
  for (let n = 0; n < t.length; n++) {
    if (n === r)
      continue;
    const i = t[n];
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      if (i[o] === !0)
        return !1;
    }
  }
  return !0;
}
function vo(t, e) {
  const r = C(t, (o) => ln([o], 1)), n = Zi(r.length), i = C(r, (o) => {
    const c = {};
    return N(o, (a) => {
      const u = $r(a.partialPath);
      N(u, (l) => {
        c[l] = !0;
      });
    }), c;
  });
  let s = r;
  for (let o = 1; o <= e; o++) {
    const c = s;
    s = Zi(c.length);
    for (let a = 0; a < c.length; a++) {
      const u = c[a];
      for (let l = 0; l < u.length; l++) {
        const h = u[l].partialPath, d = u[l].suffixDef, p = $r(h);
        if (id(i, p, a) || K(d) || h.length === e) {
          const m = n[a];
          if (hn(m, h) === !1) {
            m.push(h);
            for (let g = 0; g < p.length; g++) {
              const _ = p[g];
              i[a][_] = !0;
            }
          }
        } else {
          const m = ln(d, o + 1, h);
          s[a] = s[a].concat(m), N(m, (g) => {
            const _ = $r(g.partialPath);
            N(_, (y) => {
              i[a][y] = !0;
            });
          });
        }
      }
    }
  }
  return n;
}
function zn(t, e, r, n) {
  const i = new Eo(t, Y.ALTERNATION, n);
  return e.accept(i), vo(i.result, r);
}
function Yn(t, e, r, n) {
  const i = new Eo(t, r);
  e.accept(i);
  const s = i.result, o = new nd(e, t, r).startWalking(), c = new fe({ definition: s }), a = new fe({ definition: o });
  return vo([c, a], n);
}
function hn(t, e) {
  e: for (let r = 0; r < t.length; r++) {
    const n = t[r];
    if (n.length === e.length) {
      for (let i = 0; i < n.length; i++) {
        const s = e[i], o = n[i];
        if (!(s === o || o.categoryMatchesMap[s.tokenTypeIdx] !== void 0))
          continue e;
      }
      return !0;
    }
  }
  return !1;
}
function sd(t, e) {
  return t.length < e.length && Oe(t, (r, n) => {
    const i = e[n];
    return r === i || i.categoryMatchesMap[r.tokenTypeIdx];
  });
}
function To(t) {
  return Oe(t, (e) => Oe(e, (r) => Oe(r, (n) => K(n.categoryMatches))));
}
function od(t) {
  const e = t.lookaheadStrategy.validate({
    rules: t.rules,
    tokenTypes: t.tokenTypes,
    grammarName: t.grammarName
  });
  return C(e, (r) => Object.assign({ type: ce.CUSTOM_LOOKAHEAD_VALIDATION }, r));
}
function ad(t, e, r, n) {
  const i = Te(t, (a) => cd(a, r)), s = _d(t, e, r), o = Te(t, (a) => gd(a, r)), c = Te(t, (a) => hd(a, t, n, r));
  return i.concat(s, o, c);
}
function cd(t, e) {
  const r = new ld();
  t.accept(r);
  const n = r.allProductions, i = yf(n, ud), s = Ce(i, (o) => o.length > 1);
  return C(Z(s), (o) => {
    const c = Ie(o), a = e.buildDuplicateFoundError(t, o), u = ke(c), l = {
      message: a,
      type: ce.DUPLICATE_PRODUCTIONS,
      ruleName: t.name,
      dslName: u,
      occurrence: c.idx
    }, h = _o(c);
    return h && (l.parameter = h), l;
  });
}
function ud(t) {
  return `${ke(t)}_#_${t.idx}_#_${_o(t)}`;
}
function _o(t) {
  return t instanceof z ? t.terminalType.name : t instanceof ge ? t.nonTerminalName : "";
}
class ld extends gt {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitNonTerminal(e) {
    this.allProductions.push(e);
  }
  visitOption(e) {
    this.allProductions.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
  visitAlternation(e) {
    this.allProductions.push(e);
  }
  visitTerminal(e) {
    this.allProductions.push(e);
  }
}
function hd(t, e, r, n) {
  const i = [];
  if (me(e, (s, o) => o.name === t.name ? s + 1 : s, 0) > 1) {
    const s = n.buildDuplicateRuleNameError({
      topLevelRule: t,
      grammarName: r
    });
    i.push({
      message: s,
      type: ce.DUPLICATE_RULE_NAME,
      ruleName: t.name
    });
  }
  return i;
}
function fd(t, e, r) {
  const n = [];
  let i;
  return ue(e, t) || (i = `Invalid rule override, rule: ->${t}<- cannot be overridden in the grammar: ->${r}<-as it is not defined in any of the super grammars `, n.push({
    message: i,
    type: ce.INVALID_RULE_OVERRIDE,
    ruleName: t
  })), n;
}
function yo(t, e, r, n = []) {
  const i = [], s = Zt(e.definition);
  if (K(s))
    return [];
  {
    const o = t.name;
    ue(s, t) && i.push({
      message: r.buildLeftRecursionError({
        topLevelRule: t,
        leftRecursionPath: n
      }),
      type: ce.LEFT_RECURSION,
      ruleName: o
    });
    const c = Lr(s, n.concat([t])), a = Te(c, (u) => {
      const l = ie(n);
      return l.push(u), yo(t, u, r, l);
    });
    return i.concat(a);
  }
}
function Zt(t) {
  let e = [];
  if (K(t))
    return e;
  const r = Ie(t);
  if (r instanceof ge)
    e.push(r.referencedRule);
  else if (r instanceof fe || r instanceof le || r instanceof De || r instanceof Fe || r instanceof Me || r instanceof ee)
    e = e.concat(Zt(r.definition));
  else if (r instanceof be)
    e = Re(C(r.definition, (s) => Zt(s.definition)));
  else if (!(r instanceof z)) throw Error("non exhaustive match");
  const n = sr(r), i = t.length > 1;
  if (n && i) {
    const s = ne(t);
    return e.concat(Zt(s));
  } else
    return e;
}
class qn extends gt {
  constructor() {
    super(...arguments), this.alternations = [];
  }
  visitAlternation(e) {
    this.alternations.push(e);
  }
}
function pd(t, e) {
  const r = new qn();
  t.accept(r);
  const n = r.alternations;
  return Te(n, (i) => {
    const s = bt(i.definition);
    return Te(s, (o, c) => {
      const a = mo([o], [], Ut, 1);
      return K(a) ? [
        {
          message: e.buildEmptyAlternationError({
            topLevelRule: t,
            alternation: i,
            emptyChoiceIdx: c
          }),
          type: ce.NONE_LAST_EMPTY_ALT,
          ruleName: t.name,
          occurrence: i.idx,
          alternative: c + 1
        }
      ] : [];
    });
  });
}
function dd(t, e, r) {
  const n = new qn();
  t.accept(n);
  let i = n.alternations;
  return i = Ir(i, (s) => s.ignoreAmbiguities === !0), Te(i, (s) => {
    const o = s.idx, c = s.maxLookahead || e, a = zn(o, t, c, s), u = vd(a, s, t, r), l = Td(a, s, t, r);
    return u.concat(l);
  });
}
class md extends gt {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
}
function gd(t, e) {
  const r = new qn();
  t.accept(r);
  const n = r.alternations;
  return Te(n, (i) => i.definition.length > 255 ? [
    {
      message: e.buildTooManyAlternativesError({
        topLevelRule: t,
        alternation: i
      }),
      type: ce.TOO_MANY_ALTS,
      ruleName: t.name,
      occurrence: i.idx
    }
  ] : []);
}
function Ed(t, e, r) {
  const n = [];
  return N(t, (i) => {
    const s = new md();
    i.accept(s);
    const o = s.allProductions;
    N(o, (c) => {
      const a = go(c), u = c.maxLookahead || e, l = c.idx, h = Yn(l, i, a, u)[0];
      if (K(Re(h))) {
        const d = r.buildEmptyRepetitionError({
          topLevelRule: i,
          repetition: c
        });
        n.push({
          message: d,
          type: ce.NO_NON_EMPTY_LOOKAHEAD,
          ruleName: i.name
        });
      }
    });
  }), n;
}
function vd(t, e, r, n) {
  const i = [], s = me(t, (o, c, a) => (e.definition[a].ignoreAmbiguities === !0 || N(c, (u) => {
    const l = [a];
    N(t, (h, d) => {
      a !== d && hn(h, u) && // ignore (skip) ambiguities with this "other" alternative
      e.definition[d].ignoreAmbiguities !== !0 && l.push(d);
    }), l.length > 1 && !hn(i, u) && (i.push(u), o.push({
      alts: l,
      path: u
    }));
  }), o), []);
  return C(s, (o) => {
    const c = C(o.alts, (a) => a + 1);
    return {
      message: n.buildAlternationAmbiguityError({
        topLevelRule: r,
        alternation: e,
        ambiguityIndices: c,
        prefixPath: o.path
      }),
      type: ce.AMBIGUOUS_ALTS,
      ruleName: r.name,
      occurrence: e.idx,
      alternatives: o.alts
    };
  });
}
function Td(t, e, r, n) {
  const i = me(t, (s, o, c) => {
    const a = C(o, (u) => ({ idx: c, path: u }));
    return s.concat(a);
  }, []);
  return wt(Te(i, (s) => {
    if (e.definition[s.idx].ignoreAmbiguities === !0)
      return [];
    const o = s.idx, c = s.path, a = Se(i, (u) => (
      // ignore (skip) ambiguities with this "other" alternative
      e.definition[u.idx].ignoreAmbiguities !== !0 && u.idx < o && // checking for strict prefix because identical lookaheads
      // will be be detected using a different validation.
      sd(u.path, c)
    ));
    return C(a, (u) => {
      const l = [u.idx + 1, o + 1], h = e.idx === 0 ? "" : e.idx;
      return {
        message: n.buildAlternationPrefixAmbiguityError({
          topLevelRule: r,
          alternation: e,
          ambiguityIndices: l,
          prefixPath: u.path
        }),
        type: ce.AMBIGUOUS_PREFIX_ALTS,
        ruleName: r.name,
        occurrence: h,
        alternatives: l
      };
    });
  }));
}
function _d(t, e, r) {
  const n = [], i = C(e, (s) => s.name);
  return N(t, (s) => {
    const o = s.name;
    if (ue(i, o)) {
      const c = r.buildNamespaceConflictError(s);
      n.push({
        message: c,
        type: ce.CONFLICT_TOKENS_RULES_NAMESPACE,
        ruleName: o
      });
    }
  }), n;
}
function yd(t) {
  const e = Bn(t, {
    errMsgProvider: Kp
  }), r = {};
  return N(t.rules, (n) => {
    r[n.name] = n;
  }), Hp(r, e.errMsgProvider);
}
function Ad(t) {
  return t = Bn(t, {
    errMsgProvider: tt
  }), ad(t.rules, t.tokenTypes, t.errMsgProvider, t.grammarName);
}
const Ao = "MismatchedTokenException", So = "NoViableAltException", Ro = "EarlyExitException", Oo = "NotAllInputParsedException", Lo = [
  Ao,
  So,
  Ro,
  Oo
];
Object.freeze(Lo);
function lr(t) {
  return ue(Lo, t.name);
}
class kr extends Error {
  constructor(e, r) {
    super(e), this.token = r, this.resyncedTokens = [], Object.setPrototypeOf(this, new.target.prototype), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  }
}
class Io extends kr {
  constructor(e, r, n) {
    super(e, r), this.previousToken = n, this.name = Ao;
  }
}
class Sd extends kr {
  constructor(e, r, n) {
    super(e, r), this.previousToken = n, this.name = So;
  }
}
class Rd extends kr {
  constructor(e, r) {
    super(e, r), this.name = Oo;
  }
}
class Od extends kr {
  constructor(e, r, n) {
    super(e, r), this.previousToken = n, this.name = Ro;
  }
}
const Gr = {}, Co = "InRuleRecoveryException";
class Ld extends Error {
  constructor(e) {
    super(e), this.name = Co;
  }
}
class Id {
  initRecoverable(e) {
    this.firstAfterRepMap = {}, this.resyncFollows = {}, this.recoveryEnabled = b(e, "recoveryEnabled") ? e.recoveryEnabled : Ke.recoveryEnabled, this.recoveryEnabled && (this.attemptInRepetitionRecovery = Cd);
  }
  getTokenToInsert(e) {
    const r = Hn(e, "", NaN, NaN, NaN, NaN, NaN, NaN);
    return r.isInsertedInRecovery = !0, r;
  }
  canTokenTypeBeInsertedInRecovery(e) {
    return !0;
  }
  canTokenTypeBeDeletedInRecovery(e) {
    return !0;
  }
  tryInRepetitionRecovery(e, r, n, i) {
    const s = this.findReSyncTokenType(), o = this.exportLexerState(), c = [];
    let a = !1;
    const u = this.LA(1);
    let l = this.LA(1);
    const h = () => {
      const d = this.LA(0), p = this.errorMessageProvider.buildMismatchTokenMessage({
        expected: i,
        actual: u,
        previous: d,
        ruleName: this.getCurrRuleFullName()
      }), m = new Io(p, u, this.LA(0));
      m.resyncedTokens = bt(c), this.SAVE_ERROR(m);
    };
    for (; !a; )
      if (this.tokenMatcher(l, i)) {
        h();
        return;
      } else if (n.call(this)) {
        h(), e.apply(this, r);
        return;
      } else this.tokenMatcher(l, s) ? a = !0 : (l = this.SKIP_TOKEN(), this.addToResyncTokens(l, c));
    this.importLexerState(o);
  }
  shouldInRepetitionRecoveryBeTried(e, r, n) {
    return !(n === !1 || this.tokenMatcher(this.LA(1), e) || this.isBackTracking() || this.canPerformInRuleRecovery(e, this.getFollowsForInRuleRecovery(e, r)));
  }
  // Error Recovery functionality
  getFollowsForInRuleRecovery(e, r) {
    const n = this.getCurrentGrammarPath(e, r);
    return this.getNextPossibleTokenTypes(n);
  }
  tryInRuleRecovery(e, r) {
    if (this.canRecoverWithSingleTokenInsertion(e, r))
      return this.getTokenToInsert(e);
    if (this.canRecoverWithSingleTokenDeletion(e)) {
      const n = this.SKIP_TOKEN();
      return this.consumeToken(), n;
    }
    throw new Ld("sad sad panda");
  }
  canPerformInRuleRecovery(e, r) {
    return this.canRecoverWithSingleTokenInsertion(e, r) || this.canRecoverWithSingleTokenDeletion(e);
  }
  canRecoverWithSingleTokenInsertion(e, r) {
    if (!this.canTokenTypeBeInsertedInRecovery(e) || K(r))
      return !1;
    const n = this.LA(1);
    return dt(r, (i) => this.tokenMatcher(n, i)) !== void 0;
  }
  canRecoverWithSingleTokenDeletion(e) {
    return this.canTokenTypeBeDeletedInRecovery(e) ? this.tokenMatcher(this.LA(2), e) : !1;
  }
  isInCurrentRuleReSyncSet(e) {
    const r = this.getCurrFollowKey(), n = this.getFollowSetFromFollowKey(r);
    return ue(n, e);
  }
  findReSyncTokenType() {
    const e = this.flattenFollowSet();
    let r = this.LA(1), n = 2;
    for (; ; ) {
      const i = dt(e, (s) => Wp(r, s));
      if (i !== void 0)
        return i;
      r = this.LA(n), n++;
    }
  }
  getCurrFollowKey() {
    if (this.RULE_STACK.length === 1)
      return Gr;
    const e = this.getLastExplicitRuleShortName(), r = this.getLastExplicitRuleOccurrenceIndex(), n = this.getPreviousExplicitRuleShortName();
    return {
      ruleName: this.shortRuleNameToFullName(e),
      idxInCallingRule: r,
      inRule: this.shortRuleNameToFullName(n)
    };
  }
  buildFullFollowKeyStack() {
    const e = this.RULE_STACK, r = this.RULE_OCCURRENCE_STACK;
    return C(e, (n, i) => i === 0 ? Gr : {
      ruleName: this.shortRuleNameToFullName(n),
      idxInCallingRule: r[i],
      inRule: this.shortRuleNameToFullName(e[i - 1])
    });
  }
  flattenFollowSet() {
    const e = C(this.buildFullFollowKeyStack(), (r) => this.getFollowSetFromFollowKey(r));
    return Re(e);
  }
  getFollowSetFromFollowKey(e) {
    if (e === Gr)
      return [it];
    const r = e.ruleName + e.idxInCallingRule + no + e.inRule;
    return this.resyncFollows[r];
  }
  // It does not make any sense to include a virtual EOF token in the list of resynced tokens
  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
  addToResyncTokens(e, r) {
    return this.tokenMatcher(e, it) || r.push(e), r;
  }
  reSyncTo(e) {
    const r = [];
    let n = this.LA(1);
    for (; this.tokenMatcher(n, e) === !1; )
      n = this.SKIP_TOKEN(), this.addToResyncTokens(n, r);
    return bt(r);
  }
  attemptInRepetitionRecovery(e, r, n, i, s, o, c) {
  }
  getCurrentGrammarPath(e, r) {
    const n = this.getHumanReadableRuleStack(), i = ie(this.RULE_OCCURRENCE_STACK);
    return {
      ruleStack: n,
      occurrenceStack: i,
      lastTok: e,
      lastTokOccurrence: r
    };
  }
  getHumanReadableRuleStack() {
    return C(this.RULE_STACK, (e) => this.shortRuleNameToFullName(e));
  }
}
function Cd(t, e, r, n, i, s, o) {
  const c = this.getKeyForAutomaticLookahead(n, i);
  let a = this.firstAfterRepMap[c];
  if (a === void 0) {
    const d = this.getCurrRuleFullName(), p = this.getGAstProductions()[d];
    a = new s(p, i).startWalking(), this.firstAfterRepMap[c] = a;
  }
  let u = a.token, l = a.occurrence;
  const h = a.isEndOfRule;
  this.RULE_STACK.length === 1 && h && u === void 0 && (u = it, l = 1), !(u === void 0 || l === void 0) && this.shouldInRepetitionRecoveryBeTried(u, l, o) && this.tryInRepetitionRecovery(t, e, r, u);
}
const Md = 4, Ze = 8, Mo = 1 << Ze, bo = 2 << Ze, fn = 3 << Ze, pn = 4 << Ze, dn = 5 << Ze, er = 6 << Ze;
function Br(t, e, r) {
  return r | e | t;
}
class bd {
  constructor(e) {
    var r;
    this.maxLookahead = (r = e == null ? void 0 : e.maxLookahead) !== null && r !== void 0 ? r : Ke.maxLookahead;
  }
  validate(e) {
    const r = this.validateNoLeftRecursion(e.rules);
    if (K(r)) {
      const n = this.validateEmptyOrAlternatives(e.rules), i = this.validateAmbiguousAlternationAlternatives(e.rules, this.maxLookahead), s = this.validateSomeNonEmptyLookaheadPath(e.rules, this.maxLookahead);
      return [
        ...r,
        ...n,
        ...i,
        ...s
      ];
    }
    return r;
  }
  validateNoLeftRecursion(e) {
    return Te(e, (r) => yo(r, r, tt));
  }
  validateEmptyOrAlternatives(e) {
    return Te(e, (r) => pd(r, tt));
  }
  validateAmbiguousAlternationAlternatives(e, r) {
    return Te(e, (n) => dd(n, r, tt));
  }
  validateSomeNonEmptyLookaheadPath(e, r) {
    return Ed(e, r, tt);
  }
  buildLookaheadForAlternation(e) {
    return Zp(e.prodOccurrence, e.rule, e.maxLookahead, e.hasPredicates, e.dynamicTokensEnabled, td);
  }
  buildLookaheadForOptional(e) {
    return ed(e.prodOccurrence, e.rule, e.maxLookahead, e.dynamicTokensEnabled, go(e.prodType), rd);
  }
}
class kd {
  initLooksAhead(e) {
    this.dynamicTokensEnabled = b(e, "dynamicTokensEnabled") ? e.dynamicTokensEnabled : Ke.dynamicTokensEnabled, this.maxLookahead = b(e, "maxLookahead") ? e.maxLookahead : Ke.maxLookahead, this.lookaheadStrategy = b(e, "lookaheadStrategy") ? e.lookaheadStrategy : new bd({ maxLookahead: this.maxLookahead }), this.lookAheadFuncsCache = /* @__PURE__ */ new Map();
  }
  preComputeLookaheadFunctions(e) {
    N(e, (r) => {
      this.TRACE_INIT(`${r.name} Rule Lookahead`, () => {
        const { alternation: n, repetition: i, option: s, repetitionMandatory: o, repetitionMandatoryWithSeparator: c, repetitionWithSeparator: a } = Pd(r);
        N(n, (u) => {
          const l = u.idx === 0 ? "" : u.idx;
          this.TRACE_INIT(`${ke(u)}${l}`, () => {
            const h = this.lookaheadStrategy.buildLookaheadForAlternation({
              prodOccurrence: u.idx,
              rule: r,
              maxLookahead: u.maxLookahead || this.maxLookahead,
              hasPredicates: u.hasPredicates,
              dynamicTokensEnabled: this.dynamicTokensEnabled
            }), d = Br(this.fullRuleNameToShort[r.name], Mo, u.idx);
            this.setLaFuncCache(d, h);
          });
        }), N(i, (u) => {
          this.computeLookaheadFunc(r, u.idx, fn, "Repetition", u.maxLookahead, ke(u));
        }), N(s, (u) => {
          this.computeLookaheadFunc(r, u.idx, bo, "Option", u.maxLookahead, ke(u));
        }), N(o, (u) => {
          this.computeLookaheadFunc(r, u.idx, pn, "RepetitionMandatory", u.maxLookahead, ke(u));
        }), N(c, (u) => {
          this.computeLookaheadFunc(r, u.idx, er, "RepetitionMandatoryWithSeparator", u.maxLookahead, ke(u));
        }), N(a, (u) => {
          this.computeLookaheadFunc(r, u.idx, dn, "RepetitionWithSeparator", u.maxLookahead, ke(u));
        });
      });
    });
  }
  computeLookaheadFunc(e, r, n, i, s, o) {
    this.TRACE_INIT(`${o}${r === 0 ? "" : r}`, () => {
      const c = this.lookaheadStrategy.buildLookaheadForOptional({
        prodOccurrence: r,
        rule: e,
        maxLookahead: s || this.maxLookahead,
        dynamicTokensEnabled: this.dynamicTokensEnabled,
        prodType: i
      }), a = Br(this.fullRuleNameToShort[e.name], n, r);
      this.setLaFuncCache(a, c);
    });
  }
  // this actually returns a number, but it is always used as a string (object prop key)
  getKeyForAutomaticLookahead(e, r) {
    const n = this.getLastExplicitRuleShortName();
    return Br(n, e, r);
  }
  getLaFuncFromCache(e) {
    return this.lookAheadFuncsCache.get(e);
  }
  /* istanbul ignore next */
  setLaFuncCache(e, r) {
    this.lookAheadFuncsCache.set(e, r);
  }
}
class Nd extends gt {
  constructor() {
    super(...arguments), this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  reset() {
    this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  visitOption(e) {
    this.dslMethods.option.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.dslMethods.repetitionWithSeparator.push(e);
  }
  visitRepetitionMandatory(e) {
    this.dslMethods.repetitionMandatory.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.dslMethods.repetitionMandatoryWithSeparator.push(e);
  }
  visitRepetition(e) {
    this.dslMethods.repetition.push(e);
  }
  visitAlternation(e) {
    this.dslMethods.alternation.push(e);
  }
}
const Wt = new Nd();
function Pd(t) {
  Wt.reset(), t.accept(Wt);
  const e = Wt.dslMethods;
  return Wt.reset(), e;
}
function es(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.endOffset = e.endOffset) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset);
}
function ts(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.startColumn = e.startColumn, t.startLine = e.startLine, t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine);
}
function wd(t, e, r) {
  t.children[r] === void 0 ? t.children[r] = [e] : t.children[r].push(e);
}
function xd(t, e, r) {
  t.children[e] === void 0 ? t.children[e] = [r] : t.children[e].push(r);
}
const Ud = "name";
function ko(t, e) {
  Object.defineProperty(t, Ud, {
    enumerable: !1,
    configurable: !0,
    writable: !1,
    value: e
  });
}
function Dd(t, e) {
  const r = Ae(t), n = r.length;
  for (let i = 0; i < n; i++) {
    const s = r[i], o = t[s], c = o.length;
    for (let a = 0; a < c; a++) {
      const u = o[a];
      u.tokenTypeIdx === void 0 && this[u.name](u.children, e);
    }
  }
}
function Fd(t, e) {
  const r = function() {
  };
  ko(r, t + "BaseSemantics");
  const n = {
    visit: function(i, s) {
      if (j(i) && (i = i[0]), !We(i))
        return this[i.name](i.children, s);
    },
    validateVisitor: function() {
      const i = $d(this, e);
      if (!K(i)) {
        const s = C(i, (o) => o.msg);
        throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:
	${s.join(`

`).replace(/\n/g, `
	`)}`);
      }
    }
  };
  return r.prototype = n, r.prototype.constructor = r, r._RULE_NAMES = e, r;
}
function jd(t, e, r) {
  const n = function() {
  };
  ko(n, t + "BaseSemanticsWithDefaults");
  const i = Object.create(r.prototype);
  return N(e, (s) => {
    i[s] = Dd;
  }), n.prototype = i, n.prototype.constructor = n, n;
}
var mn;
(function(t) {
  t[t.REDUNDANT_METHOD = 0] = "REDUNDANT_METHOD", t[t.MISSING_METHOD = 1] = "MISSING_METHOD";
})(mn || (mn = {}));
function $d(t, e) {
  return Gd(t, e);
}
function Gd(t, e) {
  const r = Se(e, (i) => He(t[i]) === !1), n = C(r, (i) => ({
    msg: `Missing visitor method: <${i}> on ${t.constructor.name} CST Visitor.`,
    type: mn.MISSING_METHOD,
    methodName: i
  }));
  return wt(n);
}
class Bd {
  initTreeBuilder(e) {
    if (this.CST_STACK = [], this.outputCst = e.outputCst, this.nodeLocationTracking = b(e, "nodeLocationTracking") ? e.nodeLocationTracking : Ke.nodeLocationTracking, !this.outputCst)
      this.cstInvocationStateUpdate = J, this.cstFinallyStateUpdate = J, this.cstPostTerminal = J, this.cstPostNonTerminal = J, this.cstPostRule = J;
    else if (/full/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = ts, this.setNodeLocationFromNode = ts, this.cstPostRule = J, this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery) : (this.setNodeLocationFromToken = J, this.setNodeLocationFromNode = J, this.cstPostRule = this.cstPostRuleFull, this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular);
    else if (/onlyOffset/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = es, this.setNodeLocationFromNode = es, this.cstPostRule = J, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery) : (this.setNodeLocationFromToken = J, this.setNodeLocationFromNode = J, this.cstPostRule = this.cstPostRuleOnlyOffset, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular);
    else if (/none/i.test(this.nodeLocationTracking))
      this.setNodeLocationFromToken = J, this.setNodeLocationFromNode = J, this.cstPostRule = J, this.setInitialNodeLocation = J;
    else
      throw Error(`Invalid <nodeLocationTracking> config option: "${e.nodeLocationTracking}"`);
  }
  setInitialNodeLocationOnlyOffsetRecovery(e) {
    e.location = {
      startOffset: NaN,
      endOffset: NaN
    };
  }
  setInitialNodeLocationOnlyOffsetRegular(e) {
    e.location = {
      // without error recovery the starting Location of a new CstNode is guaranteed
      // To be the next Token's startOffset (for valid inputs).
      // For invalid inputs there won't be any CSTOutput so this potential
      // inaccuracy does not matter
      startOffset: this.LA(1).startOffset,
      endOffset: NaN
    };
  }
  setInitialNodeLocationFullRecovery(e) {
    e.location = {
      startOffset: NaN,
      startLine: NaN,
      startColumn: NaN,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  /**
       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work
  
       * @param cstNode
       */
  setInitialNodeLocationFullRegular(e) {
    const r = this.LA(1);
    e.location = {
      startOffset: r.startOffset,
      startLine: r.startLine,
      startColumn: r.startColumn,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  cstInvocationStateUpdate(e) {
    const r = {
      name: e,
      children: /* @__PURE__ */ Object.create(null)
    };
    this.setInitialNodeLocation(r), this.CST_STACK.push(r);
  }
  cstFinallyStateUpdate() {
    this.CST_STACK.pop();
  }
  cstPostRuleFull(e) {
    const r = this.LA(0), n = e.location;
    n.startOffset <= r.startOffset ? (n.endOffset = r.endOffset, n.endLine = r.endLine, n.endColumn = r.endColumn) : (n.startOffset = NaN, n.startLine = NaN, n.startColumn = NaN);
  }
  cstPostRuleOnlyOffset(e) {
    const r = this.LA(0), n = e.location;
    n.startOffset <= r.startOffset ? n.endOffset = r.endOffset : n.startOffset = NaN;
  }
  cstPostTerminal(e, r) {
    const n = this.CST_STACK[this.CST_STACK.length - 1];
    wd(n, r, e), this.setNodeLocationFromToken(n.location, r);
  }
  cstPostNonTerminal(e, r) {
    const n = this.CST_STACK[this.CST_STACK.length - 1];
    xd(n, r, e), this.setNodeLocationFromNode(n.location, e.location);
  }
  getBaseCstVisitorConstructor() {
    if (We(this.baseCstVisitorConstructor)) {
      const e = Fd(this.className, Ae(this.gastProductionsCache));
      return this.baseCstVisitorConstructor = e, e;
    }
    return this.baseCstVisitorConstructor;
  }
  getBaseCstVisitorConstructorWithDefaults() {
    if (We(this.baseCstVisitorWithDefaultsConstructor)) {
      const e = jd(this.className, Ae(this.gastProductionsCache), this.getBaseCstVisitorConstructor());
      return this.baseCstVisitorWithDefaultsConstructor = e, e;
    }
    return this.baseCstVisitorWithDefaultsConstructor;
  }
  getLastExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 1];
  }
  getPreviousExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 2];
  }
  getLastExplicitRuleOccurrenceIndex() {
    const e = this.RULE_OCCURRENCE_STACK;
    return e[e.length - 1];
  }
}
class Vd {
  initLexerAdapter() {
    this.tokVector = [], this.tokVectorLength = 0, this.currIdx = -1;
  }
  set input(e) {
    if (this.selfAnalysisDone !== !0)
      throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
    this.reset(), this.tokVector = e, this.tokVectorLength = e.length;
  }
  get input() {
    return this.tokVector;
  }
  // skips a token and returns the next token
  SKIP_TOKEN() {
    return this.currIdx <= this.tokVector.length - 2 ? (this.consumeToken(), this.LA(1)) : fr;
  }
  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
  // or lexers dependent on parser context.
  LA(e) {
    const r = this.currIdx + e;
    return r < 0 || this.tokVectorLength <= r ? fr : this.tokVector[r];
  }
  consumeToken() {
    this.currIdx++;
  }
  exportLexerState() {
    return this.currIdx;
  }
  importLexerState(e) {
    this.currIdx = e;
  }
  resetLexerState() {
    this.currIdx = -1;
  }
  moveToTerminatedState() {
    this.currIdx = this.tokVector.length - 1;
  }
  getLexerPosition() {
    return this.exportLexerState();
  }
}
class Wd {
  ACTION(e) {
    return e.call(this);
  }
  consume(e, r, n) {
    return this.consumeInternal(r, e, n);
  }
  subrule(e, r, n) {
    return this.subruleInternal(r, e, n);
  }
  option(e, r) {
    return this.optionInternal(r, e);
  }
  or(e, r) {
    return this.orInternal(r, e);
  }
  many(e, r) {
    return this.manyInternal(e, r);
  }
  atLeastOne(e, r) {
    return this.atLeastOneInternal(e, r);
  }
  CONSUME(e, r) {
    return this.consumeInternal(e, 0, r);
  }
  CONSUME1(e, r) {
    return this.consumeInternal(e, 1, r);
  }
  CONSUME2(e, r) {
    return this.consumeInternal(e, 2, r);
  }
  CONSUME3(e, r) {
    return this.consumeInternal(e, 3, r);
  }
  CONSUME4(e, r) {
    return this.consumeInternal(e, 4, r);
  }
  CONSUME5(e, r) {
    return this.consumeInternal(e, 5, r);
  }
  CONSUME6(e, r) {
    return this.consumeInternal(e, 6, r);
  }
  CONSUME7(e, r) {
    return this.consumeInternal(e, 7, r);
  }
  CONSUME8(e, r) {
    return this.consumeInternal(e, 8, r);
  }
  CONSUME9(e, r) {
    return this.consumeInternal(e, 9, r);
  }
  SUBRULE(e, r) {
    return this.subruleInternal(e, 0, r);
  }
  SUBRULE1(e, r) {
    return this.subruleInternal(e, 1, r);
  }
  SUBRULE2(e, r) {
    return this.subruleInternal(e, 2, r);
  }
  SUBRULE3(e, r) {
    return this.subruleInternal(e, 3, r);
  }
  SUBRULE4(e, r) {
    return this.subruleInternal(e, 4, r);
  }
  SUBRULE5(e, r) {
    return this.subruleInternal(e, 5, r);
  }
  SUBRULE6(e, r) {
    return this.subruleInternal(e, 6, r);
  }
  SUBRULE7(e, r) {
    return this.subruleInternal(e, 7, r);
  }
  SUBRULE8(e, r) {
    return this.subruleInternal(e, 8, r);
  }
  SUBRULE9(e, r) {
    return this.subruleInternal(e, 9, r);
  }
  OPTION(e) {
    return this.optionInternal(e, 0);
  }
  OPTION1(e) {
    return this.optionInternal(e, 1);
  }
  OPTION2(e) {
    return this.optionInternal(e, 2);
  }
  OPTION3(e) {
    return this.optionInternal(e, 3);
  }
  OPTION4(e) {
    return this.optionInternal(e, 4);
  }
  OPTION5(e) {
    return this.optionInternal(e, 5);
  }
  OPTION6(e) {
    return this.optionInternal(e, 6);
  }
  OPTION7(e) {
    return this.optionInternal(e, 7);
  }
  OPTION8(e) {
    return this.optionInternal(e, 8);
  }
  OPTION9(e) {
    return this.optionInternal(e, 9);
  }
  OR(e) {
    return this.orInternal(e, 0);
  }
  OR1(e) {
    return this.orInternal(e, 1);
  }
  OR2(e) {
    return this.orInternal(e, 2);
  }
  OR3(e) {
    return this.orInternal(e, 3);
  }
  OR4(e) {
    return this.orInternal(e, 4);
  }
  OR5(e) {
    return this.orInternal(e, 5);
  }
  OR6(e) {
    return this.orInternal(e, 6);
  }
  OR7(e) {
    return this.orInternal(e, 7);
  }
  OR8(e) {
    return this.orInternal(e, 8);
  }
  OR9(e) {
    return this.orInternal(e, 9);
  }
  MANY(e) {
    this.manyInternal(0, e);
  }
  MANY1(e) {
    this.manyInternal(1, e);
  }
  MANY2(e) {
    this.manyInternal(2, e);
  }
  MANY3(e) {
    this.manyInternal(3, e);
  }
  MANY4(e) {
    this.manyInternal(4, e);
  }
  MANY5(e) {
    this.manyInternal(5, e);
  }
  MANY6(e) {
    this.manyInternal(6, e);
  }
  MANY7(e) {
    this.manyInternal(7, e);
  }
  MANY8(e) {
    this.manyInternal(8, e);
  }
  MANY9(e) {
    this.manyInternal(9, e);
  }
  MANY_SEP(e) {
    this.manySepFirstInternal(0, e);
  }
  MANY_SEP1(e) {
    this.manySepFirstInternal(1, e);
  }
  MANY_SEP2(e) {
    this.manySepFirstInternal(2, e);
  }
  MANY_SEP3(e) {
    this.manySepFirstInternal(3, e);
  }
  MANY_SEP4(e) {
    this.manySepFirstInternal(4, e);
  }
  MANY_SEP5(e) {
    this.manySepFirstInternal(5, e);
  }
  MANY_SEP6(e) {
    this.manySepFirstInternal(6, e);
  }
  MANY_SEP7(e) {
    this.manySepFirstInternal(7, e);
  }
  MANY_SEP8(e) {
    this.manySepFirstInternal(8, e);
  }
  MANY_SEP9(e) {
    this.manySepFirstInternal(9, e);
  }
  AT_LEAST_ONE(e) {
    this.atLeastOneInternal(0, e);
  }
  AT_LEAST_ONE1(e) {
    return this.atLeastOneInternal(1, e);
  }
  AT_LEAST_ONE2(e) {
    this.atLeastOneInternal(2, e);
  }
  AT_LEAST_ONE3(e) {
    this.atLeastOneInternal(3, e);
  }
  AT_LEAST_ONE4(e) {
    this.atLeastOneInternal(4, e);
  }
  AT_LEAST_ONE5(e) {
    this.atLeastOneInternal(5, e);
  }
  AT_LEAST_ONE6(e) {
    this.atLeastOneInternal(6, e);
  }
  AT_LEAST_ONE7(e) {
    this.atLeastOneInternal(7, e);
  }
  AT_LEAST_ONE8(e) {
    this.atLeastOneInternal(8, e);
  }
  AT_LEAST_ONE9(e) {
    this.atLeastOneInternal(9, e);
  }
  AT_LEAST_ONE_SEP(e) {
    this.atLeastOneSepFirstInternal(0, e);
  }
  AT_LEAST_ONE_SEP1(e) {
    this.atLeastOneSepFirstInternal(1, e);
  }
  AT_LEAST_ONE_SEP2(e) {
    this.atLeastOneSepFirstInternal(2, e);
  }
  AT_LEAST_ONE_SEP3(e) {
    this.atLeastOneSepFirstInternal(3, e);
  }
  AT_LEAST_ONE_SEP4(e) {
    this.atLeastOneSepFirstInternal(4, e);
  }
  AT_LEAST_ONE_SEP5(e) {
    this.atLeastOneSepFirstInternal(5, e);
  }
  AT_LEAST_ONE_SEP6(e) {
    this.atLeastOneSepFirstInternal(6, e);
  }
  AT_LEAST_ONE_SEP7(e) {
    this.atLeastOneSepFirstInternal(7, e);
  }
  AT_LEAST_ONE_SEP8(e) {
    this.atLeastOneSepFirstInternal(8, e);
  }
  AT_LEAST_ONE_SEP9(e) {
    this.atLeastOneSepFirstInternal(9, e);
  }
  RULE(e, r, n = pr) {
    if (ue(this.definedRulesNames, e)) {
      const s = {
        message: tt.buildDuplicateRuleNameError({
          topLevelRule: e,
          grammarName: this.className
        }),
        type: ce.DUPLICATE_RULE_NAME,
        ruleName: e
      };
      this.definitionErrors.push(s);
    }
    this.definedRulesNames.push(e);
    const i = this.defineRule(e, r, n);
    return this[e] = i, i;
  }
  OVERRIDE_RULE(e, r, n = pr) {
    const i = fd(e, this.definedRulesNames, this.className);
    this.definitionErrors = this.definitionErrors.concat(i);
    const s = this.defineRule(e, r, n);
    return this[e] = s, s;
  }
  BACKTRACK(e, r) {
    return function() {
      this.isBackTrackingStack.push(1);
      const n = this.saveRecogState();
      try {
        return e.apply(this, r), !0;
      } catch (i) {
        if (lr(i))
          return !1;
        throw i;
      } finally {
        this.reloadRecogState(n), this.isBackTrackingStack.pop();
      }
    };
  }
  // GAST export APIs
  getGAstProductions() {
    return this.gastProductionsCache;
  }
  getSerializedGastProductions() {
    return Hf(Z(this.gastProductionsCache));
  }
}
class Kd {
  initRecognizerEngine(e, r) {
    if (this.className = this.constructor.name, this.shortRuleNameToFull = {}, this.fullRuleNameToShort = {}, this.ruleShortNameIdx = 256, this.tokenMatcher = ur, this.subruleIdx = 0, this.definedRulesNames = [], this.tokensMap = {}, this.isBackTrackingStack = [], this.RULE_STACK = [], this.RULE_OCCURRENCE_STACK = [], this.gastProductionsCache = {}, b(r, "serializedGrammar"))
      throw Error(`The Parser's configuration can no longer contain a <serializedGrammar> property.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0
	For Further details.`);
    if (j(e)) {
      if (K(e))
        throw Error(`A Token Vocabulary cannot be empty.
	Note that the first argument for the parser constructor
	is no longer a Token vector (since v4.0).`);
      if (typeof e[0].startOffset == "number")
        throw Error(`The Parser constructor no longer accepts a token vector as the first argument.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0
	For Further details.`);
    }
    if (j(e))
      this.tokensMap = me(e, (s, o) => (s[o.name] = o, s), {});
    else if (b(e, "modes") && Oe(Re(Z(e.modes)), $p)) {
      const s = Re(Z(e.modes)), o = Vn(s);
      this.tokensMap = me(o, (c, a) => (c[a.name] = a, c), {});
    } else if (ye(e))
      this.tokensMap = ie(e);
    else
      throw new Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
    this.tokensMap.EOF = it;
    const n = b(e, "modes") ? Re(Z(e.modes)) : Z(e), i = Oe(n, (s) => K(s.categoryMatches));
    this.tokenMatcher = i ? ur : Ut, Dt(Z(this.tokensMap));
  }
  defineRule(e, r, n) {
    if (this.selfAnalysisDone)
      throw Error(`Grammar rule <${e}> may not be defined after the 'performSelfAnalysis' method has been called'
Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);
    const i = b(n, "resyncEnabled") ? n.resyncEnabled : pr.resyncEnabled, s = b(n, "recoveryValueFunc") ? n.recoveryValueFunc : pr.recoveryValueFunc, o = this.ruleShortNameIdx << Md + Ze;
    this.ruleShortNameIdx++, this.shortRuleNameToFull[o] = e, this.fullRuleNameToShort[e] = o;
    let c;
    return this.outputCst === !0 ? c = function(...a) {
      try {
        this.ruleInvocationStateUpdate(o, e, this.subruleIdx), r.apply(this, a);
        const u = this.CST_STACK[this.CST_STACK.length - 1];
        return this.cstPostRule(u), u;
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    } : c = function(...a) {
      try {
        return this.ruleInvocationStateUpdate(o, e, this.subruleIdx), r.apply(this, a);
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    }, Object.assign(c, { ruleName: e, originalGrammarAction: r });
  }
  invokeRuleCatch(e, r, n) {
    const i = this.RULE_STACK.length === 1, s = r && !this.isBackTracking() && this.recoveryEnabled;
    if (lr(e)) {
      const o = e;
      if (s) {
        const c = this.findReSyncTokenType();
        if (this.isInCurrentRuleReSyncSet(c))
          if (o.resyncedTokens = this.reSyncTo(c), this.outputCst) {
            const a = this.CST_STACK[this.CST_STACK.length - 1];
            return a.recoveredNode = !0, a;
          } else
            return n(e);
        else {
          if (this.outputCst) {
            const a = this.CST_STACK[this.CST_STACK.length - 1];
            a.recoveredNode = !0, o.partialCstResult = a;
          }
          throw o;
        }
      } else {
        if (i)
          return this.moveToTerminatedState(), n(e);
        throw o;
      }
    } else
      throw e;
  }
  // Implementation of parsing DSL
  optionInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(bo, r);
    return this.optionInternalLogic(e, r, n);
  }
  optionInternalLogic(e, r, n) {
    let i = this.getLaFuncFromCache(n), s;
    if (typeof e != "function") {
      s = e.DEF;
      const o = e.GATE;
      if (o !== void 0) {
        const c = i;
        i = () => o.call(this) && c.call(this);
      }
    } else
      s = e;
    if (i.call(this) === !0)
      return s.call(this);
  }
  atLeastOneInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(pn, e);
    return this.atLeastOneInternalLogic(e, r, n);
  }
  atLeastOneInternalLogic(e, r, n) {
    let i = this.getLaFuncFromCache(n), s;
    if (typeof r != "function") {
      s = r.DEF;
      const o = r.GATE;
      if (o !== void 0) {
        const c = i;
        i = () => o.call(this) && c.call(this);
      }
    } else
      s = r;
    if (i.call(this) === !0) {
      let o = this.doSingleRepetition(s);
      for (; i.call(this) === !0 && o === !0; )
        o = this.doSingleRepetition(s);
    } else
      throw this.raiseEarlyExitException(e, Y.REPETITION_MANDATORY, r.ERR_MSG);
    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [e, r], i, pn, e, Qp);
  }
  atLeastOneSepFirstInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(er, e);
    this.atLeastOneSepFirstInternalLogic(e, r, n);
  }
  atLeastOneSepFirstInternalLogic(e, r, n) {
    const i = r.DEF, s = r.SEP;
    if (this.getLaFuncFromCache(n).call(this) === !0) {
      i.call(this);
      const o = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        o,
        i,
        Ji
      ], o, er, e, Ji);
    } else
      throw this.raiseEarlyExitException(e, Y.REPETITION_MANDATORY_WITH_SEPARATOR, r.ERR_MSG);
  }
  manyInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(fn, e);
    return this.manyInternalLogic(e, r, n);
  }
  manyInternalLogic(e, r, n) {
    let i = this.getLaFuncFromCache(n), s;
    if (typeof r != "function") {
      s = r.DEF;
      const c = r.GATE;
      if (c !== void 0) {
        const a = i;
        i = () => c.call(this) && a.call(this);
      }
    } else
      s = r;
    let o = !0;
    for (; i.call(this) === !0 && o === !0; )
      o = this.doSingleRepetition(s);
    this.attemptInRepetitionRecovery(
      this.manyInternal,
      [e, r],
      i,
      fn,
      e,
      Xp,
      // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
      // An infinite loop cannot occur as:
      // - Either the lookahead is guaranteed to consume something (Single Token Separator)
      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
      o
    );
  }
  manySepFirstInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(dn, e);
    this.manySepFirstInternalLogic(e, r, n);
  }
  manySepFirstInternalLogic(e, r, n) {
    const i = r.DEF, s = r.SEP;
    if (this.getLaFuncFromCache(n).call(this) === !0) {
      i.call(this);
      const o = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        o,
        i,
        Qi
      ], o, dn, e, Qi);
    }
  }
  repetitionSepSecondInternal(e, r, n, i, s) {
    for (; n(); )
      this.CONSUME(r), i.call(this);
    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
      e,
      r,
      n,
      i,
      s
    ], n, er, e, s);
  }
  doSingleRepetition(e) {
    const r = this.getLexerPosition();
    return e.call(this), this.getLexerPosition() > r;
  }
  orInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(Mo, r), i = j(e) ? e : e.DEF, s = this.getLaFuncFromCache(n).call(this, i);
    if (s !== void 0)
      return i[s].ALT.call(this);
    this.raiseNoAltException(r, e.ERR_MSG);
  }
  ruleFinallyStateUpdate() {
    if (this.RULE_STACK.pop(), this.RULE_OCCURRENCE_STACK.pop(), this.cstFinallyStateUpdate(), this.RULE_STACK.length === 0 && this.isAtEndOfInput() === !1) {
      const e = this.LA(1), r = this.errorMessageProvider.buildNotAllInputParsedMessage({
        firstRedundant: e,
        ruleName: this.getCurrRuleFullName()
      });
      this.SAVE_ERROR(new Rd(r, e));
    }
  }
  subruleInternal(e, r, n) {
    let i;
    try {
      const s = n !== void 0 ? n.ARGS : void 0;
      return this.subruleIdx = r, i = e.apply(this, s), this.cstPostNonTerminal(i, n !== void 0 && n.LABEL !== void 0 ? n.LABEL : e.ruleName), i;
    } catch (s) {
      throw this.subruleInternalError(s, n, e.ruleName);
    }
  }
  subruleInternalError(e, r, n) {
    throw lr(e) && e.partialCstResult !== void 0 && (this.cstPostNonTerminal(e.partialCstResult, r !== void 0 && r.LABEL !== void 0 ? r.LABEL : n), delete e.partialCstResult), e;
  }
  consumeInternal(e, r, n) {
    let i;
    try {
      const s = this.LA(1);
      this.tokenMatcher(s, e) === !0 ? (this.consumeToken(), i = s) : this.consumeInternalError(e, s, n);
    } catch (s) {
      i = this.consumeInternalRecovery(e, r, s);
    }
    return this.cstPostTerminal(n !== void 0 && n.LABEL !== void 0 ? n.LABEL : e.name, i), i;
  }
  consumeInternalError(e, r, n) {
    let i;
    const s = this.LA(0);
    throw n !== void 0 && n.ERR_MSG ? i = n.ERR_MSG : i = this.errorMessageProvider.buildMismatchTokenMessage({
      expected: e,
      actual: r,
      previous: s,
      ruleName: this.getCurrRuleFullName()
    }), this.SAVE_ERROR(new Io(i, r, s));
  }
  consumeInternalRecovery(e, r, n) {
    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
    n.name === "MismatchedTokenException" && !this.isBackTracking()) {
      const i = this.getFollowsForInRuleRecovery(e, r);
      try {
        return this.tryInRuleRecovery(e, i);
      } catch (s) {
        throw s.name === Co ? n : s;
      }
    } else
      throw n;
  }
  saveRecogState() {
    const e = this.errors, r = ie(this.RULE_STACK);
    return {
      errors: e,
      lexerState: this.exportLexerState(),
      RULE_STACK: r,
      CST_STACK: this.CST_STACK
    };
  }
  reloadRecogState(e) {
    this.errors = e.errors, this.importLexerState(e.lexerState), this.RULE_STACK = e.RULE_STACK;
  }
  ruleInvocationStateUpdate(e, r, n) {
    this.RULE_OCCURRENCE_STACK.push(n), this.RULE_STACK.push(e), this.cstInvocationStateUpdate(r);
  }
  isBackTracking() {
    return this.isBackTrackingStack.length !== 0;
  }
  getCurrRuleFullName() {
    const e = this.getLastExplicitRuleShortName();
    return this.shortRuleNameToFull[e];
  }
  shortRuleNameToFullName(e) {
    return this.shortRuleNameToFull[e];
  }
  isAtEndOfInput() {
    return this.tokenMatcher(this.LA(1), it);
  }
  reset() {
    this.resetLexerState(), this.subruleIdx = 0, this.isBackTrackingStack = [], this.errors = [], this.RULE_STACK = [], this.CST_STACK = [], this.RULE_OCCURRENCE_STACK = [];
  }
}
class Hd {
  initErrorHandler(e) {
    this._errors = [], this.errorMessageProvider = b(e, "errorMessageProvider") ? e.errorMessageProvider : Ke.errorMessageProvider;
  }
  SAVE_ERROR(e) {
    if (lr(e))
      return e.context = {
        ruleStack: this.getHumanReadableRuleStack(),
        ruleOccurrenceStack: ie(this.RULE_OCCURRENCE_STACK)
      }, this._errors.push(e), e;
    throw Error("Trying to save an Error which is not a RecognitionException");
  }
  get errors() {
    return ie(this._errors);
  }
  set errors(e) {
    this._errors = e;
  }
  // TODO: consider caching the error message computed information
  raiseEarlyExitException(e, r, n) {
    const i = this.getCurrRuleFullName(), s = this.getGAstProductions()[i], o = Yn(e, s, r, this.maxLookahead)[0], c = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      c.push(this.LA(u));
    const a = this.errorMessageProvider.buildEarlyExitMessage({
      expectedIterationPaths: o,
      actual: c,
      previous: this.LA(0),
      customUserDescription: n,
      ruleName: i
    });
    throw this.SAVE_ERROR(new Od(a, this.LA(1), this.LA(0)));
  }
  // TODO: consider caching the error message computed information
  raiseNoAltException(e, r) {
    const n = this.getCurrRuleFullName(), i = this.getGAstProductions()[n], s = zn(e, i, this.maxLookahead), o = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      o.push(this.LA(u));
    const c = this.LA(0), a = this.errorMessageProvider.buildNoViableAltMessage({
      expectedPathsPerAlt: s,
      actual: o,
      previous: c,
      customUserDescription: r,
      ruleName: this.getCurrRuleFullName()
    });
    throw this.SAVE_ERROR(new Sd(a, this.LA(1), c));
  }
}
class zd {
  initContentAssist() {
  }
  computeContentAssist(e, r) {
    const n = this.gastProductionsCache[e];
    if (We(n))
      throw Error(`Rule ->${e}<- does not exist in this grammar.`);
    return mo([n], r, this.tokenMatcher, this.maxLookahead);
  }
  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
  // TODO: should this be more explicitly part of the public API?
  getNextPossibleTokenTypes(e) {
    const r = Ie(e.ruleStack), n = this.getGAstProductions()[r];
    return new qp(n, e).startWalking();
  }
}
const Nr = {
  description: "This Object indicates the Parser is during Recording Phase"
};
Object.freeze(Nr);
const rs = !0, ns = Math.pow(2, Ze) - 1, No = V({ name: "RECORDING_PHASE_TOKEN", pattern: ae.NA });
Dt([No]);
const Po = Hn(
  No,
  `This IToken indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  // Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
  -1,
  -1,
  -1,
  -1,
  -1,
  -1
);
Object.freeze(Po);
const Yd = {
  name: `This CSTNode indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  children: {}
};
class qd {
  initGastRecorder(e) {
    this.recordingProdStack = [], this.RECORDING_PHASE = !1;
  }
  enableRecording() {
    this.RECORDING_PHASE = !0, this.TRACE_INIT("Enable Recording", () => {
      for (let e = 0; e < 10; e++) {
        const r = e > 0 ? e : "";
        this[`CONSUME${r}`] = function(n, i) {
          return this.consumeInternalRecord(n, e, i);
        }, this[`SUBRULE${r}`] = function(n, i) {
          return this.subruleInternalRecord(n, e, i);
        }, this[`OPTION${r}`] = function(n) {
          return this.optionInternalRecord(n, e);
        }, this[`OR${r}`] = function(n) {
          return this.orInternalRecord(n, e);
        }, this[`MANY${r}`] = function(n) {
          this.manyInternalRecord(e, n);
        }, this[`MANY_SEP${r}`] = function(n) {
          this.manySepFirstInternalRecord(e, n);
        }, this[`AT_LEAST_ONE${r}`] = function(n) {
          this.atLeastOneInternalRecord(e, n);
        }, this[`AT_LEAST_ONE_SEP${r}`] = function(n) {
          this.atLeastOneSepFirstInternalRecord(e, n);
        };
      }
      this.consume = function(e, r, n) {
        return this.consumeInternalRecord(r, e, n);
      }, this.subrule = function(e, r, n) {
        return this.subruleInternalRecord(r, e, n);
      }, this.option = function(e, r) {
        return this.optionInternalRecord(r, e);
      }, this.or = function(e, r) {
        return this.orInternalRecord(r, e);
      }, this.many = function(e, r) {
        this.manyInternalRecord(e, r);
      }, this.atLeastOne = function(e, r) {
        this.atLeastOneInternalRecord(e, r);
      }, this.ACTION = this.ACTION_RECORD, this.BACKTRACK = this.BACKTRACK_RECORD, this.LA = this.LA_RECORD;
    });
  }
  disableRecording() {
    this.RECORDING_PHASE = !1, this.TRACE_INIT("Deleting Recording methods", () => {
      const e = this;
      for (let r = 0; r < 10; r++) {
        const n = r > 0 ? r : "";
        delete e[`CONSUME${n}`], delete e[`SUBRULE${n}`], delete e[`OPTION${n}`], delete e[`OR${n}`], delete e[`MANY${n}`], delete e[`MANY_SEP${n}`], delete e[`AT_LEAST_ONE${n}`], delete e[`AT_LEAST_ONE_SEP${n}`];
      }
      delete e.consume, delete e.subrule, delete e.option, delete e.or, delete e.many, delete e.atLeastOne, delete e.ACTION, delete e.BACKTRACK, delete e.LA;
    });
  }
  //   Parser methods are called inside an ACTION?
  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
  // @ts-expect-error -- noop place holder
  ACTION_RECORD(e) {
  }
  // Executing backtracking logic will break our recording logic assumptions
  BACKTRACK_RECORD(e, r) {
    return () => !0;
  }
  // LA is part of the official API and may be used for custom lookahead logic
  // by end users who may forget to wrap it in ACTION or inside a GATE
  LA_RECORD(e) {
    return fr;
  }
  topLevelRuleRecord(e, r) {
    try {
      const n = new mt({ definition: [], name: e });
      return n.name = e, this.recordingProdStack.push(n), r.call(this), this.recordingProdStack.pop(), n;
    } catch (n) {
      if (n.KNOWN_RECORDER_ERROR !== !0)
        try {
          n.message = n.message + `
	 This error was thrown during the "grammar recording phase" For more info see:
	https://chevrotain.io/docs/guide/internals.html#grammar-recording`;
        } catch {
          throw n;
        }
      throw n;
    }
  }
  // Implementation of parsing DSL
  optionInternalRecord(e, r) {
    return Tt.call(this, le, e, r);
  }
  atLeastOneInternalRecord(e, r) {
    Tt.call(this, De, r, e);
  }
  atLeastOneSepFirstInternalRecord(e, r) {
    Tt.call(this, Fe, r, e, rs);
  }
  manyInternalRecord(e, r) {
    Tt.call(this, ee, r, e);
  }
  manySepFirstInternalRecord(e, r) {
    Tt.call(this, Me, r, e, rs);
  }
  orInternalRecord(e, r) {
    return Xd.call(this, e, r);
  }
  subruleInternalRecord(e, r, n) {
    if (hr(r), !e || b(e, "ruleName") === !1) {
      const c = new Error(`<SUBRULE${is(r)}> argument is invalid expecting a Parser method reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw c.KNOWN_RECORDER_ERROR = !0, c;
    }
    const i = pt(this.recordingProdStack), s = e.ruleName, o = new ge({
      idx: r,
      nonTerminalName: s,
      label: n == null ? void 0 : n.LABEL,
      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
      referencedRule: void 0
    });
    return i.definition.push(o), this.outputCst ? Yd : Nr;
  }
  consumeInternalRecord(e, r, n) {
    if (hr(r), !ho(e)) {
      const o = new Error(`<CONSUME${is(r)}> argument is invalid expecting a TokenType reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw o.KNOWN_RECORDER_ERROR = !0, o;
    }
    const i = pt(this.recordingProdStack), s = new z({
      idx: r,
      terminalType: e,
      label: n == null ? void 0 : n.LABEL
    });
    return i.definition.push(s), Po;
  }
}
function Tt(t, e, r, n = !1) {
  hr(r);
  const i = pt(this.recordingProdStack), s = He(e) ? e : e.DEF, o = new t({ definition: [], idx: r });
  return n && (o.separator = e.SEP), b(e, "MAX_LOOKAHEAD") && (o.maxLookahead = e.MAX_LOOKAHEAD), this.recordingProdStack.push(o), s.call(this), i.definition.push(o), this.recordingProdStack.pop(), Nr;
}
function Xd(t, e) {
  hr(e);
  const r = pt(this.recordingProdStack), n = j(t) === !1, i = n === !1 ? t : t.DEF, s = new be({
    definition: [],
    idx: e,
    ignoreAmbiguities: n && t.IGNORE_AMBIGUITIES === !0
  });
  b(t, "MAX_LOOKAHEAD") && (s.maxLookahead = t.MAX_LOOKAHEAD);
  const o = Zs(i, (c) => He(c.GATE));
  return s.hasPredicates = o, r.definition.push(s), N(i, (c) => {
    const a = new fe({ definition: [] });
    s.definition.push(a), b(c, "IGNORE_AMBIGUITIES") ? a.ignoreAmbiguities = c.IGNORE_AMBIGUITIES : b(c, "GATE") && (a.ignoreAmbiguities = !0), this.recordingProdStack.push(a), c.ALT.call(this), this.recordingProdStack.pop();
  }), Nr;
}
function is(t) {
  return t === 0 ? "" : `${t}`;
}
function hr(t) {
  if (t < 0 || t > ns) {
    const e = new Error(
      // The stack trace will contain all the needed details
      `Invalid DSL Method idx value: <${t}>
	Idx value must be a none negative value smaller than ${ns + 1}`
    );
    throw e.KNOWN_RECORDER_ERROR = !0, e;
  }
}
class Qd {
  initPerformanceTracer(e) {
    if (b(e, "traceInitPerf")) {
      const r = e.traceInitPerf, n = typeof r == "number";
      this.traceInitMaxIdent = n ? r : 1 / 0, this.traceInitPerf = n ? r > 0 : r;
    } else
      this.traceInitMaxIdent = 0, this.traceInitPerf = Ke.traceInitPerf;
    this.traceInitIndent = -1;
  }
  TRACE_INIT(e, r) {
    if (this.traceInitPerf === !0) {
      this.traceInitIndent++;
      const n = new Array(this.traceInitIndent + 1).join("	");
      this.traceInitIndent < this.traceInitMaxIdent && console.log(`${n}--> <${e}>`);
      const { time: i, value: s } = to(r), o = i > 10 ? console.warn : console.log;
      return this.traceInitIndent < this.traceInitMaxIdent && o(`${n}<-- <${e}> time: ${i}ms`), this.traceInitIndent--, s;
    } else
      return r();
  }
}
function Jd(t, e) {
  e.forEach((r) => {
    const n = r.prototype;
    Object.getOwnPropertyNames(n).forEach((i) => {
      if (i === "constructor")
        return;
      const s = Object.getOwnPropertyDescriptor(n, i);
      s && (s.get || s.set) ? Object.defineProperty(t.prototype, i, s) : t.prototype[i] = r.prototype[i];
    });
  });
}
const fr = Hn(it, "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(fr);
const Ke = Object.freeze({
  recoveryEnabled: !1,
  maxLookahead: 3,
  dynamicTokensEnabled: !1,
  outputCst: !0,
  errorMessageProvider: po,
  nodeLocationTracking: "none",
  traceInitPerf: !1,
  skipValidations: !1
}), pr = Object.freeze({
  recoveryValueFunc: () => {
  },
  resyncEnabled: !0
});
var ce;
(function(t) {
  t[t.INVALID_RULE_NAME = 0] = "INVALID_RULE_NAME", t[t.DUPLICATE_RULE_NAME = 1] = "DUPLICATE_RULE_NAME", t[t.INVALID_RULE_OVERRIDE = 2] = "INVALID_RULE_OVERRIDE", t[t.DUPLICATE_PRODUCTIONS = 3] = "DUPLICATE_PRODUCTIONS", t[t.UNRESOLVED_SUBRULE_REF = 4] = "UNRESOLVED_SUBRULE_REF", t[t.LEFT_RECURSION = 5] = "LEFT_RECURSION", t[t.NONE_LAST_EMPTY_ALT = 6] = "NONE_LAST_EMPTY_ALT", t[t.AMBIGUOUS_ALTS = 7] = "AMBIGUOUS_ALTS", t[t.CONFLICT_TOKENS_RULES_NAMESPACE = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE", t[t.INVALID_TOKEN_NAME = 9] = "INVALID_TOKEN_NAME", t[t.NO_NON_EMPTY_LOOKAHEAD = 10] = "NO_NON_EMPTY_LOOKAHEAD", t[t.AMBIGUOUS_PREFIX_ALTS = 11] = "AMBIGUOUS_PREFIX_ALTS", t[t.TOO_MANY_ALTS = 12] = "TOO_MANY_ALTS", t[t.CUSTOM_LOOKAHEAD_VALIDATION = 13] = "CUSTOM_LOOKAHEAD_VALIDATION";
})(ce || (ce = {}));
class Ft {
  /**
   *  @deprecated use the **instance** method with the same name instead
   */
  static performSelfAnalysis(e) {
    throw Error("The **static** `performSelfAnalysis` method has been deprecated.	\nUse the **instance** method with the same name instead.");
  }
  performSelfAnalysis() {
    this.TRACE_INIT("performSelfAnalysis", () => {
      let e;
      this.selfAnalysisDone = !0;
      const r = this.className;
      this.TRACE_INIT("toFastProps", () => {
        ro(this);
      }), this.TRACE_INIT("Grammar Recording", () => {
        try {
          this.enableRecording(), N(this.definedRulesNames, (i) => {
            const s = this[i].originalGrammarAction;
            let o;
            this.TRACE_INIT(`${i} Rule`, () => {
              o = this.topLevelRuleRecord(i, s);
            }), this.gastProductionsCache[i] = o;
          });
        } finally {
          this.disableRecording();
        }
      });
      let n = [];
      if (this.TRACE_INIT("Grammar Resolving", () => {
        n = yd({
          rules: Z(this.gastProductionsCache)
        }), this.definitionErrors = this.definitionErrors.concat(n);
      }), this.TRACE_INIT("Grammar Validations", () => {
        if (K(n) && this.skipValidations === !1) {
          const i = Ad({
            rules: Z(this.gastProductionsCache),
            tokenTypes: Z(this.tokensMap),
            errMsgProvider: tt,
            grammarName: r
          }), s = od({
            lookaheadStrategy: this.lookaheadStrategy,
            rules: Z(this.gastProductionsCache),
            tokenTypes: Z(this.tokensMap),
            grammarName: r
          });
          this.definitionErrors = this.definitionErrors.concat(i, s);
        }
      }), K(this.definitionErrors) && (this.recoveryEnabled && this.TRACE_INIT("computeAllProdsFollows", () => {
        const i = Zf(Z(this.gastProductionsCache));
        this.resyncFollows = i;
      }), this.TRACE_INIT("ComputeLookaheadFunctions", () => {
        var i, s;
        (s = (i = this.lookaheadStrategy).initialize) === null || s === void 0 || s.call(i, {
          rules: Z(this.gastProductionsCache)
        }), this.preComputeLookaheadFunctions(Z(this.gastProductionsCache));
      })), !Ft.DEFER_DEFINITION_ERRORS_HANDLING && !K(this.definitionErrors))
        throw e = C(this.definitionErrors, (i) => i.message), new Error(`Parser Definition Errors detected:
 ${e.join(`
-------------------------------
`)}`);
    });
  }
  constructor(e, r) {
    this.definitionErrors = [], this.selfAnalysisDone = !1;
    const n = this;
    if (n.initErrorHandler(r), n.initLexerAdapter(), n.initLooksAhead(r), n.initRecognizerEngine(e, r), n.initRecoverable(r), n.initTreeBuilder(r), n.initContentAssist(), n.initGastRecorder(r), n.initPerformanceTracer(r), b(r, "ignoredIssues"))
      throw new Error(`The <ignoredIssues> IParserConfig property has been deprecated.
	Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.
	See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES
	For further details.`);
    this.skipValidations = b(r, "skipValidations") ? r.skipValidations : Ke.skipValidations;
  }
}
Ft.DEFER_DEFINITION_ERRORS_HANDLING = !1;
Jd(Ft, [
  Id,
  kd,
  Bd,
  Vd,
  Kd,
  Wd,
  Hd,
  zd,
  qd,
  Qd
]);
class Zd extends Ft {
  constructor(e, r = Ke) {
    const n = ie(r);
    n.outputCst = !0, super(e, n);
  }
}
const wo = V({
  name: "HTML_COMMENT",
  pattern: /<!--[\s\S]*?-->/,
  line_breaks: !0
}), xo = V({
  name: "HTML_CONDITIONAL_COMMENT",
  pattern: /<!\[[\s\S]*?\]>/,
  line_breaks: !0
}), em = V({
  name: "XML",
  pattern: /<\?xml(?:.|\s)*?\?>/
}), Uo = V({
  name: "CDATA",
  pattern: /<!\[CDATA\[[\s\S]*?]]>/
}), Do = V({
  name: "DTD",
  pattern: /<!.*?>/
}), Fo = V({
  name: "SCRIPTLET",
  pattern: /<%(.*?)%>|<\?(.*?)\?>/
}), tm = V({
  name: "SEA_WS",
  pattern: /[ \t]+/,
  group: ae.SKIPPED
}), jo = V({
  name: "LINE_BREAK",
  pattern: /\r?\n/
}), $o = V({
  name: "SCRIPT_OPEN",
  pattern: /<script\b[^>]*>/,
  push_mode: "SCRIPT"
}), Go = V({
  name: "STYLE_OPEN",
  pattern: /<style\b[^>]*>/,
  push_mode: "STYLE"
}), gn = V({
  name: "TAG_OPEN",
  pattern: /</,
  push_mode: "TAG"
}), Bo = V({
  name: "HTML_TEXT",
  pattern: /[^<@]+/,
  line_breaks: !0
}), En = V({
  name: "TAG_CLOSE",
  pattern: />/,
  pop_mode: !0
}), Vo = V({
  name: "TAG_SLASH_CLOSE",
  pattern: /\/>/,
  pop_mode: !0
}), Wo = V({
  name: "TAG_SLASH",
  pattern: /\//
}), Ko = V({
  name: "TAG_EQUALS",
  pattern: /=/,
  push_mode: "ATTVALUE"
}), tr = V({
  name: "TAG_NAME",
  pattern: /[:@a-zA-Z\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:\.\-@\u00B7\u0300-\u036F\u203F-\u2040.0-9a-zA-Z]*/
}), rm = V({
  name: "TAG_WHITESPACE",
  pattern: /[ \t\r\n]+/,
  group: ae.SKIPPED
}), Ho = V({
  name: "SCRIPT_BODY",
  pattern: /[\s\S]*?<\/script>/,
  pop_mode: !0
}), zo = V({
  name: "STYLE_BODY",
  pattern: /[\s\S]*?<\/style>/,
  pop_mode: !0
}), Yo = V({
  name: "ATTVALUE_VALUE",
  pattern: / *("[^<"]*"|'[^<']*'|[-_./+,?=:#;0-9a-zA-Z]+ ?|#[0-9a-fA-F]+|[0-9]+%?)/,
  pop_mode: !0
}), vn = V({
  name: "EDGE_COMMENT",
  pattern: /{{--[\s\S]*?--}}/,
  line_breaks: !0
}), Tn = V({
  name: "EDGE_MUSTACHE",
  pattern: /{{[\s\S]*?}}\s*/
}), _n = V({
  name: "EDGE_SAFE_MUSTACHE",
  pattern: /{{{[\s\S]*?}}}\s*/
}), qo = V({
  name: "EDGE_ESCAPED_MUSTACHE",
  pattern: /@{{[\s\S]*?}}\s*/
}), Xo = V({
  name: "EDGE_TAG",
  pattern: /@(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/
}), Qo = V({
  name: "EDGE_TAG_PROP",
  pattern: /@(if|elseif|else|each|flashMessage)\([^)]*\)\s*([\s\S]*?)@end/
}), yn = {
  defaultMode: "default",
  modes: {
    default: [
      wo,
      xo,
      em,
      Uo,
      Do,
      Fo,
      jo,
      tm,
      $o,
      Go,
      gn,
      vn,
      qo,
      _n,
      Tn,
      Xo,
      Bo
    ],
    TAG: [
      En,
      Vo,
      Wo,
      Ko,
      vn,
      _n,
      Tn,
      Qo,
      tr,
      rm
    ],
    SCRIPT: [Ho],
    STYLE: [zo],
    ATTVALUE: [Yo]
  }
}, nm = () => {
  const t = [];
  for (const e in yn.modes)
    t.push(...yn.modes[e]);
  return t;
}, im = new ae(yn);
class Jo extends Zd {
  constructor() {
    super(nm());
    const e = this;
    e.RULE("document", () => {
      e.MANY(() => {
        e.SUBRULE(e.content);
      });
    }), e.RULE("content", () => {
      e.OR([
        { ALT: () => e.CONSUME(Bo) },
        { ALT: () => e.CONSUME(jo) },
        { ALT: () => e.SUBRULE(e.element) },
        { ALT: () => e.SUBRULE(e.scriptlet) },
        { ALT: () => e.SUBRULE(e.htmlComment) },
        { ALT: () => e.SUBRULE(e.htmlConditionalComment) },
        { ALT: () => e.SUBRULE(e.cdata) },
        { ALT: () => e.SUBRULE(e.dtd) },
        { ALT: () => e.SUBRULE(e.scriptElement) },
        { ALT: () => e.SUBRULE(e.styleElement) },
        { ALT: () => e.SUBRULE(e.edgeComment) },
        { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
        { ALT: () => e.SUBRULE(e.edgeMustache) },
        { ALT: () => e.SUBRULE(e.edgeEscapedMustache) },
        { ALT: () => e.SUBRULE(e.edgeTag) }
      ]);
    }), e.RULE("element", () => {
      e.OR([
        {
          ALT: () => e.SUBRULE(e.openingTag)
        },
        {
          ALT: () => e.SUBRULE(e.closingTag)
        }
      ]);
    }), e.RULE("openingTag", () => {
      e.CONSUME(gn), e.CONSUME(tr), e.MANY(() => {
        e.OR([
          { ALT: () => e.SUBRULE(e.edgeTagProp) },
          { ALT: () => e.SUBRULE(e.attribute) },
          { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
          { ALT: () => e.SUBRULE(e.edgeMustache) },
          { ALT: () => e.SUBRULE(e.edgeComment) }
        ]);
      }), e.OR1([
        { ALT: () => e.CONSUME1(Vo) },
        { ALT: () => e.CONSUME1(En) }
      ]);
    }), e.RULE("attribute", () => {
      e.CONSUME(tr), e.OPTION(() => {
        e.CONSUME(Ko), e.CONSUME(Yo);
      });
    }), e.RULE("closingTag", () => {
      e.CONSUME(gn), e.CONSUME(Wo), e.CONSUME(tr), e.CONSUME(En);
    }), e.RULE("scriptlet", () => {
      e.CONSUME(Fo);
    }), e.RULE("htmlComment", () => {
      e.CONSUME(wo);
    }), e.RULE("htmlConditionalComment", () => {
      e.CONSUME(xo);
    }), e.RULE("cdata", () => {
      e.CONSUME(Uo);
    }), e.RULE("dtd", () => {
      e.CONSUME(Do);
    }), e.RULE("scriptElement", () => {
      e.CONSUME($o), e.CONSUME(Ho);
    }), e.RULE("styleElement", () => {
      e.CONSUME(Go), e.CONSUME(zo);
    }), e.RULE("edgeComment", () => {
      e.CONSUME(vn);
    }), e.RULE("edgeMustache", () => {
      e.CONSUME(Tn);
    }), e.RULE("edgeSafeMustache", () => {
      e.CONSUME(_n);
    }), e.RULE("edgeEscapedMustache", () => {
      e.CONSUME(qo);
    }), e.RULE("edgeTag", () => {
      e.CONSUME(Xo);
    }), e.RULE("edgeTagProp", () => {
      e.CONSUME(Qo);
    }), this.performSelfAnalysis();
  }
}
const sm = new Jo(), om = sm.getBaseCstVisitorConstructor();
var An, rr, Sn;
class am extends om {
  constructor() {
    super(), ei(this, rr), ei(this, An, /* @__PURE__ */ new Set([
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr",
      // Below are for SVGs
      "animateMotion",
      "animateTransform",
      "animate",
      "circle",
      "ellipse",
      "feGaussianBlur",
      "feDropShadow",
      "feOffset",
      "feBlend",
      "feColorMatrix",
      "feComposite",
      "feDisplacementMap",
      "feFlood",
      "feImage",
      "feMergeNode",
      "feMorphology",
      "fePointLight",
      "feSpotLight",
      "feTile",
      "feTurbulence",
      "image",
      "line",
      "mpath",
      "path",
      "polygon",
      "polyline",
      "rect",
      "set",
      "stop",
      "use",
      "view"
    ])), this.validateVisitor();
  }
  document(e) {
    const r = e.content[0].startOffset, n = e.content[e.content.length - 1].endOffset;
    return {
      type: "document",
      children: e.content.map((i) => this.visit(i)),
      start: r,
      end: n
    };
  }
  content(e) {
    if (e.HTML_TEXT)
      return {
        type: "htmlText",
        value: e.HTML_TEXT[0].image,
        start: e.HTML_TEXT[0].startOffset,
        end: e.HTML_TEXT[0].endOffset
      };
    if (e.LINE_BREAK)
      return {
        type: "linebreak",
        value: e.LINE_BREAK[0].image,
        start: e.LINE_BREAK[0].startOffset,
        end: e.LINE_BREAK[0].endOffset
      };
    const r = e.element || e.scriptlet || e.htmlComment || e.htmlConditionalComment || e.cdata || e.dtd || e.scriptElement || e.styleElement || e.edgeComment || e.edgeMustache || e.edgeSafeMustache || e.edgeEscapedMustache || e.edgeTag || e.htmlText;
    return this.visit(r);
  }
  element(e) {
    return e.openingTag ? this.visit(e.openingTag) : e.selfClosingTag ? this.visit(e.selfClosingTag) : this.visit(e.closingTag);
  }
  openingTag(e) {
    const r = e.TAG_NAME[0].image, n = e.edgeSafeMustache ? e.edgeSafeMustache.map((l) => this.visit(l)) : [], i = e.edgeMustache ? e.edgeMustache.map((l) => this.visit(l)) : [], s = e.edgeTagProp ? e.edgeTagProp.map((l) => this.visit(l)) : [], o = e.attribute ? e.attribute.map((l) => this.visit(l)) : [], c = e.edgeComment ? e.edgeComment.map((l) => this.visit(l)) : [], a = e.TAG_NAME[0].startOffset, u = e.TAG_NAME[0].endOffset;
    return ti(this, rr, Sn).call(this, r) || e.TAG_SLASH_CLOSE ? {
      type: "voidTag",
      tagName: r,
      edgeSafeMustaches: n,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: o,
      comments: c,
      start: a,
      end: u
    } : {
      type: "openingTag",
      tagName: r,
      edgeSafeMustaches: n,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: o,
      comments: c,
      start: a,
      end: u
    };
  }
  attribute(e) {
    var r, n, i;
    const s = e.TAG_NAME[0].image, o = (i = (n = (r = e.ATTVALUE_VALUE) == null ? void 0 : r[0]) == null ? void 0 : n.image) == null ? void 0 : i.trim(), c = e.TAG_NAME[0].startOffset, a = e.ATTVALUE_VALUE ? e.ATTVALUE_VALUE[0].endOffset : e.TAG_NAME[0].endOffset;
    return { type: "attribute", attributeName: s, attributeValue: o, start: c, end: a };
  }
  closingTag(e) {
    const r = e.TAG_NAME[0].image, n = e.TAG_OPEN[0].startOffset, i = e.TAG_CLOSE[0].endOffset;
    return ti(this, rr, Sn).call(this, r) ? {
      type: "doNotPrint"
    } : { type: "closingTag", tagName: r, start: n, end: i };
  }
  scriptlet(e) {
    const r = e.SCRIPTLET[0].image, n = e.SCRIPTLET[0].startOffset, i = e.SCRIPTLET[0].endOffset;
    return { type: "scriptlet", value: r, start: n, end: i };
  }
  htmlComment(e) {
    const r = e.HTML_COMMENT[0].image, n = e.HTML_COMMENT[0].startOffset, i = e.HTML_COMMENT[0].endOffset;
    return { type: "htmlComment", value: r, start: n, end: i };
  }
  htmlConditionalComment(e) {
    const r = e.HTML_CONDITIONAL_COMMENT[0].image, n = e.HTML_CONDITIONAL_COMMENT[0].startOffset, i = e.HTML_CONDITIONAL_COMMENT[0].endOffset;
    return { type: "htmlConditionalComment", value: r, start: n, end: i };
  }
  cdata(e) {
    const r = e.CDATA[0].image, n = e.CDATA[0].startOffset, i = e.CDATA[0].endOffset;
    return { type: "cdata", value: r, start: n, end: i };
  }
  dtd(e) {
    const r = e.DTD[0].image, n = e.DTD[0].startOffset, i = e.DTD[0].endOffset;
    return { type: "dtd", value: r, start: n, end: i };
  }
  scriptElement(e) {
    const r = e.SCRIPT_OPEN[0].image + e.SCRIPT_BODY[0].image, n = e.SCRIPT_OPEN[0].startOffset, i = e.SCRIPT_BODY[0].endOffset;
    return { type: "scriptElement", value: r, start: n, end: i };
  }
  styleElement(e) {
    const r = e.STYLE_OPEN[0].image + e.STYLE_BODY[0].image, n = e.STYLE_OPEN[0].startOffset, i = e.STYLE_BODY[0].endOffset;
    return { type: "styleElement", value: r, start: n, end: i };
  }
  edgeComment(e) {
    const r = e.EDGE_COMMENT[0].image, n = e.EDGE_COMMENT[0].startOffset, i = e.EDGE_COMMENT[0].endOffset;
    return { type: "edgeComment", value: r, start: n, end: i };
  }
  edgeMustache(e) {
    const r = e.EDGE_MUSTACHE[0].image, n = e.EDGE_MUSTACHE[0].startOffset, i = e.EDGE_MUSTACHE[0].endOffset;
    return { type: "edgeMustache", value: r, start: n, end: i };
  }
  edgeSafeMustache(e) {
    const r = e.EDGE_SAFE_MUSTACHE[0].image, n = e.EDGE_SAFE_MUSTACHE[0].startOffset, i = e.EDGE_SAFE_MUSTACHE[0].endOffset;
    return { type: "edgeSafeMustache", value: r, start: n, end: i };
  }
  edgeEscapedMustache(e) {
    const r = e.EDGE_ESCAPED_MUSTACHE[0].image, n = e.EDGE_ESCAPED_MUSTACHE[0].startOffset, i = e.EDGE_ESCAPED_MUSTACHE[0].endOffset;
    return { type: "edgeEscapedMustache", value: r, start: n, end: i };
  }
  edgeTag(e) {
    const r = e.EDGE_TAG[0].image, n = e.EDGE_TAG[0].startOffset, i = e.EDGE_TAG[0].endOffset;
    return { type: "edgeTag", value: r, start: n, end: i };
  }
  edgeTagProp(e) {
    const r = e.EDGE_TAG_PROP[0].image, n = e.EDGE_TAG_PROP[0].startOffset, i = e.EDGE_TAG_PROP[0].endOffset;
    return { type: "edgeTagProp", value: r, start: n, end: i };
  }
}
An = /* @__PURE__ */ new WeakMap(), rr = /* @__PURE__ */ new WeakSet(), Sn = function(t) {
  return la(this, An).has(t);
};
const Kt = new Jo(), cm = new am();
function Xn(t) {
  const e = im.tokenize(t);
  Kt.input = e.tokens;
  const r = Kt.document();
  if (Kt.errors.length > 0)
    throw new Error(
      `Parsing Errors Detected: ${JSON.stringify(Kt.errors)}`
    );
  return cm.visit(r);
}
function um(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(n) {
    var i = Object.getOwnPropertyDescriptor(t, n);
    Object.defineProperty(r, n, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[n];
      }
    });
  }), r;
}
var dr = {}, ss = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, lm = function(t, e) {
  e = e || {};
  var r = 1, n = 1;
  function i(S) {
    var A = S.match(/\n/g);
    A && (r += A.length);
    var M = S.lastIndexOf(`
`);
    n = ~M ? S.length - M : n + S.length;
  }
  function s() {
    var S = { line: r, column: n };
    return function(A) {
      return A.position = new o(S), m(), A;
    };
  }
  function o(S) {
    this.start = S, this.end = { line: r, column: n }, this.source = e.source;
  }
  o.prototype.content = t;
  var c = [];
  function a(S) {
    var A = new Error(e.source + ":" + r + ":" + n + ": " + S);
    if (A.reason = S, A.filename = e.source, A.line = r, A.column = n, A.source = t, e.silent)
      c.push(A);
    else
      throw A;
  }
  function u() {
    var S = d();
    return {
      type: "stylesheet",
      stylesheet: {
        source: e.source,
        rules: S,
        parsingErrors: c
      }
    };
  }
  function l() {
    return p(/^{\s*/);
  }
  function h() {
    return p(/^}/);
  }
  function d() {
    var S, A = [];
    for (m(), g(A); t.length && t.charAt(0) != "}" && (S = U() || G()); )
      S !== !1 && (A.push(S), g(A));
    return A;
  }
  function p(S) {
    var A = S.exec(t);
    if (A) {
      var M = A[0];
      return i(M), t = t.slice(M.length), A;
    }
  }
  function m() {
    p(/^\s*/);
  }
  function g(S) {
    var A;
    for (S = S || []; A = _(); )
      A !== !1 && S.push(A);
    return S;
  }
  function _() {
    var S = s();
    if (!(t.charAt(0) != "/" || t.charAt(1) != "*")) {
      for (var A = 2; t.charAt(A) != "" && (t.charAt(A) != "*" || t.charAt(A + 1) != "/"); ) ++A;
      if (A += 2, t.charAt(A - 1) === "")
        return a("End of comment missing");
      var M = t.slice(2, A - 2);
      return n += 2, i(M), t = t.slice(A), n += 2, S({
        type: "comment",
        comment: M
      });
    }
  }
  function y() {
    var S = p(/^([^{]+)/);
    if (S)
      return Be(S[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(A) {
        return A.replace(/,/g, "‌");
      }).split(/\s*(?![^(]*\)),\s*/).map(function(A) {
        return A.replace(/\u200C/g, ",");
      });
  }
  function T() {
    var S = s(), A = p(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (A) {
      if (A = Be(A[0]), !p(/^:\s*/)) return a("property missing ':'");
      var M = p(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/), B = S({
        type: "declaration",
        property: A.replace(ss, ""),
        value: M ? Be(M[0]).replace(ss, "") : ""
      });
      return p(/^[;\s]*/), B;
    }
  }
  function v() {
    var S = [];
    if (!l()) return a("missing '{'");
    g(S);
    for (var A; A = T(); )
      A !== !1 && (S.push(A), g(S));
    return h() ? S : a("missing '}'");
  }
  function f() {
    for (var S, A = [], M = s(); S = p(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); )
      A.push(S[1]), p(/^,\s*/);
    if (A.length)
      return M({
        type: "keyframe",
        values: A,
        declarations: v()
      });
  }
  function E() {
    var S = s(), M = p(/^@([-\w]+)?keyframes\s*/);
    if (M) {
      var A = M[1], M = p(/^([-\w]+)\s*/);
      if (!M) return a("@keyframes missing name");
      var B = M[1];
      if (!l()) return a("@keyframes missing '{'");
      for (var se, te = g(); se = f(); )
        te.push(se), te = te.concat(g());
      return h() ? S({
        type: "keyframes",
        name: B,
        vendor: A,
        keyframes: te
      }) : a("@keyframes missing '}'");
    }
  }
  function L() {
    var S = s(), A = p(/^@supports *([^{]+)/);
    if (A) {
      var M = Be(A[1]);
      if (!l()) return a("@supports missing '{'");
      var B = g().concat(d());
      return h() ? S({
        type: "supports",
        supports: M,
        rules: B
      }) : a("@supports missing '}'");
    }
  }
  function R() {
    var S = s(), A = p(/^@host\s*/);
    if (A) {
      if (!l()) return a("@host missing '{'");
      var M = g().concat(d());
      return h() ? S({
        type: "host",
        rules: M
      }) : a("@host missing '}'");
    }
  }
  function D() {
    var S = s(), A = p(/^@media *([^{]+)/);
    if (A) {
      var M = Be(A[1]);
      if (!l()) return a("@media missing '{'");
      var B = g().concat(d());
      return h() ? S({
        type: "media",
        media: M,
        rules: B
      }) : a("@media missing '}'");
    }
  }
  function Q() {
    var S = s(), A = p(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (A)
      return S({
        type: "custom-media",
        name: Be(A[1]),
        media: Be(A[2])
      });
  }
  function F() {
    var S = s(), A = p(/^@page */);
    if (A) {
      var M = y() || [];
      if (!l()) return a("@page missing '{'");
      for (var B = g(), se; se = T(); )
        B.push(se), B = B.concat(g());
      return h() ? S({
        type: "page",
        selectors: M,
        declarations: B
      }) : a("@page missing '}'");
    }
  }
  function I() {
    var S = s(), A = p(/^@([-\w]+)?document *([^{]+)/);
    if (A) {
      var M = Be(A[1]), B = Be(A[2]);
      if (!l()) return a("@document missing '{'");
      var se = g().concat(d());
      return h() ? S({
        type: "document",
        document: B,
        vendor: M,
        rules: se
      }) : a("@document missing '}'");
    }
  }
  function w() {
    var S = s(), A = p(/^@font-face\s*/);
    if (A) {
      if (!l()) return a("@font-face missing '{'");
      for (var M = g(), B; B = T(); )
        M.push(B), M = M.concat(g());
      return h() ? S({
        type: "font-face",
        declarations: M
      }) : a("@font-face missing '}'");
    }
  }
  var x = $("import"), k = $("charset"), O = $("namespace");
  function $(S) {
    var A = new RegExp("^@" + S + "\\s*([^;]+);");
    return function() {
      var M = s(), B = p(A);
      if (B) {
        var se = { type: S };
        return se[S] = B[1].trim(), M(se);
      }
    };
  }
  function U() {
    if (t[0] == "@")
      return E() || D() || Q() || L() || x() || k() || O() || I() || F() || R() || w();
  }
  function G() {
    var S = s(), A = y();
    return A ? (g(), S({
      type: "rule",
      selectors: A,
      declarations: v()
    })) : a("selector missing");
  }
  return Rn(u());
};
function Be(t) {
  return t ? t.replace(/^\s+|\s+$/g, "") : "";
}
function Rn(t, e) {
  var r = t && typeof t.type == "string", n = r ? t : e;
  for (var i in t) {
    var s = t[i];
    Array.isArray(s) ? s.forEach(function(o) {
      Rn(o, n);
    }) : s && typeof s == "object" && Rn(s, n);
  }
  return r && Object.defineProperty(t, "parent", {
    configurable: !0,
    writable: !0,
    enumerable: !1,
    value: e || null
  }), t;
}
var Zo = Pr;
function Pr(t) {
  this.options = t || {};
}
Pr.prototype.emit = function(t) {
  return t;
};
Pr.prototype.visit = function(t) {
  return this[t.type](t);
};
Pr.prototype.mapVisit = function(t, e) {
  var r = "";
  e = e || "";
  for (var n = 0, i = t.length; n < i; n++)
    r += this.visit(t[n]), e && n < i - 1 && (r += this.emit(e));
  return r;
};
var On = { exports: {} };
typeof Object.create == "function" ? On.exports = function(e, r) {
  r && (e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  }));
} : On.exports = function(e, r) {
  if (r) {
    e.super_ = r;
    var n = function() {
    };
    n.prototype = r.prototype, e.prototype = new n(), e.prototype.constructor = e;
  }
};
var ea = On.exports, ta = Zo, hm = ea, fm = re;
function re(t) {
  ta.call(this, t);
}
hm(re, ta);
re.prototype.compile = function(t) {
  return t.stylesheet.rules.map(this.visit, this).join("");
};
re.prototype.comment = function(t) {
  return this.emit("", t.position);
};
re.prototype.import = function(t) {
  return this.emit("@import " + t.import + ";", t.position);
};
re.prototype.media = function(t) {
  return this.emit("@media " + t.media, t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype.document = function(t) {
  var e = "@" + (t.vendor || "") + "document " + t.document;
  return this.emit(e, t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype.charset = function(t) {
  return this.emit("@charset " + t.charset + ";", t.position);
};
re.prototype.namespace = function(t) {
  return this.emit("@namespace " + t.namespace + ";", t.position);
};
re.prototype.supports = function(t) {
  return this.emit("@supports " + t.supports, t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype.keyframes = function(t) {
  return this.emit("@" + (t.vendor || "") + "keyframes " + t.name, t.position) + this.emit("{") + this.mapVisit(t.keyframes) + this.emit("}");
};
re.prototype.keyframe = function(t) {
  var e = t.declarations;
  return this.emit(t.values.join(","), t.position) + this.emit("{") + this.mapVisit(e) + this.emit("}");
};
re.prototype.page = function(t) {
  var e = t.selectors.length ? t.selectors.join(", ") : "";
  return this.emit("@page " + e, t.position) + this.emit("{") + this.mapVisit(t.declarations) + this.emit("}");
};
re.prototype["font-face"] = function(t) {
  return this.emit("@font-face", t.position) + this.emit("{") + this.mapVisit(t.declarations) + this.emit("}");
};
re.prototype.host = function(t) {
  return this.emit("@host", t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype["custom-media"] = function(t) {
  return this.emit("@custom-media " + t.name + " " + t.media + ";", t.position);
};
re.prototype.rule = function(t) {
  var e = t.declarations;
  return e.length ? this.emit(t.selectors.join(","), t.position) + this.emit("{") + this.mapVisit(e) + this.emit("}") : "";
};
re.prototype.declaration = function(t) {
  return this.emit(t.property + ":" + t.value, t.position) + this.emit(";");
};
var ra = Zo, pm = ea, dm = X;
function X(t) {
  t = t || {}, ra.call(this, t), this.indentation = t.indent;
}
pm(X, ra);
X.prototype.compile = function(t) {
  return this.stylesheet(t);
};
X.prototype.stylesheet = function(t) {
  return this.mapVisit(t.stylesheet.rules, `

`);
};
X.prototype.comment = function(t) {
  return this.emit(this.indent() + "/*" + t.comment + "*/", t.position);
};
X.prototype.import = function(t) {
  return this.emit("@import " + t.import + ";", t.position);
};
X.prototype.media = function(t) {
  return this.emit("@media " + t.media, t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype.document = function(t) {
  var e = "@" + (t.vendor || "") + "document " + t.document;
  return this.emit(e, t.position) + this.emit(
    `  {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype.charset = function(t) {
  return this.emit("@charset " + t.charset + ";", t.position);
};
X.prototype.namespace = function(t) {
  return this.emit("@namespace " + t.namespace + ";", t.position);
};
X.prototype.supports = function(t) {
  return this.emit("@supports " + t.supports, t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype.keyframes = function(t) {
  return this.emit("@" + (t.vendor || "") + "keyframes " + t.name, t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.keyframes, `
`) + this.emit(
    this.indent(-1) + "}"
  );
};
X.prototype.keyframe = function(t) {
  var e = t.declarations;
  return this.emit(this.indent()) + this.emit(t.values.join(", "), t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(e, `
`) + this.emit(
    this.indent(-1) + `
` + this.indent() + `}
`
  );
};
X.prototype.page = function(t) {
  var e = t.selectors.length ? t.selectors.join(", ") + " " : "";
  return this.emit("@page " + e, t.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(t.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
};
X.prototype["font-face"] = function(t) {
  return this.emit("@font-face ", t.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(t.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
};
X.prototype.host = function(t) {
  return this.emit("@host", t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype["custom-media"] = function(t) {
  return this.emit("@custom-media " + t.name + " " + t.media + ";", t.position);
};
X.prototype.rule = function(t) {
  var e = this.indent(), r = t.declarations;
  return r.length ? this.emit(t.selectors.map(function(n) {
    return e + n;
  }).join(`,
`), t.position) + this.emit(` {
`) + this.emit(this.indent(1)) + this.mapVisit(r, `
`) + this.emit(this.indent(-1)) + this.emit(`
` + this.indent() + "}") : "";
};
X.prototype.declaration = function(t) {
  return this.emit(this.indent()) + this.emit(t.property + ": " + t.value, t.position) + this.emit(";");
};
X.prototype.indent = function(t) {
  return this.level = this.level || 1, t != null ? (this.level += t, "") : Array(this.level).join(this.indentation || "  ");
};
var Ht = { exports: {} }, _t = {}, Vr = {}, zt = {}, Yt = {}, os;
function mm() {
  if (os) return Yt;
  os = 1;
  var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  return Yt.encode = function(e) {
    if (0 <= e && e < t.length)
      return t[e];
    throw new TypeError("Must be between 0 and 63: " + e);
  }, Yt.decode = function(e) {
    var r = 65, n = 90, i = 97, s = 122, o = 48, c = 57, a = 43, u = 47, l = 26, h = 52;
    return r <= e && e <= n ? e - r : i <= e && e <= s ? e - i + l : o <= e && e <= c ? e - o + h : e == a ? 62 : e == u ? 63 : -1;
  }, Yt;
}
var as;
function na() {
  if (as) return zt;
  as = 1;
  var t = mm(), e = 5, r = 1 << e, n = r - 1, i = r;
  function s(c) {
    return c < 0 ? (-c << 1) + 1 : (c << 1) + 0;
  }
  function o(c) {
    var a = (c & 1) === 1, u = c >> 1;
    return a ? -u : u;
  }
  return zt.encode = function(a) {
    var u = "", l, h = s(a);
    do
      l = h & n, h >>>= e, h > 0 && (l |= i), u += t.encode(l);
    while (h > 0);
    return u;
  }, zt.decode = function(a, u, l) {
    var h = a.length, d = 0, p = 0, m, g;
    do {
      if (u >= h)
        throw new Error("Expected more digits in base 64 VLQ value.");
      if (g = t.decode(a.charCodeAt(u++)), g === -1)
        throw new Error("Invalid base64 digit: " + a.charAt(u - 1));
      m = !!(g & i), g &= n, d = d + (g << p), p += e;
    } while (m);
    l.value = o(d), l.rest = u;
  }, zt;
}
var Wr = {}, cs;
function jt() {
  return cs || (cs = 1, function(t) {
    function e(f, E, L) {
      if (E in f)
        return f[E];
      if (arguments.length === 3)
        return L;
      throw new Error('"' + E + '" is a required argument.');
    }
    t.getArg = e;
    var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, n = /^data:.+\,.+$/;
    function i(f) {
      var E = f.match(r);
      return E ? {
        scheme: E[1],
        auth: E[2],
        host: E[3],
        port: E[4],
        path: E[5]
      } : null;
    }
    t.urlParse = i;
    function s(f) {
      var E = "";
      return f.scheme && (E += f.scheme + ":"), E += "//", f.auth && (E += f.auth + "@"), f.host && (E += f.host), f.port && (E += ":" + f.port), f.path && (E += f.path), E;
    }
    t.urlGenerate = s;
    function o(f) {
      var E = f, L = i(f);
      if (L) {
        if (!L.path)
          return f;
        E = L.path;
      }
      for (var R = t.isAbsolute(E), D = E.split(/\/+/), Q, F = 0, I = D.length - 1; I >= 0; I--)
        Q = D[I], Q === "." ? D.splice(I, 1) : Q === ".." ? F++ : F > 0 && (Q === "" ? (D.splice(I + 1, F), F = 0) : (D.splice(I, 2), F--));
      return E = D.join("/"), E === "" && (E = R ? "/" : "."), L ? (L.path = E, s(L)) : E;
    }
    t.normalize = o;
    function c(f, E) {
      f === "" && (f = "."), E === "" && (E = ".");
      var L = i(E), R = i(f);
      if (R && (f = R.path || "/"), L && !L.scheme)
        return R && (L.scheme = R.scheme), s(L);
      if (L || E.match(n))
        return E;
      if (R && !R.host && !R.path)
        return R.host = E, s(R);
      var D = E.charAt(0) === "/" ? E : o(f.replace(/\/+$/, "") + "/" + E);
      return R ? (R.path = D, s(R)) : D;
    }
    t.join = c, t.isAbsolute = function(f) {
      return f.charAt(0) === "/" || r.test(f);
    };
    function a(f, E) {
      f === "" && (f = "."), f = f.replace(/\/$/, "");
      for (var L = 0; E.indexOf(f + "/") !== 0; ) {
        var R = f.lastIndexOf("/");
        if (R < 0 || (f = f.slice(0, R), f.match(/^([^\/]+:\/)?\/*$/)))
          return E;
        ++L;
      }
      return Array(L + 1).join("../") + E.substr(f.length + 1);
    }
    t.relative = a;
    var u = function() {
      var f = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in f);
    }();
    function l(f) {
      return f;
    }
    function h(f) {
      return p(f) ? "$" + f : f;
    }
    t.toSetString = u ? l : h;
    function d(f) {
      return p(f) ? f.slice(1) : f;
    }
    t.fromSetString = u ? l : d;
    function p(f) {
      if (!f)
        return !1;
      var E = f.length;
      if (E < 9 || f.charCodeAt(E - 1) !== 95 || f.charCodeAt(E - 2) !== 95 || f.charCodeAt(E - 3) !== 111 || f.charCodeAt(E - 4) !== 116 || f.charCodeAt(E - 5) !== 111 || f.charCodeAt(E - 6) !== 114 || f.charCodeAt(E - 7) !== 112 || f.charCodeAt(E - 8) !== 95 || f.charCodeAt(E - 9) !== 95)
        return !1;
      for (var L = E - 10; L >= 0; L--)
        if (f.charCodeAt(L) !== 36)
          return !1;
      return !0;
    }
    function m(f, E, L) {
      var R = _(f.source, E.source);
      return R !== 0 || (R = f.originalLine - E.originalLine, R !== 0) || (R = f.originalColumn - E.originalColumn, R !== 0 || L) || (R = f.generatedColumn - E.generatedColumn, R !== 0) || (R = f.generatedLine - E.generatedLine, R !== 0) ? R : _(f.name, E.name);
    }
    t.compareByOriginalPositions = m;
    function g(f, E, L) {
      var R = f.generatedLine - E.generatedLine;
      return R !== 0 || (R = f.generatedColumn - E.generatedColumn, R !== 0 || L) || (R = _(f.source, E.source), R !== 0) || (R = f.originalLine - E.originalLine, R !== 0) || (R = f.originalColumn - E.originalColumn, R !== 0) ? R : _(f.name, E.name);
    }
    t.compareByGeneratedPositionsDeflated = g;
    function _(f, E) {
      return f === E ? 0 : f === null ? 1 : E === null ? -1 : f > E ? 1 : -1;
    }
    function y(f, E) {
      var L = f.generatedLine - E.generatedLine;
      return L !== 0 || (L = f.generatedColumn - E.generatedColumn, L !== 0) || (L = _(f.source, E.source), L !== 0) || (L = f.originalLine - E.originalLine, L !== 0) || (L = f.originalColumn - E.originalColumn, L !== 0) ? L : _(f.name, E.name);
    }
    t.compareByGeneratedPositionsInflated = y;
    function T(f) {
      return JSON.parse(f.replace(/^\)]}'[^\n]*\n/, ""));
    }
    t.parseSourceMapInput = T;
    function v(f, E, L) {
      if (E = E || "", f && (f[f.length - 1] !== "/" && E[0] !== "/" && (f += "/"), E = f + E), L) {
        var R = i(L);
        if (!R)
          throw new Error("sourceMapURL could not be parsed");
        if (R.path) {
          var D = R.path.lastIndexOf("/");
          D >= 0 && (R.path = R.path.substring(0, D + 1));
        }
        E = c(s(R), E);
      }
      return o(E);
    }
    t.computeSourceURL = v;
  }(Wr)), Wr;
}
var Kr = {}, us;
function ia() {
  if (us) return Kr;
  us = 1;
  var t = jt(), e = Object.prototype.hasOwnProperty, r = typeof Map < "u";
  function n() {
    this._array = [], this._set = r ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
  }
  return n.fromArray = function(s, o) {
    for (var c = new n(), a = 0, u = s.length; a < u; a++)
      c.add(s[a], o);
    return c;
  }, n.prototype.size = function() {
    return r ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  }, n.prototype.add = function(s, o) {
    var c = r ? s : t.toSetString(s), a = r ? this.has(s) : e.call(this._set, c), u = this._array.length;
    (!a || o) && this._array.push(s), a || (r ? this._set.set(s, u) : this._set[c] = u);
  }, n.prototype.has = function(s) {
    if (r)
      return this._set.has(s);
    var o = t.toSetString(s);
    return e.call(this._set, o);
  }, n.prototype.indexOf = function(s) {
    if (r) {
      var o = this._set.get(s);
      if (o >= 0)
        return o;
    } else {
      var c = t.toSetString(s);
      if (e.call(this._set, c))
        return this._set[c];
    }
    throw new Error('"' + s + '" is not in the set.');
  }, n.prototype.at = function(s) {
    if (s >= 0 && s < this._array.length)
      return this._array[s];
    throw new Error("No element indexed by " + s);
  }, n.prototype.toArray = function() {
    return this._array.slice();
  }, Kr.ArraySet = n, Kr;
}
var Hr = {}, ls;
function gm() {
  if (ls) return Hr;
  ls = 1;
  var t = jt();
  function e(n, i) {
    var s = n.generatedLine, o = i.generatedLine, c = n.generatedColumn, a = i.generatedColumn;
    return o > s || o == s && a >= c || t.compareByGeneratedPositionsInflated(n, i) <= 0;
  }
  function r() {
    this._array = [], this._sorted = !0, this._last = { generatedLine: -1, generatedColumn: 0 };
  }
  return r.prototype.unsortedForEach = function(i, s) {
    this._array.forEach(i, s);
  }, r.prototype.add = function(i) {
    e(this._last, i) ? (this._last = i, this._array.push(i)) : (this._sorted = !1, this._array.push(i));
  }, r.prototype.toArray = function() {
    return this._sorted || (this._array.sort(t.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
  }, Hr.MappingList = r, Hr;
}
var hs;
function sa() {
  if (hs) return Vr;
  hs = 1;
  var t = na(), e = jt(), r = ia().ArraySet, n = gm().MappingList;
  function i(s) {
    s || (s = {}), this._file = e.getArg(s, "file", null), this._sourceRoot = e.getArg(s, "sourceRoot", null), this._skipValidation = e.getArg(s, "skipValidation", !1), this._sources = new r(), this._names = new r(), this._mappings = new n(), this._sourcesContents = null;
  }
  return i.prototype._version = 3, i.fromSourceMap = function(o) {
    var c = o.sourceRoot, a = new i({
      file: o.file,
      sourceRoot: c
    });
    return o.eachMapping(function(u) {
      var l = {
        generated: {
          line: u.generatedLine,
          column: u.generatedColumn
        }
      };
      u.source != null && (l.source = u.source, c != null && (l.source = e.relative(c, l.source)), l.original = {
        line: u.originalLine,
        column: u.originalColumn
      }, u.name != null && (l.name = u.name)), a.addMapping(l);
    }), o.sources.forEach(function(u) {
      var l = u;
      c !== null && (l = e.relative(c, u)), a._sources.has(l) || a._sources.add(l);
      var h = o.sourceContentFor(u);
      h != null && a.setSourceContent(u, h);
    }), a;
  }, i.prototype.addMapping = function(o) {
    var c = e.getArg(o, "generated"), a = e.getArg(o, "original", null), u = e.getArg(o, "source", null), l = e.getArg(o, "name", null);
    this._skipValidation || this._validateMapping(c, a, u, l), u != null && (u = String(u), this._sources.has(u) || this._sources.add(u)), l != null && (l = String(l), this._names.has(l) || this._names.add(l)), this._mappings.add({
      generatedLine: c.line,
      generatedColumn: c.column,
      originalLine: a != null && a.line,
      originalColumn: a != null && a.column,
      source: u,
      name: l
    });
  }, i.prototype.setSourceContent = function(o, c) {
    var a = o;
    this._sourceRoot != null && (a = e.relative(this._sourceRoot, a)), c != null ? (this._sourcesContents || (this._sourcesContents = /* @__PURE__ */ Object.create(null)), this._sourcesContents[e.toSetString(a)] = c) : this._sourcesContents && (delete this._sourcesContents[e.toSetString(a)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
  }, i.prototype.applySourceMap = function(o, c, a) {
    var u = c;
    if (c == null) {
      if (o.file == null)
        throw new Error(
          `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
        );
      u = o.file;
    }
    var l = this._sourceRoot;
    l != null && (u = e.relative(l, u));
    var h = new r(), d = new r();
    this._mappings.unsortedForEach(function(p) {
      if (p.source === u && p.originalLine != null) {
        var m = o.originalPositionFor({
          line: p.originalLine,
          column: p.originalColumn
        });
        m.source != null && (p.source = m.source, a != null && (p.source = e.join(a, p.source)), l != null && (p.source = e.relative(l, p.source)), p.originalLine = m.line, p.originalColumn = m.column, m.name != null && (p.name = m.name));
      }
      var g = p.source;
      g != null && !h.has(g) && h.add(g);
      var _ = p.name;
      _ != null && !d.has(_) && d.add(_);
    }, this), this._sources = h, this._names = d, o.sources.forEach(function(p) {
      var m = o.sourceContentFor(p);
      m != null && (a != null && (p = e.join(a, p)), l != null && (p = e.relative(l, p)), this.setSourceContent(p, m));
    }, this);
  }, i.prototype._validateMapping = function(o, c, a, u) {
    if (c && typeof c.line != "number" && typeof c.column != "number")
      throw new Error(
        "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
      );
    if (!(o && "line" in o && "column" in o && o.line > 0 && o.column >= 0 && !c && !a && !u)) {
      if (o && "line" in o && "column" in o && c && "line" in c && "column" in c && o.line > 0 && o.column >= 0 && c.line > 0 && c.column >= 0 && a)
        return;
      throw new Error("Invalid mapping: " + JSON.stringify({
        generated: o,
        source: a,
        original: c,
        name: u
      }));
    }
  }, i.prototype._serializeMappings = function() {
    for (var o = 0, c = 1, a = 0, u = 0, l = 0, h = 0, d = "", p, m, g, _, y = this._mappings.toArray(), T = 0, v = y.length; T < v; T++) {
      if (m = y[T], p = "", m.generatedLine !== c)
        for (o = 0; m.generatedLine !== c; )
          p += ";", c++;
      else if (T > 0) {
        if (!e.compareByGeneratedPositionsInflated(m, y[T - 1]))
          continue;
        p += ",";
      }
      p += t.encode(m.generatedColumn - o), o = m.generatedColumn, m.source != null && (_ = this._sources.indexOf(m.source), p += t.encode(_ - h), h = _, p += t.encode(m.originalLine - 1 - u), u = m.originalLine - 1, p += t.encode(m.originalColumn - a), a = m.originalColumn, m.name != null && (g = this._names.indexOf(m.name), p += t.encode(g - l), l = g)), d += p;
    }
    return d;
  }, i.prototype._generateSourcesContent = function(o, c) {
    return o.map(function(a) {
      if (!this._sourcesContents)
        return null;
      c != null && (a = e.relative(c, a));
      var u = e.toSetString(a);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, u) ? this._sourcesContents[u] : null;
    }, this);
  }, i.prototype.toJSON = function() {
    var o = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    return this._file != null && (o.file = this._file), this._sourceRoot != null && (o.sourceRoot = this._sourceRoot), this._sourcesContents && (o.sourcesContent = this._generateSourcesContent(o.sources, o.sourceRoot)), o;
  }, i.prototype.toString = function() {
    return JSON.stringify(this.toJSON());
  }, Vr.SourceMapGenerator = i, Vr;
}
var yt = {}, zr = {}, fs;
function Em() {
  return fs || (fs = 1, function(t) {
    t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2;
    function e(r, n, i, s, o, c) {
      var a = Math.floor((n - r) / 2) + r, u = o(i, s[a], !0);
      return u === 0 ? a : u > 0 ? n - a > 1 ? e(a, n, i, s, o, c) : c == t.LEAST_UPPER_BOUND ? n < s.length ? n : -1 : a : a - r > 1 ? e(r, a, i, s, o, c) : c == t.LEAST_UPPER_BOUND ? a : r < 0 ? -1 : r;
    }
    t.search = function(n, i, s, o) {
      if (i.length === 0)
        return -1;
      var c = e(
        -1,
        i.length,
        n,
        i,
        s,
        o || t.GREATEST_LOWER_BOUND
      );
      if (c < 0)
        return -1;
      for (; c - 1 >= 0 && s(i[c], i[c - 1], !0) === 0; )
        --c;
      return c;
    };
  }(zr)), zr;
}
var Yr = {}, ps;
function vm() {
  if (ps) return Yr;
  ps = 1;
  function t(n, i, s) {
    var o = n[i];
    n[i] = n[s], n[s] = o;
  }
  function e(n, i) {
    return Math.round(n + Math.random() * (i - n));
  }
  function r(n, i, s, o) {
    if (s < o) {
      var c = e(s, o), a = s - 1;
      t(n, c, o);
      for (var u = n[o], l = s; l < o; l++)
        i(n[l], u) <= 0 && (a += 1, t(n, a, l));
      t(n, a + 1, l);
      var h = a + 1;
      r(n, i, s, h - 1), r(n, i, h + 1, o);
    }
  }
  return Yr.quickSort = function(n, i) {
    r(n, i, 0, n.length - 1);
  }, Yr;
}
var ds;
function Tm() {
  if (ds) return yt;
  ds = 1;
  var t = jt(), e = Em(), r = ia().ArraySet, n = na(), i = vm().quickSort;
  function s(u, l) {
    var h = u;
    return typeof u == "string" && (h = t.parseSourceMapInput(u)), h.sections != null ? new a(h, l) : new o(h, l);
  }
  s.fromSourceMap = function(u, l) {
    return o.fromSourceMap(u, l);
  }, s.prototype._version = 3, s.prototype.__generatedMappings = null, Object.defineProperty(s.prototype, "_generatedMappings", {
    configurable: !0,
    enumerable: !0,
    get: function() {
      return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
    }
  }), s.prototype.__originalMappings = null, Object.defineProperty(s.prototype, "_originalMappings", {
    configurable: !0,
    enumerable: !0,
    get: function() {
      return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
    }
  }), s.prototype._charIsMappingSeparator = function(l, h) {
    var d = l.charAt(h);
    return d === ";" || d === ",";
  }, s.prototype._parseMappings = function(l, h) {
    throw new Error("Subclasses must implement _parseMappings");
  }, s.GENERATED_ORDER = 1, s.ORIGINAL_ORDER = 2, s.GREATEST_LOWER_BOUND = 1, s.LEAST_UPPER_BOUND = 2, s.prototype.eachMapping = function(l, h, d) {
    var p = h || null, m = d || s.GENERATED_ORDER, g;
    switch (m) {
      case s.GENERATED_ORDER:
        g = this._generatedMappings;
        break;
      case s.ORIGINAL_ORDER:
        g = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
    }
    var _ = this.sourceRoot;
    g.map(function(y) {
      var T = y.source === null ? null : this._sources.at(y.source);
      return T = t.computeSourceURL(_, T, this._sourceMapURL), {
        source: T,
        generatedLine: y.generatedLine,
        generatedColumn: y.generatedColumn,
        originalLine: y.originalLine,
        originalColumn: y.originalColumn,
        name: y.name === null ? null : this._names.at(y.name)
      };
    }, this).forEach(l, p);
  }, s.prototype.allGeneratedPositionsFor = function(l) {
    var h = t.getArg(l, "line"), d = {
      source: t.getArg(l, "source"),
      originalLine: h,
      originalColumn: t.getArg(l, "column", 0)
    };
    if (d.source = this._findSourceIndex(d.source), d.source < 0)
      return [];
    var p = [], m = this._findMapping(
      d,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      t.compareByOriginalPositions,
      e.LEAST_UPPER_BOUND
    );
    if (m >= 0) {
      var g = this._originalMappings[m];
      if (l.column === void 0)
        for (var _ = g.originalLine; g && g.originalLine === _; )
          p.push({
            line: t.getArg(g, "generatedLine", null),
            column: t.getArg(g, "generatedColumn", null),
            lastColumn: t.getArg(g, "lastGeneratedColumn", null)
          }), g = this._originalMappings[++m];
      else
        for (var y = g.originalColumn; g && g.originalLine === h && g.originalColumn == y; )
          p.push({
            line: t.getArg(g, "generatedLine", null),
            column: t.getArg(g, "generatedColumn", null),
            lastColumn: t.getArg(g, "lastGeneratedColumn", null)
          }), g = this._originalMappings[++m];
    }
    return p;
  }, yt.SourceMapConsumer = s;
  function o(u, l) {
    var h = u;
    typeof u == "string" && (h = t.parseSourceMapInput(u));
    var d = t.getArg(h, "version"), p = t.getArg(h, "sources"), m = t.getArg(h, "names", []), g = t.getArg(h, "sourceRoot", null), _ = t.getArg(h, "sourcesContent", null), y = t.getArg(h, "mappings"), T = t.getArg(h, "file", null);
    if (d != this._version)
      throw new Error("Unsupported version: " + d);
    g && (g = t.normalize(g)), p = p.map(String).map(t.normalize).map(function(v) {
      return g && t.isAbsolute(g) && t.isAbsolute(v) ? t.relative(g, v) : v;
    }), this._names = r.fromArray(m.map(String), !0), this._sources = r.fromArray(p, !0), this._absoluteSources = this._sources.toArray().map(function(v) {
      return t.computeSourceURL(g, v, l);
    }), this.sourceRoot = g, this.sourcesContent = _, this._mappings = y, this._sourceMapURL = l, this.file = T;
  }
  o.prototype = Object.create(s.prototype), o.prototype.consumer = s, o.prototype._findSourceIndex = function(u) {
    var l = u;
    if (this.sourceRoot != null && (l = t.relative(this.sourceRoot, l)), this._sources.has(l))
      return this._sources.indexOf(l);
    var h;
    for (h = 0; h < this._absoluteSources.length; ++h)
      if (this._absoluteSources[h] == u)
        return h;
    return -1;
  }, o.fromSourceMap = function(l, h) {
    var d = Object.create(o.prototype), p = d._names = r.fromArray(l._names.toArray(), !0), m = d._sources = r.fromArray(l._sources.toArray(), !0);
    d.sourceRoot = l._sourceRoot, d.sourcesContent = l._generateSourcesContent(
      d._sources.toArray(),
      d.sourceRoot
    ), d.file = l._file, d._sourceMapURL = h, d._absoluteSources = d._sources.toArray().map(function(L) {
      return t.computeSourceURL(d.sourceRoot, L, h);
    });
    for (var g = l._mappings.toArray().slice(), _ = d.__generatedMappings = [], y = d.__originalMappings = [], T = 0, v = g.length; T < v; T++) {
      var f = g[T], E = new c();
      E.generatedLine = f.generatedLine, E.generatedColumn = f.generatedColumn, f.source && (E.source = m.indexOf(f.source), E.originalLine = f.originalLine, E.originalColumn = f.originalColumn, f.name && (E.name = p.indexOf(f.name)), y.push(E)), _.push(E);
    }
    return i(d.__originalMappings, t.compareByOriginalPositions), d;
  }, o.prototype._version = 3, Object.defineProperty(o.prototype, "sources", {
    get: function() {
      return this._absoluteSources.slice();
    }
  });
  function c() {
    this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
  }
  o.prototype._parseMappings = function(l, h) {
    for (var d = 1, p = 0, m = 0, g = 0, _ = 0, y = 0, T = l.length, v = 0, f = {}, E = {}, L = [], R = [], D, Q, F, I, w; v < T; )
      if (l.charAt(v) === ";")
        d++, v++, p = 0;
      else if (l.charAt(v) === ",")
        v++;
      else {
        for (D = new c(), D.generatedLine = d, I = v; I < T && !this._charIsMappingSeparator(l, I); I++)
          ;
        if (Q = l.slice(v, I), F = f[Q], F)
          v += Q.length;
        else {
          for (F = []; v < I; )
            n.decode(l, v, E), w = E.value, v = E.rest, F.push(w);
          if (F.length === 2)
            throw new Error("Found a source, but no line and column");
          if (F.length === 3)
            throw new Error("Found a source and line, but no column");
          f[Q] = F;
        }
        D.generatedColumn = p + F[0], p = D.generatedColumn, F.length > 1 && (D.source = _ + F[1], _ += F[1], D.originalLine = m + F[2], m = D.originalLine, D.originalLine += 1, D.originalColumn = g + F[3], g = D.originalColumn, F.length > 4 && (D.name = y + F[4], y += F[4])), R.push(D), typeof D.originalLine == "number" && L.push(D);
      }
    i(R, t.compareByGeneratedPositionsDeflated), this.__generatedMappings = R, i(L, t.compareByOriginalPositions), this.__originalMappings = L;
  }, o.prototype._findMapping = function(l, h, d, p, m, g) {
    if (l[d] <= 0)
      throw new TypeError("Line must be greater than or equal to 1, got " + l[d]);
    if (l[p] < 0)
      throw new TypeError("Column must be greater than or equal to 0, got " + l[p]);
    return e.search(l, h, m, g);
  }, o.prototype.computeColumnSpans = function() {
    for (var l = 0; l < this._generatedMappings.length; ++l) {
      var h = this._generatedMappings[l];
      if (l + 1 < this._generatedMappings.length) {
        var d = this._generatedMappings[l + 1];
        if (h.generatedLine === d.generatedLine) {
          h.lastGeneratedColumn = d.generatedColumn - 1;
          continue;
        }
      }
      h.lastGeneratedColumn = 1 / 0;
    }
  }, o.prototype.originalPositionFor = function(l) {
    var h = {
      generatedLine: t.getArg(l, "line"),
      generatedColumn: t.getArg(l, "column")
    }, d = this._findMapping(
      h,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      t.compareByGeneratedPositionsDeflated,
      t.getArg(l, "bias", s.GREATEST_LOWER_BOUND)
    );
    if (d >= 0) {
      var p = this._generatedMappings[d];
      if (p.generatedLine === h.generatedLine) {
        var m = t.getArg(p, "source", null);
        m !== null && (m = this._sources.at(m), m = t.computeSourceURL(this.sourceRoot, m, this._sourceMapURL));
        var g = t.getArg(p, "name", null);
        return g !== null && (g = this._names.at(g)), {
          source: m,
          line: t.getArg(p, "originalLine", null),
          column: t.getArg(p, "originalColumn", null),
          name: g
        };
      }
    }
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }, o.prototype.hasContentsOfAllSources = function() {
    return this.sourcesContent ? this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(l) {
      return l == null;
    }) : !1;
  }, o.prototype.sourceContentFor = function(l, h) {
    if (!this.sourcesContent)
      return null;
    var d = this._findSourceIndex(l);
    if (d >= 0)
      return this.sourcesContent[d];
    var p = l;
    this.sourceRoot != null && (p = t.relative(this.sourceRoot, p));
    var m;
    if (this.sourceRoot != null && (m = t.urlParse(this.sourceRoot))) {
      var g = p.replace(/^file:\/\//, "");
      if (m.scheme == "file" && this._sources.has(g))
        return this.sourcesContent[this._sources.indexOf(g)];
      if ((!m.path || m.path == "/") && this._sources.has("/" + p))
        return this.sourcesContent[this._sources.indexOf("/" + p)];
    }
    if (h)
      return null;
    throw new Error('"' + p + '" is not in the SourceMap.');
  }, o.prototype.generatedPositionFor = function(l) {
    var h = t.getArg(l, "source");
    if (h = this._findSourceIndex(h), h < 0)
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    var d = {
      source: h,
      originalLine: t.getArg(l, "line"),
      originalColumn: t.getArg(l, "column")
    }, p = this._findMapping(
      d,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      t.compareByOriginalPositions,
      t.getArg(l, "bias", s.GREATEST_LOWER_BOUND)
    );
    if (p >= 0) {
      var m = this._originalMappings[p];
      if (m.source === d.source)
        return {
          line: t.getArg(m, "generatedLine", null),
          column: t.getArg(m, "generatedColumn", null),
          lastColumn: t.getArg(m, "lastGeneratedColumn", null)
        };
    }
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  }, yt.BasicSourceMapConsumer = o;
  function a(u, l) {
    var h = u;
    typeof u == "string" && (h = t.parseSourceMapInput(u));
    var d = t.getArg(h, "version"), p = t.getArg(h, "sections");
    if (d != this._version)
      throw new Error("Unsupported version: " + d);
    this._sources = new r(), this._names = new r();
    var m = {
      line: -1,
      column: 0
    };
    this._sections = p.map(function(g) {
      if (g.url)
        throw new Error("Support for url field in sections not implemented.");
      var _ = t.getArg(g, "offset"), y = t.getArg(_, "line"), T = t.getArg(_, "column");
      if (y < m.line || y === m.line && T < m.column)
        throw new Error("Section offsets must be ordered and non-overlapping.");
      return m = _, {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: y + 1,
          generatedColumn: T + 1
        },
        consumer: new s(t.getArg(g, "map"), l)
      };
    });
  }
  return a.prototype = Object.create(s.prototype), a.prototype.constructor = s, a.prototype._version = 3, Object.defineProperty(a.prototype, "sources", {
    get: function() {
      for (var u = [], l = 0; l < this._sections.length; l++)
        for (var h = 0; h < this._sections[l].consumer.sources.length; h++)
          u.push(this._sections[l].consumer.sources[h]);
      return u;
    }
  }), a.prototype.originalPositionFor = function(l) {
    var h = {
      generatedLine: t.getArg(l, "line"),
      generatedColumn: t.getArg(l, "column")
    }, d = e.search(
      h,
      this._sections,
      function(m, g) {
        var _ = m.generatedLine - g.generatedOffset.generatedLine;
        return _ || m.generatedColumn - g.generatedOffset.generatedColumn;
      }
    ), p = this._sections[d];
    return p ? p.consumer.originalPositionFor({
      line: h.generatedLine - (p.generatedOffset.generatedLine - 1),
      column: h.generatedColumn - (p.generatedOffset.generatedLine === h.generatedLine ? p.generatedOffset.generatedColumn - 1 : 0),
      bias: l.bias
    }) : {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }, a.prototype.hasContentsOfAllSources = function() {
    return this._sections.every(function(l) {
      return l.consumer.hasContentsOfAllSources();
    });
  }, a.prototype.sourceContentFor = function(l, h) {
    for (var d = 0; d < this._sections.length; d++) {
      var p = this._sections[d], m = p.consumer.sourceContentFor(l, !0);
      if (m)
        return m;
    }
    if (h)
      return null;
    throw new Error('"' + l + '" is not in the SourceMap.');
  }, a.prototype.generatedPositionFor = function(l) {
    for (var h = 0; h < this._sections.length; h++) {
      var d = this._sections[h];
      if (d.consumer._findSourceIndex(t.getArg(l, "source")) !== -1) {
        var p = d.consumer.generatedPositionFor(l);
        if (p) {
          var m = {
            line: p.line + (d.generatedOffset.generatedLine - 1),
            column: p.column + (d.generatedOffset.generatedLine === p.line ? d.generatedOffset.generatedColumn - 1 : 0)
          };
          return m;
        }
      }
    }
    return {
      line: null,
      column: null
    };
  }, a.prototype._parseMappings = function(l, h) {
    this.__generatedMappings = [], this.__originalMappings = [];
    for (var d = 0; d < this._sections.length; d++)
      for (var p = this._sections[d], m = p.consumer._generatedMappings, g = 0; g < m.length; g++) {
        var _ = m[g], y = p.consumer._sources.at(_.source);
        y = t.computeSourceURL(p.consumer.sourceRoot, y, this._sourceMapURL), this._sources.add(y), y = this._sources.indexOf(y);
        var T = null;
        _.name && (T = p.consumer._names.at(_.name), this._names.add(T), T = this._names.indexOf(T));
        var v = {
          source: y,
          generatedLine: _.generatedLine + (p.generatedOffset.generatedLine - 1),
          generatedColumn: _.generatedColumn + (p.generatedOffset.generatedLine === _.generatedLine ? p.generatedOffset.generatedColumn - 1 : 0),
          originalLine: _.originalLine,
          originalColumn: _.originalColumn,
          name: T
        };
        this.__generatedMappings.push(v), typeof v.originalLine == "number" && this.__originalMappings.push(v);
      }
    i(this.__generatedMappings, t.compareByGeneratedPositionsDeflated), i(this.__originalMappings, t.compareByOriginalPositions);
  }, yt.IndexedSourceMapConsumer = a, yt;
}
var qr = {}, ms;
function _m() {
  if (ms) return qr;
  ms = 1;
  var t = sa().SourceMapGenerator, e = jt(), r = /(\r?\n)/, n = 10, i = "$$$isSourceNode$$$";
  function s(o, c, a, u, l) {
    this.children = [], this.sourceContents = {}, this.line = o ?? null, this.column = c ?? null, this.source = a ?? null, this.name = l ?? null, this[i] = !0, u != null && this.add(u);
  }
  return s.fromStringWithSourceMap = function(c, a, u) {
    var l = new s(), h = c.split(r), d = 0, p = function() {
      var T = f(), v = f() || "";
      return T + v;
      function f() {
        return d < h.length ? h[d++] : void 0;
      }
    }, m = 1, g = 0, _ = null;
    return a.eachMapping(function(T) {
      if (_ !== null)
        if (m < T.generatedLine)
          y(_, p()), m++, g = 0;
        else {
          var v = h[d] || "", f = v.substr(0, T.generatedColumn - g);
          h[d] = v.substr(T.generatedColumn - g), g = T.generatedColumn, y(_, f), _ = T;
          return;
        }
      for (; m < T.generatedLine; )
        l.add(p()), m++;
      if (g < T.generatedColumn) {
        var v = h[d] || "";
        l.add(v.substr(0, T.generatedColumn)), h[d] = v.substr(T.generatedColumn), g = T.generatedColumn;
      }
      _ = T;
    }, this), d < h.length && (_ && y(_, p()), l.add(h.splice(d).join(""))), a.sources.forEach(function(T) {
      var v = a.sourceContentFor(T);
      v != null && (u != null && (T = e.join(u, T)), l.setSourceContent(T, v));
    }), l;
    function y(T, v) {
      if (T === null || T.source === void 0)
        l.add(v);
      else {
        var f = u ? e.join(u, T.source) : T.source;
        l.add(new s(
          T.originalLine,
          T.originalColumn,
          f,
          v,
          T.name
        ));
      }
    }
  }, s.prototype.add = function(c) {
    if (Array.isArray(c))
      c.forEach(function(a) {
        this.add(a);
      }, this);
    else if (c[i] || typeof c == "string")
      c && this.children.push(c);
    else
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + c
      );
    return this;
  }, s.prototype.prepend = function(c) {
    if (Array.isArray(c))
      for (var a = c.length - 1; a >= 0; a--)
        this.prepend(c[a]);
    else if (c[i] || typeof c == "string")
      this.children.unshift(c);
    else
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + c
      );
    return this;
  }, s.prototype.walk = function(c) {
    for (var a, u = 0, l = this.children.length; u < l; u++)
      a = this.children[u], a[i] ? a.walk(c) : a !== "" && c(a, {
        source: this.source,
        line: this.line,
        column: this.column,
        name: this.name
      });
  }, s.prototype.join = function(c) {
    var a, u, l = this.children.length;
    if (l > 0) {
      for (a = [], u = 0; u < l - 1; u++)
        a.push(this.children[u]), a.push(c);
      a.push(this.children[u]), this.children = a;
    }
    return this;
  }, s.prototype.replaceRight = function(c, a) {
    var u = this.children[this.children.length - 1];
    return u[i] ? u.replaceRight(c, a) : typeof u == "string" ? this.children[this.children.length - 1] = u.replace(c, a) : this.children.push("".replace(c, a)), this;
  }, s.prototype.setSourceContent = function(c, a) {
    this.sourceContents[e.toSetString(c)] = a;
  }, s.prototype.walkSourceContents = function(c) {
    for (var a = 0, u = this.children.length; a < u; a++)
      this.children[a][i] && this.children[a].walkSourceContents(c);
    for (var l = Object.keys(this.sourceContents), a = 0, u = l.length; a < u; a++)
      c(e.fromSetString(l[a]), this.sourceContents[l[a]]);
  }, s.prototype.toString = function() {
    var c = "";
    return this.walk(function(a) {
      c += a;
    }), c;
  }, s.prototype.toStringWithSourceMap = function(c) {
    var a = {
      code: "",
      line: 1,
      column: 0
    }, u = new t(c), l = !1, h = null, d = null, p = null, m = null;
    return this.walk(function(g, _) {
      a.code += g, _.source !== null && _.line !== null && _.column !== null ? ((h !== _.source || d !== _.line || p !== _.column || m !== _.name) && u.addMapping({
        source: _.source,
        original: {
          line: _.line,
          column: _.column
        },
        generated: {
          line: a.line,
          column: a.column
        },
        name: _.name
      }), h = _.source, d = _.line, p = _.column, m = _.name, l = !0) : l && (u.addMapping({
        generated: {
          line: a.line,
          column: a.column
        }
      }), h = null, l = !1);
      for (var y = 0, T = g.length; y < T; y++)
        g.charCodeAt(y) === n ? (a.line++, a.column = 0, y + 1 === T ? (h = null, l = !1) : l && u.addMapping({
          source: _.source,
          original: {
            line: _.line,
            column: _.column
          },
          generated: {
            line: a.line,
            column: a.column
          },
          name: _.name
        })) : a.column++;
    }), this.walkSourceContents(function(g, _) {
      u.setSourceContent(g, _);
    }), { code: a.code, map: u };
  }, qr.SourceNode = s, qr;
}
var gs;
function Es() {
  return gs || (gs = 1, _t.SourceMapGenerator = sa().SourceMapGenerator, _t.SourceMapConsumer = Tm().SourceMapConsumer, _t.SourceNode = _m().SourceNode), _t;
}
var Xr = { exports: {} }, vs;
function ym() {
  return vs || (vs = 1, function(t) {
    (function(e) {
      function r(i) {
        return typeof i == "function" ? i : typeof Buffer == "function" ? function(o) {
          //!! Deliberately using an API that's deprecated in node.js because
          //!! this file is for browsers and we expect them to cope with it.
          //!! Discussion: github.com/node-browser-compat/atob/pull/9
          return new Buffer(o, "base64").toString("binary");
        } : typeof e.base64js == "object" ? function(o) {
          var c = e.base64js.b64ToByteArray(o);
          return Array.prototype.map.call(c, function(a) {
            return String.fromCharCode(a);
          }).join("");
        } : function() {
          throw new Error("You're probably in an old browser or an iOS webworker. It might help to include beatgammit's base64-js.");
        };
      }
      var n = r(e.atob);
      e.atob = n, t && t.exports && (t.exports = n);
    })(window);
  }(Xr)), Xr.exports;
}
const Am = {}, Sm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Am
}, Symbol.toStringTag, { value: "Module" })), mr = /* @__PURE__ */ um(Sm);
var Qr, Ts;
function Rm() {
  if (Ts) return Qr;
  Ts = 1;
  var t = "%[a-f0-9]{2}", e = new RegExp("(" + t + ")|([^%]+?)", "gi"), r = new RegExp("(" + t + ")+", "gi");
  function n(o, c) {
    try {
      return [decodeURIComponent(o.join(""))];
    } catch {
    }
    if (o.length === 1)
      return o;
    c = c || 1;
    var a = o.slice(0, c), u = o.slice(c);
    return Array.prototype.concat.call([], n(a), n(u));
  }
  function i(o) {
    try {
      return decodeURIComponent(o);
    } catch {
      for (var c = o.match(e) || [], a = 1; a < c.length; a++)
        o = n(c, a).join(""), c = o.match(e) || [];
      return o;
    }
  }
  function s(o) {
    for (var c = {
      "%FE%FF": "��",
      "%FF%FE": "��"
    }, a = r.exec(o); a; ) {
      try {
        c[a[0]] = decodeURIComponent(a[0]);
      } catch {
        var u = i(a[0]);
        u !== a[0] && (c[a[0]] = u);
      }
      a = r.exec(o);
    }
    c["%C2"] = "�";
    for (var l = Object.keys(c), h = 0; h < l.length; h++) {
      var d = l[h];
      o = o.replace(new RegExp(d, "g"), c[d]);
    }
    return o;
  }
  return Qr = function(o) {
    if (typeof o != "string")
      throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof o + "`");
    try {
      return o = o.replace(/\+/g, " "), decodeURIComponent(o);
    } catch {
      return s(o);
    }
  }, Qr;
}
var Jr, _s;
function Om() {
  if (_s) return Jr;
  _s = 1;
  var t = ym(), e = mr, r = mr, n = Rm();
  function i() {
    return Array.prototype.reduce.call(arguments, function(I, w) {
      return e.resolve(I, w);
    });
  }
  function s(I) {
    return r.sep === "\\" ? I.replace(/\\/g, "/").replace(/^[a-z]:\/?/i, "/") : I;
  }
  function o(I) {
    return n(I.replace(/\+/g, "%2B"));
  }
  function c(I, w, x) {
    setImmediate(function() {
      I(w, x);
    });
  }
  function a(I, w) {
    try {
      return JSON.parse(I.replace(/^\)\]\}'/, ""));
    } catch (x) {
      throw x.sourceMapData = w, x;
    }
  }
  function u(I, w, x) {
    var k = o(w);
    try {
      return String(I(k));
    } catch (O) {
      throw O.sourceMapData = x, O;
    }
  }
  var l = /[#@] sourceMappingURL=([^\s'"]*)/, h = RegExp(
    `(?:/\\*(?:\\s*\r?
(?://)?)?(?:` + l.source + ")\\s*\\*/|//(?:" + l.source + "))\\s*"
  );
  function d(I) {
    var w = I.match(h);
    return w ? w[1] || w[2] || "" : null;
  }
  function p(I, w, x, k) {
    var O;
    try {
      O = f(I, w);
    } catch (U) {
      return c(k, U);
    }
    if (!O || O.map)
      return c(k, null, O);
    var $ = o(O.url);
    x($, function(U, G) {
      if (U)
        return U.sourceMapData = O, k(U);
      O.map = String(G);
      try {
        O.map = a(O.map, O);
      } catch (S) {
        return k(S);
      }
      k(null, O);
    });
  }
  function m(I, w, x) {
    var k = f(I, w);
    return !k || k.map || (k.map = u(x, k.url, k), k.map = a(k.map, k)), k;
  }
  var g = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/, _ = /^(?:application|text)\/json$/, y = "utf-8";
  function T(I) {
    for (var w = t(I), x = w.length, k = new Uint8Array(x), O = 0; O < x; O++)
      k[O] = w.charCodeAt(O);
    return k;
  }
  function v(I) {
    if (typeof TextDecoder > "u" || typeof Uint8Array > "u")
      return t(I);
    var w = T(I), x = new TextDecoder(y, { fatal: !0 });
    return x.decode(w);
  }
  function f(I, w) {
    w = s(w);
    var x = d(I);
    if (!x)
      return null;
    var k = x.match(g);
    if (k) {
      var O = k[1] || "text/plain", $ = k[2] || "", U = k[3] || "", G = {
        sourceMappingURL: x,
        url: null,
        sourcesRelativeTo: w,
        map: U
      };
      if (!_.test(O)) {
        var S = new Error("Unuseful data uri mime type: " + O);
        throw S.sourceMapData = G, S;
      }
      try {
        G.map = a(
          $ === ";base64" ? v(U) : decodeURIComponent(U),
          G
        );
      } catch (M) {
        throw M.sourceMapData = G, M;
      }
      return G;
    }
    var A = i(w, x);
    return {
      sourceMappingURL: x,
      url: A,
      sourcesRelativeTo: A,
      map: null
    };
  }
  function E(I, w, x, k, O) {
    typeof k == "function" && (O = k, k = {});
    var $ = I.sources ? I.sources.length : 0, U = {
      sourcesResolved: [],
      sourcesContent: []
    };
    if ($ === 0) {
      c(O, null, U);
      return;
    }
    var G = function() {
      $--, $ === 0 && O(null, U);
    };
    D(I, w, k, function(S, A, M) {
      if (U.sourcesResolved[M] = S, typeof A == "string")
        U.sourcesContent[M] = A, c(G, null);
      else {
        var B = o(S);
        x(B, function(se, te) {
          U.sourcesContent[M] = se || String(te), G();
        });
      }
    });
  }
  function L(I, w, x, k) {
    var O = {
      sourcesResolved: [],
      sourcesContent: []
    };
    return !I.sources || I.sources.length === 0 || D(I, w, k, function($, U, G) {
      if (O.sourcesResolved[G] = $, x !== null)
        if (typeof U == "string")
          O.sourcesContent[G] = U;
        else {
          var S = o($);
          try {
            O.sourcesContent[G] = String(x(S));
          } catch (A) {
            O.sourcesContent[G] = A;
          }
        }
    }), O;
  }
  var R = /\/?$/;
  function D(I, w, x, k) {
    x = x || {}, w = s(w);
    for (var O, $, U, G = 0, S = I.sources.length; G < S; G++)
      U = null, typeof x.sourceRoot == "string" ? U = x.sourceRoot : typeof I.sourceRoot == "string" && x.sourceRoot !== !1 && (U = I.sourceRoot), U === null || U === "" ? O = i(w, I.sources[G]) : O = i(w, U.replace(R, "/"), I.sources[G]), $ = (I.sourcesContent || [])[G], k(O, $, G);
  }
  function Q(I, w, x, k, O) {
    if (typeof k == "function" && (O = k, k = {}), I === null) {
      var $ = w, U = {
        sourceMappingURL: null,
        url: $,
        sourcesRelativeTo: $,
        map: null
      }, G = o($);
      x(G, function(A, M) {
        if (A)
          return A.sourceMapData = U, O(A);
        U.map = String(M);
        try {
          U.map = a(U.map, U);
        } catch (B) {
          return O(B);
        }
        S(U);
      });
    } else
      p(I, w, x, function(A, M) {
        if (A)
          return O(A);
        if (!M)
          return O(null, null);
        S(M);
      });
    function S(A) {
      E(A.map, A.sourcesRelativeTo, x, k, function(M, B) {
        if (M)
          return O(M);
        A.sourcesResolved = B.sourcesResolved, A.sourcesContent = B.sourcesContent, O(null, A);
      });
    }
  }
  function F(I, w, x, k) {
    var O;
    if (I === null) {
      var $ = w;
      O = {
        sourceMappingURL: null,
        url: $,
        sourcesRelativeTo: $,
        map: null
      }, O.map = u(x, $, O), O.map = a(O.map, O);
    } else if (O = m(I, w, x), !O)
      return null;
    var U = L(O.map, O.sourcesRelativeTo, x, k);
    return O.sourcesResolved = U.sourcesResolved, O.sourcesContent = U.sourcesContent, O;
  }
  return Jr = {
    resolveSourceMap: p,
    resolveSourceMapSync: m,
    resolveSources: E,
    resolveSourcesSync: L,
    resolve: Q,
    resolveSync: F,
    parseMapToJSON: a
  }, Jr;
}
var ys;
function Lm() {
  return ys || (ys = 1, function(t, e) {
    var r = Es().SourceMapGenerator, n = Es().SourceMapConsumer, i = Om(), s = mr, o = mr;
    t.exports = a;
    const c = function(u) {
      return o.sep === "\\" ? u.replace(/\\/g, "/").replace(/^[a-z]:\/?/i, "/") : u;
    };
    function a(u) {
      u._comment = u.comment, u.map = new r(), u.position = { line: 1, column: 1 }, u.files = {};
      for (var l in e) u[l] = e[l];
    }
    e.updatePosition = function(u) {
      var l = u.match(/\n/g);
      l && (this.position.line += l.length);
      var h = u.lastIndexOf(`
`);
      this.position.column = ~h ? u.length - h : this.position.column + u.length;
    }, e.emit = function(u, l) {
      if (l) {
        var h = c(l.source || "source.css");
        this.map.addMapping({
          source: h,
          generated: {
            line: this.position.line,
            column: Math.max(this.position.column - 1, 0)
          },
          original: {
            line: l.start.line,
            column: l.start.column - 1
          }
        }), this.addFile(h, l);
      }
      return this.updatePosition(u), u;
    }, e.addFile = function(u, l) {
      typeof l.content == "string" && (Object.prototype.hasOwnProperty.call(this.files, u) || (this.files[u] = l.content));
    }, e.applySourceMaps = function() {
      Object.keys(this.files).forEach(function(u) {
        var l = this.files[u];
        if (this.map.setSourceContent(u, l), this.options.inputSourcemaps !== !1) {
          var h = i.resolveSync(
            l,
            u,
            s.readFileSync
          );
          if (h) {
            var d = new n(h.map), p = h.sourcesRelativeTo;
            this.map.applySourceMap(d, u, c(o.dirname(p)));
          }
        }
      }, this);
    }, e.comment = function(u) {
      return /^# sourceMappingURL=/.test(u.comment) ? this.emit("", u.position) : this._comment(u);
    };
  }(Ht, Ht.exports)), Ht.exports;
}
var Im = fm, Cm = dm, Mm = function(t, e) {
  e = e || {};
  var r = e.compress ? new Im(e) : new Cm(e);
  if (e.sourcemap) {
    var n = Lm();
    n(r);
    var s = r.compile(t);
    r.applySourceMaps();
    var i = e.sourcemap === "generator" ? r.map : r.map.toJSON();
    return { code: s, map: i };
  }
  var s = r.compile(t);
  return s;
};
dr.parse = lm;
dr.stringify = Mm;
const bm = 2;
let Zr = 0;
function km(t) {
  return t.type !== "linebreak" ? (Zr = 0, !0) : (Zr++, Zr <= bm);
}
function Nm(t) {
  return t.replace(/{{--(?![\s\n\r\t])/g, "{{-- ").replace(new RegExp("(?<![\\s\\n\\r\\t])--}}", "g"), " --}}");
}
function en(t) {
  const e = /{{{[^{}]*}}}/g, r = "__TRIPLE_CURLY__", n = [];
  return t = t.replace(e, (i) => {
    const s = `${r}${n.length}`;
    return n.push(i), s;
  }), t = t.replace(/{{\s*/g, "{{ ").replace(/\s*}}/g, " }}"), n.forEach((i, s) => {
    t = t.replace(`${r}${s}`, i);
  }), t;
}
function tn(t) {
  return t.replace(/{{{\s*/g, "{{{ ").replace(/\s*}}}/g, " }}}");
}
function Pm(t, e, r, n, i, s) {
  const o = /<style\b[^>]*>([\s\S]*?)<\/style>/gi, c = /{{.*?}}/g, a = /{{{.*?}}}/g, u = /@(?!media|keyframes|supports|font-face|viewport|counter-style|page|document|font-feature-values)(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?[\s\S]*?@end/g, l = /@(assign|!component|debugger|eval|include|includeIf|inject|stack|svg|let|newError|vite|inertia|dd|dump)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/g;
  return t.value.replace(o, (d, p) => {
    let m = [], g = 0;
    p = p.replace(
      a,
      (v) => {
        const f = `__SAFE_MUSTACHE_TAG_${g++}__;`;
        return m.push(v), f;
      }
    ), p = p.replace(
      c,
      (v) => {
        const f = `__MUSTACHE_TAG_${g++}__;`;
        return m.push(v), f;
      }
    ), p = p.replace(
      u,
      (v) => {
        const f = `/*__EDGE_TAG_BLOCK_${g++}__*/`;
        return m.push(v), f;
      }
    ), p = p.replace(
      l,
      (v) => {
        const f = `/*__SINGLE_EDGE_TAG_${g++}__*/`;
        return m.push(v), f;
      }
    );
    const _ = dr.parse(p), y = dr.stringify(_, { indent: n });
    return `${e}<style>
${y.split(`
`).map((v) => `${r}${v}`).join(`
`)}
${e}</style>`.replace(/\/\*__EDGE_TAG_BLOCK_\d+__\*\//g, (v) => {
      const f = m[parseInt(v.match(/\d+/)[0], 10)], E = new Xn(f);
      return new Qn(
        {
          ...i
        },
        s + 2
      ).handlePrint(E).trim();
    }).replace(/__MUSTACHE_TAG_\d+__;/g, (v) => m[parseInt(v.match(/\d+/)[0], 10)]).replace(/__SAFE_MUSTACHE_TAG_\d+__;/g, (v) => m[parseInt(v.match(/\d+/)[0], 10)]).replace(/\/\*__SINGLE_EDGE_TAG_\d+__\*\//g, (v) => m[parseInt(v.match(/\d+/)[0], 10)]);
  });
}
function wm(t, e, r, n, i, s) {
  const o = /<script\b([^>]*)>([\s\S]*?)<\/script>/i, c = /{{.*?}}/g, a = /{{{.*?}}}/g, u = /@(!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?[\s\S]*?@end/g, l = /@(assign|!component|debugger|eval|include|includeIf|inject|stack|svg|let|newError|vite|inertia|dd|dump)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/g, h = t.value.match(o);
  if (!h)
    throw new Error("Invalid <script> tag format");
  const [d, p, m] = h;
  let g = [], _ = 0, y = m.replace(a, (f) => {
    const E = `__SAFE_MUSTACHE_TAG_${_++}__`;
    return g.push(f), E;
  }).replace(c, (f) => {
    const E = `__MUSTACHE_TAG_${_++}__`;
    return g.push(f), E;
  }).replace(u, (f) => {
    const E = `/*__EDGE_TAG_BLOCK_${_++}__*/`;
    return g.push(f), E;
  }).replace(l, (f) => {
    const E = `/*__SINGLE_EDGE_TAG_${_++}__*/`;
    return g.push(f), E;
  });
  const T = ua.minify(
    {
      "file1.js": y
    },
    {
      compress: !1,
      keep_fnames: !0,
      mangle: !1,
      output: {
        beautify: !0,
        comments: "all",
        indent_level: e
      }
    }
  );
  if (T.error)
    throw new Error(JSON.stringify(T.error));
  const v = T.code.replace(/\/\*__EDGE_TAG_BLOCK_\d+__\*\//g, (f) => {
    const E = parseInt(f.match(/\d+/)[0], 10), L = g[E], R = new Xn(L);
    return new Qn(
      {
        ...i
      },
      0
    ).handlePrint(R);
  }).replace(/\/\*__SINGLE_EDGE_TAG_\d+__\*\//g, (f) => {
    const E = parseInt(f.match(/\d+/)[0], 10);
    return g[E];
  }).replace(/__SAFE_MUSTACHE_TAG_\d+__/g, (f) => {
    const E = parseInt(f.match(/\d+/)[0], 10);
    return g[E];
  }).replace(/__MUSTACHE_TAG_\d+__/g, (f) => {
    const E = parseInt(f.match(/\d+/)[0], 10);
    return g[E];
  });
  return `${r}<script${p}>
${v.split(`
`).map((f) => `${n}${f}`).join(`
`)}
${r}<\/script>`;
}
function oa(t) {
  const e = t.match(/^\s*/);
  return e ? e[0].length : 0;
}
function xm(t, e, r) {
  return `${e}${t.value.split(`
`).map((n, i) => {
    if (i === 0)
      return `${n.trim()}`;
    if (i === t.value.split(`
`).length - 1)
      return `${e}${n.trim()}`;
    const s = oa(n);
    return `${" ".repeat(Math.max(e.length, s))}${n.trim()}`;
  }).join(`
`).replace(/[^\S\r\n]+$/g, "")}${r ? `
` : ""}`;
}
class Qn {
  constructor(e, r = void 0) {
    Ge(this, "options");
    Ge(this, "level");
    Ge(this, "skipLevelOverride");
    Ge(this, "useTabs");
    Ge(this, "printWidth");
    Ge(this, "tabWidth");
    Ge(this, "singleAttributePerLine");
    Ge(this, "inlineTags", /* @__PURE__ */ new Set([
      "a",
      "abbr",
      "acronym",
      "b",
      "bdi",
      "bdo",
      "big",
      "br",
      "button",
      "cite",
      "code",
      "data",
      "dfn",
      "em",
      "i",
      "img",
      "input",
      "kbd",
      "label",
      "mark",
      "meter",
      "q",
      "ruby",
      "rp",
      "rt",
      "s",
      "samp",
      "select",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "textarea",
      "time",
      "u",
      "var",
      "wbr",
      "feFuncR",
      "feFuncG",
      "feFuncB",
      "feFuncA"
    ]));
    this.options = e, this.level = r ?? 0, this.skipLevelOverride = !!r, this.useTabs = e.useTabs ?? !1, this.printWidth = e.printWidth ?? 80, this.tabWidth = e.tabWidth ?? 4, this.singleAttributePerLine = e.singleAttributePerLine ?? !1;
  }
  isInlineTag(e) {
    return this.inlineTags.has(e);
  }
  getIndent(e, r = "none") {
    const n = e !== void 0 ? Math.max(e, 0) : this.level;
    return this.adjustIndentLevel(r), `${this.useTabs ? "	" : " ".repeat(this.tabWidth * n)}`;
  }
  adjustIndentLevel(e) {
    e === "increase" ? this.level++ : e === "decrease" && this.level--;
  }
  formatMultilineValue(e, r, n = !0) {
    return e.split(`
`).map((i, s, o) => {
      if (s === 0)
        return `${n ? r : ""}${i.trim()}`;
      if (s === o.length - 1) return `${r}${i.trim()}`;
      const c = oa(i);
      return `${" ".repeat(Math.max(r.length, c))}${i.trim()}`;
    }).join(`
`);
  }
  formatAttributes(e, r = "") {
    return e.map(
      (n) => n.attributeValue ? `${r}${n.attributeName}=${tn(en(n.attributeValue)).trim()}` : `${r}${n.attributeName.trim()}`
    ).join(r ? `
` : " ");
  }
  formatEdgeSafeMustacheProps(e, r = "") {
    return e.map(
      (n) => `${r}${tn(n.value).trim()}`
    ).join(r ? `
` : " ");
  }
  formatEdgeMustacheProps(e, r = "") {
    return e.map((n) => `${r}${en(n.value).trim()}`).join(r ? `
` : " ");
  }
  formatEdgeTagProps(e, r = "") {
    return e.map((n) => `${r}${n.value.trim()}`).join(r ? `
` : " ");
  }
  formatComments(e, r = "") {
    return e.map((n) => `${r}${n.value}`).join(r ? `
` : " ");
  }
  printDocumentNode(e) {
    return this.skipLevelOverride || (this.level = 0), e.children.filter(km).map(
      (r, n, i) => this.handlePrint(r, i[n - 1], i[n + 1])
    ).join("");
  }
  printDTDNode(e) {
    return `${this.getIndent()}${e.value}`;
  }
  printStandardNode(e) {
    const r = e.type === "scriptlet";
    return this.formatMultilineValue(
      e.value,
      r ? "" : this.getIndent()
    );
  }
  printScriptElementNode(e) {
    return wm(
      e,
      this.tabWidth,
      this.getIndent(),
      this.getIndent(this.level + 1),
      this.options,
      this.level
    );
  }
  printStyleElementNode(e) {
    return Pm(
      e,
      this.getIndent(),
      this.getIndent(this.level + 1),
      this.getIndent(1),
      this.options,
      this.level
    );
  }
  printEdgeComment(e) {
    return this.formatMultilineValue(
      Nm(e.value.trim()),
      this.getIndent()
    );
  }
  printEdgeMustacheNode(e, r, n) {
    const i = !((r == null ? void 0 : r.type) === "htmlText" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache" || ((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName)), s = !((n == null ? void 0 : n.type) === "htmlText" || (n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache" || ((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName));
    let o = `${i ? this.getIndent() : ""}`;
    const c = e.type === "edgeSafeMustache" ? tn(e.value) : en(e.value);
    return o += s ? c.replace(/[\r\n]+/g, "").trimEnd() + `
` : c, o;
  }
  printOpeningNode(e, r, n) {
    let i = this.formatAttributes(e.attributes), s = this.formatEdgeTagProps(e.edgeTagProps), o = this.formatEdgeSafeMustacheProps(
      e.edgeSafeMustaches
    ), c = this.formatEdgeMustacheProps(e.edgeMustaches), a = this.formatComments(e.comments);
    const u = `${i} ${o} ${c} ${s} ${a}`.length, l = this.getIndent(this.level + 1), h = this.getIndent(
      void 0,
      e.type === "openingTag" ? "increase" : "none"
    ), d = this.getIndent(
      e.type === "openingTag" ? this.level - 1 : this.level
    ), p = !this.isInlineTag(e.tagName) && (n == null ? void 0 : n.type) !== "linebreak", m = !(((r == null ? void 0 : r.type) === "htmlText" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache") && this.isInlineTag(e.tagName));
    if (u > this.printWidth || this.singleAttributePerLine) {
      const _ = e.type == "voidTag" ? "/>" : ">";
      i = this.formatAttributes(e.attributes, l), s = this.formatEdgeTagProps(e.edgeTagProps, l), o = this.formatEdgeSafeMustacheProps(
        e.edgeSafeMustaches,
        l
      ), c = this.formatEdgeMustacheProps(
        e.edgeMustaches,
        l
      ), a = this.formatComments(e.comments, l);
      const y = u - 2 > 0 ? `
${d}` : "";
      return `${m ? h : ""}<${e.tagName}${i ? `
${i}` : ""}${c ? `
${c}` : ""}${o ? `
${o}` : ""}${s ? `
${this.formatMultilineValue(s, l)}` : ""}${a ? `
${this.formatMultilineValue(a, l)}` : ""}${y}${_}${p ? `
` : ""}`;
    }
    const g = e.type == "voidTag" ? " />" : ">";
    return `${m ? h : ""}<${e.tagName}${i ? ` ${i}` : ""}${c ? ` ${c}` : ""}${o ? ` ${o}` : ""}${s ? ` ${this.formatMultilineValue(s, "")}` : ""}${a ? ` ${this.formatMultilineValue(a, "")}` : ""}${g}${p ? `
` : ""}`;
  }
  printClosingNode(e, r, n) {
    const i = !this.isInlineTag(e.tagName) || (r == null ? void 0 : r.type) === "linebreak" || (r == null ? void 0 : r.type) === "edgeTag", s = (r == null ? void 0 : r.type) !== "linebreak" && (r == null ? void 0 : r.type) === "closingTag" && this.isInlineTag(r.tagName) && !this.isInlineTag(e.tagName), o = !this.isInlineTag(e.tagName) && (n == null ? void 0 : n.type) !== "linebreak" && !(((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName));
    return `${s ? `
` : ""}${i ? this.getIndent(this.level - 1, "decrease") : this.getIndent(0, "decrease")}</${e.tagName}>${o ? `
` : ""}`;
  }
  printEdgeTagNode(e, r) {
    var o, c;
    let n = "none", i = this.level;
    e.value.includes("@end") ? (n = "decrease", i--) : e.value.includes("@else") ? i-- : e.value.includes("@!") || e.value.includes("@let") || e.value.includes("@svg") || e.value.includes("@assign") || e.value.includes("@inject") || e.value.includes("@eval") || e.value.includes("@debugger") || e.value.includes("@newError") || e.value.includes("@vite") || e.value.includes("@inertia") || e.value.includes("@stack") || e.value.includes("@dd") || e.value.includes("@dump") || (o = e.value.match(/^@include\(.*/)) != null && o.length || (c = e.value.match(/^@includeIf\(.*/)) != null && c.length || !e.value.includes("(") ? n = "none" : n = "increase";
    const s = (r == null ? void 0 : r.type) !== "linebreak" && !e.value.includes(`
`);
    return xm(
      e,
      this.getIndent(i, n),
      s
    );
  }
  printHtmlTextNode(e, r, n) {
    const i = !((r == null ? void 0 : r.type) === "scriptlet" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || ((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName)), s = !((n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || (n == null ? void 0 : n.type) === "htmlText" || ((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName) || (n == null ? void 0 : n.type) === "scriptlet"), o = i ? this.getIndent() + e.value : e.value;
    return s ? `${o.trimEnd()}
` : o;
  }
  printLineBreak(e) {
    return e.value;
  }
  handlePrint(e, r = void 0, n = void 0) {
    switch (e.type) {
      case "document":
        return this.printDocumentNode(e);
      case "dtd":
        return this.printDTDNode(e);
      case "htmlComment":
      case "htmlConditionalComment":
      case "cdata":
      case "scriptlet":
        return this.printStandardNode(e);
      case "scriptElement":
        return this.printScriptElementNode(e);
      case "styleElement":
        return this.printStyleElementNode(e);
      case "edgeComment":
        return this.printEdgeComment(e);
      case "edgeMustache":
      case "edgeEscapedMustache":
      case "edgeSafeMustache":
        return this.printEdgeMustacheNode(e, r, n);
      case "openingTag":
      case "voidTag":
        return this.printOpeningNode(e, r, n);
      case "closingTag":
        return this.printClosingNode(e, r, n);
      case "edgeTag":
        return this.printEdgeTagNode(e, n);
      case "htmlText":
        return this.printHtmlTextNode(e, r, n);
      case "linebreak":
        return this.printLineBreak(e);
      default:
        return "";
    }
  }
}
function Um(t, e) {
  const r = t.getNode();
  return new Qn(e).handlePrint(r);
}
const jm = [
  {
    name: "EdgeJS",
    parsers: ["edgejs"],
    extensions: [".edge"],
    tmScope: "text.html.edge",
    aceMode: "html",
    linguistLanguageId: 460509620,
    vscodeLanguageIds: ["edge"]
  }
], $m = {
  edgejs: {
    parse(t) {
      return Xn(t);
    },
    astFormat: "edgejs",
    locStart(t) {
      return t.start;
    },
    locEnd(t) {
      return t.end;
    }
  }
}, Gm = {
  edgejs: {
    print: Um
  }
}, Bm = {
  useTabs: !1,
  tabWidth: 4,
  printWidth: 80,
  singleAttributePerLine: !1
}, Vm = {};
export {
  Bm as defaultOptions,
  jm as languages,
  Vm as options,
  $m as parsers,
  Gm as printers
};
